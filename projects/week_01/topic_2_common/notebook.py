# %% [markdown]
# ## Imports

# %%
from main_demo import (
    demo_activity_selection,
    demo_fractional_knapsack,
    demo_huffman_coding,
    demo_fibonacci_comparison,
    demo_knapsack_01,
    demo_coin_change,
    demo_graph_algorithms,
    demo_tsp,
    demo_comprehensive_comparison,
    main
    )
# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –Ω–∞—à—ñ –º–æ–¥—É–ª—ñ
from greedy_algorithms import (
    GreedyAlgorithms, HuffmanCoding, GreedyVisualizer,
    Activity, Item
)
from dynamic_programming import (
    DynamicProgramming, DPVisualizer, PerformanceComparator,
    DPItem
)
from graph_algorithms import (
    GraphAlgorithms, GraphVisualizer, TSPSolver,
    Edge
)

# %% [markdown]
# ## –ó–∞–¥–∞—á–∞ –ø—Ä–æ –≤–∏–±—ñ—Ä –∑–∞—è–≤–æ–∫

# %%
demo_activity_selection()

# %%
# –†–µ–∞–ª—ñ—Å—Ç–∏—á–Ω–∏–π —Å–ø–∏—Å–æ–∫ –ø–æ–¥—ñ–π –∑ –Ω–∞–∑–≤–∞–º–∏ —Ç–∞ —á–∞—Å–æ–º (—É –≥–æ–¥–∏–Ω–∞—Ö)
activities = [
    Activity("–†–∞–Ω–∫–æ–≤–∞ –ø—Ä–æ–±—ñ–∂–∫–∞", 6.0, 7.0),
    Activity("–°–Ω—ñ–¥–∞–Ω–æ–∫ –∑ —Ä–æ–¥–∏–Ω–æ—é", 7.0, 8.0),
    Activity("–†–æ–±–æ—á–∞ –∑—É—Å—Ç—Ä—ñ—á (Zoom)", 8.5, 9.5),
    Activity("–ì–ª–∏–±–æ–∫–∞ —Ä–æ–±–æ—Ç–∞ –Ω–∞–¥ –ø—Ä–æ–µ–∫—Ç–æ–º", 9.0, 11.5),
    Activity("–ü—Ä–æ–≥—É–ª—è–Ω–∫–∞/–∫–∞–≤–∞-–±—Ä–µ–π–∫", 11.5, 12.0),
    Activity("–û–Ω–ª–∞–π–Ω-–ª–µ–∫—Ü—ñ—è", 12.0, 13.0),
    Activity("–û–±—ñ–¥", 13.0, 14.0),
    Activity("–ó—É—Å—Ç—Ä—ñ—á –∑ –∫–ª—ñ—î–Ω—Ç–æ–º", 13.5, 14.5),
    Activity("–ß–∏—Ç–∞–Ω–Ω—è / –Ω–∞–≤—á–∞–Ω–Ω—è", 14.5, 15.5),
    Activity("–°–ø–æ—Ä—Ç–∑–∞–ª", 16.0, 17.0),
    Activity("–ü–æ–∫—É–ø–∫–∏ / —Å–ø—Ä–∞–≤–∏", 17.0, 18.0),
    Activity("–í–µ—á–µ—Ä—è", 18.5, 19.5),
    Activity("–ü–µ—Ä–µ–≥–ª—è–¥ —Ñ—ñ–ª—å–º—É", 20.0, 22.0),
    Activity("–ú–µ–¥–∏—Ç–∞—Ü—ñ—è / –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–æ —Å–Ω—É", 22.0, 22.5)
]

demo_activity_selection(activities)

# %% [markdown]
# ## –ó–∞–¥–∞—á–∞ 2: –ó–∞–¥–∞—á–∞ –ø—Ä–æ –¥—Ä–æ–±–æ–≤–∏–π —Ä—é–∫–∑–∞–∫ (Fractional Knapsack)

# %%
demo_fractional_knapsack()

# %%
items = [
    Item("–ù–æ—É—Ç–±—É–∫", 2.0, 300),         # –¥—É–∂–µ –∫–æ—Ä–∏—Å–Ω–∏–π, –ª–µ–≥–∫–∏–π
    Item("–ü–ª—è—à–∫–∞ –≤–æ–¥–∏", 1.0, 30),      # –∂–∏—Ç—Ç—î–≤–æ –≤–∞–∂–ª–∏–≤–∞
    Item("–ö–Ω–∏–≥–∞", 1.5, 50),            # –æ—Å–≤—ñ—Ç–Ω—è —Ü—ñ–Ω–Ω—ñ—Å—Ç—å
    Item("–ü–∞–≤–µ—Ä–±–∞–Ω–∫", 0.5, 80),        # –±–∞–≥–∞—Ç–æ –∫–æ—Ä–∏—Å—Ç—ñ –ø—Ä–∏ –º–∞–ª—ñ–π –≤–∞–∑—ñ
    Item("–ö—É—Ä—Ç–∫–∞", 2.5, 60),           # –ø–æ—Ç—Ä—ñ–±–Ω–∞ –ø—Ä–∏ –ø–æ–≥–∞–Ω—ñ–π –ø–æ–≥–æ–¥—ñ
    Item("–ê–ø—Ç–µ—á–∫–∞", 1.0, 90),          # –∫—Ä–∏—Ç–∏—á–Ω–∞ –¥–ª—è –±–µ–∑–ø–µ–∫–∏
    Item("–á–∂–∞ (–ø–µ—Ä–µ–∫—É—Å)", 1.2, 40),    # –µ–Ω–µ—Ä–≥–µ—Ç–∏—á–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞
    Item("–ù–∞–≤—É—à–Ω–∏–∫–∏", 0.3, 40),        # –Ω–µ–≤–µ–ª–∏–∫–∞ –≤–∞–≥–∞, –ø–æ–º—ñ—Ä–Ω–∞ —Ü—ñ–Ω–Ω—ñ—Å—Ç—å
    Item("–ü–ª–∞–Ω—à–µ—Ç", 0.7, 150),         # –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ –Ω–æ—É—Ç–±—É–∫—É
    Item("–¢–µ—Ä–º–æ–±—ñ–ª–∏–∑–Ω–∞", 1.3, 55),     # –∫–æ–º—Ñ–æ—Ä—Ç –≤ —É–º–æ–≤–∞—Ö —Ö–æ–ª–æ–¥—É
    Item("–ó–∞–ø–∏—Å–Ω–∏–∫ + —Ä—É—á–∫–∞", 0.4, 25), # –Ω–∏–∑—å–∫–∞ –≤–∞–≥–∞, –¥–µ—è–∫–∞ –∫–æ—Ä–∏—Å—Ç—å
    Item("–õ—ñ—Ö—Ç–∞—Ä–∏–∫", 0.6, 35),         # –≤–∞–∂–ª–∏–≤–∏–π —É —Ç–µ–º—Ä—è–≤—ñ
    Item("–ó–∞—Ä—è–¥–Ω—ñ –∫–∞–±–µ–ª—ñ", 0.2, 20),   # –ø–æ—Ç—Ä—ñ–±–Ω—ñ, –∞–ª–µ –Ω–µ–≤–∞–∂–∫—ñ
    Item("–§–æ—Ç–æ–∞–ø–∞—Ä–∞—Ç", 1.8, 120),      # –≤–∏—Å–æ–∫–∞ —Ü—ñ–Ω–Ω—ñ—Å—Ç—å –¥–ª—è –±–ª–æ–≥–µ—Ä–∞
    Item("–°–ø–∞–ª—å–Ω–∏–π –º—ñ—à–æ–∫", 3.5, 110)   # –≤–∞–∂–∫–∏–π, –∞–ª–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –∫–æ—Ä–∏—Å–Ω–∏–π —É –ø–æ—Ö–æ–¥—ñ
]

capacity = 20

demo_fractional_knapsack(items, capacity)

# %% [markdown]
# ## "–û–±–º–µ–∂–µ–Ω–Ω—è –ñ–∞–¥—ñ–±–Ω–∏—Ö –ê–ª–≥–æ—Ä–∏—Ç–º—ñ–≤".
# 
# - –ü—Ä–∏–∫–ª–∞–¥: "–ó–∞–¥–∞—á–∞ –ø—Ä–æ —Ä–æ–∑–º—ñ–Ω –º–æ–Ω–µ—Ç"

# %%
PerformanceComparator.compare_coin_change()

# %%
cases = [
    # ‚úÖ 1. –ö–ª–∞—Å–∏—á–Ω–∏–π –≤–∏–ø–∞–¥–æ–∫ (–∫–∞–Ω–æ–Ω—ñ—á–Ω–∞ —Å–∏—Å—Ç–µ–º–∞)
    {
        'coins1': [25, 10, 5, 1],
        'amount1': 30,
        'coins2': [10, 5, 1],
        'amount2': 28
    },
    # ‚ùå 2. –ù–µ–∫–∞–Ω–æ–Ω—ñ—á–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –∑ "–ø–∞—Å—Ç–∫–æ—é"
    {
        'coins1': [9, 6, 1],
        'amount1': 11,
        'coins2': [4, 3, 1],
        'amount2': 6
    },
    # ‚ùå 3. –í–∏–ø–∞–¥–æ–∫ —ñ–∑ –Ω–µ–µ—Ñ–µ–∫—Ç–∏–≤–Ω–∏–º greedy
    {
        'coins1': [7, 5, 1],
        'amount1': 18,
        'coins2': [9, 4, 1],
        'amount2': 15
    },
    # üß† 4. –ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ –≤–∞–ª—é—Ç–∞
    {
        'coins1': [1, 7, 10, 22],
        'amount1': 29,
        'coins2': [1, 3, 4],
        'amount2': 6
    },
    # ‚ö†Ô∏è 5. –°–∏—Ç—É–∞—Ü—ñ—è, –¥–µ greedy –º–æ–∂–µ –±—É—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º, –∞–ª–µ –Ω–µ –∑–∞–≤–∂–¥–∏
    {
        'coins1': [1, 3, 4],
        'amount1': 5,
        'coins2': [1, 3, 4],
        'amount2': 6
    }
]

for i, param in enumerate(cases, 1):
    print(f"\n--- –ü–†–ò–ö–õ–ê–î {i} ---")
    PerformanceComparator.compare_coin_change(**param)


# %% [markdown]
# ## –ê–ª–≥–æ—Ä–∏—Ç–º –ì–∞—Ñ—Ñ–º–∞–Ω–∞ (Huffman Coding)

# %%
demo_huffman_coding()

# %%
text = "SHE SELLS SEA SHELLS BY THE SEA SHORE AND SHE STILL SELLS THEM SURELY"

demo_huffman_coding(text)

# %% [markdown]
# ## –ß–∏—Å–ª–∞ –§—ñ–±–æ–Ω–∞—á—á—ñ

# %%
demo_fibonacci_comparison()


# %%
n = 100

demo_fibonacci_comparison(n)


# %% [markdown]
# ## –ó–∞–¥–∞—á–∞ –ø—Ä–æ —Ä—é–∫–∑–∞–∫ (0/1 Knapsack Problem)

# %%

demo_knapsack_01()


# %%


items_01 = [
    DPItem("–ù–æ—É—Ç–±—É–∫", 3, 2000),         # —Ä–æ–±–æ—Ç–∞, –≤–∏—Å–æ–∫–∞ —Ü—ñ–Ω–Ω—ñ—Å—Ç—å
    DPItem("–ê–ø—Ç–µ—á–∫–∞", 1, 1000),         # –≤–∏–∂–∏–≤–∞–Ω–Ω—è
    DPItem("–¢–µ—Ä–º–æ–±—ñ–ª–∏–∑–Ω–∞", 2, 700),     # —Ç–µ–ø–ª–æ –≤ –ø–æ–ª—å–æ–≤–∏—Ö —É–º–æ–≤–∞—Ö
    DPItem("–ü–∞–≤–µ—Ä–±–∞–Ω–∫", 1, 800),        # –∂–∏–≤–ª–µ–Ω–Ω—è
    DPItem("–õ—ñ—Ö—Ç–∞—Ä–∏–∫", 1, 500),         # –æ—Ä—ñ—î–Ω—Ç–∞—Ü—ñ—è –≤–Ω–æ—á—ñ
    DPItem("–§–æ—Ç–æ–∞–ø–∞—Ä–∞—Ç", 2, 1200),      # –¥–ª—è —Ñ—ñ–∫—Å–∞—Ü—ñ—ó –ø–æ–¥—ñ–π
    DPItem("–á–∂–∞", 3, 900),              # –µ–Ω–µ—Ä–≥—ñ—è
    DPItem("–ö–Ω–∏–≥–∞", 1, 300),            # –ø—Å–∏—Ö–æ–ª–æ–≥—ñ—á–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞
]


capacity_01 = 8

demo_knapsack_01(items=items_01, capacity=capacity_01)


# %% [markdown]
# ## –ê–ª–≥–æ—Ä–∏—Ç–º –î–µ–π–∫—Å—Ç—Ä–∏ —Ç–∞ –ü—Ä—ñ–º–∞/–ö—Ä—É—Å–∫–∞–ª–∞

# %%

demo_graph_algorithms()


# %%
graph = {
    'A': [('B', 2), ('C', 5), ('D', 1)],
    'B': [('A', 2), ('E', 3), ('F', 7)],
    'C': [('A', 5), ('F', 2), ('G', 6)],
    'D': [('A', 1), ('G', 1)],
    'E': [('B', 3), ('H', 4)],
    'F': [('B', 7), ('C', 2), ('H', 3)],
    'G': [('C', 6), ('D', 1), ('H', 2)],
    'H': [('E', 4), ('F', 3), ('G', 2)]
}


demo_graph_algorithms(graph=graph, start_node='A')

# %% [markdown]
# ## TSP

# %%

demo_tsp()


# %%
distances = {
    ('–ö–∏—ó–≤', '–õ—å–≤—ñ–≤'): 540,
    ('–ö–∏—ó–≤', '–û–¥–µ—Å–∞'): 475,
    ('–ö–∏—ó–≤', '–•–∞—Ä–∫—ñ–≤'): 480,
    ('–ö–∏—ó–≤', '–î–Ω—ñ–ø—Ä–æ'): 475,
    ('–õ—å–≤—ñ–≤', '–û–¥–µ—Å–∞'): 790,
    ('–õ—å–≤—ñ–≤', '–•–∞—Ä–∫—ñ–≤'): 1050,
    ('–õ—å–≤—ñ–≤', '–î–Ω—ñ–ø—Ä–æ'): 930,
    ('–û–¥–µ—Å–∞', '–•–∞—Ä–∫—ñ–≤'): 730,
    ('–û–¥–µ—Å–∞', '–î–Ω—ñ–ø—Ä–æ'): 500,
    ('–•–∞—Ä–∫—ñ–≤', '–î–Ω—ñ–ø—Ä–æ'): 210,
}


demo_tsp(distances=distances, start_city='–ö–∏—ó–≤')

# %% [markdown]
# ## other:

# %%

# demo_comprehensive_comparison()


# %%
# main()

# %%



