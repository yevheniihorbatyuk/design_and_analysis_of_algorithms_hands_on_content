# %% [markdown]
#    # –ö–æ–º–ø–ª–µ–∫—Å–Ω–∏–π –∫—É—Ä—Å –∑ –∞–ª–≥–æ—Ä–∏—Ç–º—ñ–≤ —Ç–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä –¥–∞–Ω–∏—Ö –Ω–∞ –≥—Ä–∞—Ñ–∞—Ö
# 
#    ## –†–æ–∑–¥—ñ–ª 1: –ö–ª–∞—Å–∏—á–Ω—ñ –∞–ª–≥–æ—Ä–∏—Ç–º–∏ –Ω–∞ –≥—Ä–∞—Ñ–∞—Ö
# 
#    ### üéØ –¶—ñ–ª—ñ —Ä–æ–∑–¥—ñ–ª—É:
#    1. **–û–ø–∞–Ω—É–≤–∞—Ç–∏** —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ñ –∞–ª–≥–æ—Ä–∏—Ç–º–∏ –¥–ª—è –ø–æ—à—É–∫—É —à–ª—è—Ö—ñ–≤, –æ–±—Ö–æ–¥—É —Ç–∞ –∞–Ω–∞–ª—ñ–∑—É —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –≥—Ä–∞—Ñ—ñ–≤.
#    2. **–ù–∞–≤—á–∏—Ç–∏—Å—å** –∑–∞—Å—Ç–æ—Å–æ–≤—É–≤–∞—Ç–∏ —Ü—ñ –∞–ª–≥–æ—Ä–∏—Ç–º–∏ –¥–ª—è –≤–∏—Ä—ñ—à–µ–Ω–Ω—è –ø—Ä–∞–∫—Ç–∏—á–Ω–∏—Ö –∑–∞–¥–∞—á –∑ —Ä—ñ–∑–Ω–∏—Ö –¥–æ–º–µ–Ω—ñ–≤.
#    3. **–†–æ–∑—É–º—ñ—Ç–∏** –∫–æ–º–ø—Ä–æ–º—ñ—Å–∏ (—à–≤–∏–¥–∫—ñ—Å—Ç—å, –ø–∞–º'—è—Ç—å, –æ–±–º–µ–∂–µ–Ω–Ω—è) –º—ñ–∂ —Ä—ñ–∑–Ω–∏–º–∏ –ø—ñ–¥—Ö–æ–¥–∞–º–∏.

# %%
# =============================================================================
# –ö–ª—ñ—Ç–∏–Ω–∫–∞ 1: –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ —Ç–∞ —ñ–º–ø–æ—Ä—Ç–∏
# =============================================================================
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import networkx as nx
import numpy as np
import time

# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –Ω–∞—à—ñ –≤–ª–∞—Å–Ω—ñ –º–æ–¥—É–ª—ñ
from src.algorithms.shortest_path import Dijkstra, AStar, BellmanFord, FloydWarshall, BidirectionalSearch
from src.algorithms.traversal import BFS, DFS, find_negative_cycle_bf
from src.algorithms.mst import Kruskal, Prim
from src.utils.graph_generator import GraphGenerator
from src.utils.visualizer import PathVisualizer, TraversalVisualizer, MstVisualizer, AnalysisVisualizer

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—ó
sns.set_theme(style="whitegrid", palette="viridis")
plt.rcParams['figure.figsize'] = (15, 10)
plt.rcParams['font.size'] = 12
print("‚úÖ –°–µ—Ä–µ–¥–æ–≤–∏—â–µ –≥–æ—Ç–æ–≤–µ –¥–æ —Ä–æ–±–æ—Ç–∏.")



# %% [markdown]
#    ## 1.1 –ê–ª–≥–æ—Ä–∏—Ç–º–∏ –ø–æ—à—É–∫—É –Ω–∞–π–∫–æ—Ä–æ—Ç—à–æ–≥–æ —à–ª—è—Ö—É
# 
# 
# 
# 
# 
# 
# 
#    –ü–æ—à—É–∫ –Ω–∞–π–∫–æ—Ä–æ—Ç—à–æ–≥–æ —à–ª—è—Ö—É ‚Äî –æ–¥–Ω–∞ –∑ –Ω–∞–π–±—ñ–ª—å—à —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω–∏—Ö –∑–∞–¥–∞—á –≤ —Ç–µ–æ—Ä—ñ—ó –≥—Ä–∞—Ñ—ñ–≤ –∑ –≤–µ–ª–∏—á–µ–∑–Ω–æ—é –∫—ñ–ª—å–∫—ñ—Å—Ç—é –ø—Ä–∞–∫—Ç–∏—á–Ω–∏—Ö –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω—å, –≤—ñ–¥ GPS-–Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –¥–æ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü—ñ—ó —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç-—Ç—Ä–∞—Ñ—ñ–∫—É. –£ —Ü—å–æ–º—É —Ä–æ–∑–¥—ñ–ª—ñ –º–∏ —Ä–æ–∑–≥–ª—è–Ω–µ–º–æ –∫–ª—é—á–æ–≤—ñ –∞–ª–≥–æ—Ä–∏—Ç–º–∏ —Ç–∞ —ó—Ö–Ω—ñ –æ—Å–æ–±–ª–∏–≤–æ—Å—Ç—ñ.

# %% [markdown]
#    ### –ê–ª–≥–æ—Ä–∏—Ç–º –î–µ–π–∫—Å—Ç—Ä–∏ (Dijkstra's Algorithm)
# 
# 
# 
# 
# 
# 
# 
#    **–Ü–¥–µ—è:** "–ñ–∞–¥—ñ–±–Ω–∏–π" –∞–ª–≥–æ—Ä–∏—Ç–º, —è–∫–∏–π –∑–Ω–∞—Ö–æ–¥–∏—Ç—å –Ω–∞–π–∫–æ—Ä–æ—Ç—à–∏–π —à–ª—è—Ö –≤—ñ–¥ –æ–¥–Ω—ñ—î—ó —Å—Ç–∞—Ä—Ç–æ–≤–æ—ó –≤–µ—Ä—à–∏–Ω–∏ –¥–æ –≤—Å—ñ—Ö —ñ–Ω—à–∏—Ö —É –≥—Ä–∞—Ñ—ñ –∑ **–Ω–µ–≤—ñ–¥'—î–º–Ω–∏–º–∏** –≤–∞–≥–∞–º–∏ —Ä–µ–±–µ—Ä. –ù–∞ –∫–æ–∂–Ω–æ–º—É –∫—Ä–æ—Ü—ñ –≤—ñ–Ω –æ–±–∏—Ä–∞—î –Ω–∞–π–±–ª–∏–∂—á—É —â–µ –Ω–µ –≤—ñ–¥–≤—ñ–¥–∞–Ω—É –≤–µ—Ä—à–∏–Ω—É —ñ –æ–Ω–æ–≤–ª—é—î –≤—ñ–¥—Å—Ç–∞–Ω—ñ –¥–æ —ó—ó —Å—É—Å—ñ–¥—ñ–≤.
# 
# 
# 
# 
# 
# 
# 
#    | –°–∫–ª–∞–¥–Ω—ñ—Å—Ç—å | –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø–∞–º'—è—Ç—ñ | –û–±–º–µ–∂–µ–Ω–Ω—è |
#    | :--- | :--- | :--- |
#    | `O(E log V)` | `O(V)` | –ù–µ –ø—Ä–∞—Ü—é—î –∑ –≤—ñ–¥'—î–º–Ω–∏–º–∏ –≤–∞–≥–∞–º–∏ |
# 
#    **–î–æ–º–µ–Ω–∏ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è:**
# 
#    - **–õ–æ–≥—ñ—Å—Ç–∏–∫–∞:** –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω–∏—Ö –º–∞—Ä—à—Ä—É—Ç—ñ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏.
# 
#    - **–ú–µ—Ä–µ–∂—ñ:** –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü—ñ—è –ø–∞–∫–µ—Ç—ñ–≤ –∑–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–º OSPF.
# 
#    - **–ë—ñ–æ—ñ–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞:** –ê–Ω–∞–ª—ñ–∑ –º–µ—Ç–∞–±–æ–ª—ñ—á–Ω–∏—Ö —à–ª—è—Ö—ñ–≤.

# %%
# =============================================================================
# –ö–ª—ñ—Ç–∏–Ω–∫–∞ 2: –ö–æ–Ω—Ü–µ–ø—Ç—É–∞–ª—å–Ω–∏–π –ø—Ä–∏–∫–ª–∞–¥
# =============================================================================
conceptual_graph = nx.Graph()
edges = [('A', 'B', 4), ('A', 'C', 2), ('B', 'C', 1), ('B', 'D', 5), ('C', 'D', 8), ('C', 'E', 10), ('D', 'E', 2)]
conceptual_graph.add_weighted_edges_from(edges)
start_node, end_node = 'A', 'E'

path_info = Dijkstra.find_path(conceptual_graph, start_node, end_node)

print(f"–ö–æ–Ω—Ü–µ–ø—Ç—É–∞–ª—å–Ω–∏–π –ø—Ä–∏–∫–ª–∞–¥: –ø–æ—à—É–∫ —à–ª—è—Ö—É –∑ '{start_node}' –¥–æ '{end_node}'")
print(f"  -> –ó–Ω–∞–π–¥–µ–Ω–∏–π —à–ª—è—Ö: {' ‚Üí '.join(path_info['path'])}")
print(f"  -> –ó–∞–≥–∞–ª—å–Ω–∞ –≤—ñ–¥—Å—Ç–∞–Ω—å: {path_info['distance']:.2f}")

fig = PathVisualizer.draw_path(
    conceptual_graph,
    path=path_info['path'],
    title=f"–ù–∞–π–∫–æ—Ä–æ—Ç—à–∏–π —à–ª—è—Ö –≤—ñ–¥ {start_node} –¥–æ {end_node} (–î–µ–π–∫—Å—Ç—Ä–∞)"
)
plt.show()



# %% [markdown]
#    #### –ü—Ä–∞–∫—Ç–∏—á–Ω–∏–π –ø—Ä–∏–∫–ª–∞–¥: –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –ª–æ–≥—ñ—Å—Ç–∏–∫–∏
# 
# 
# 
#    **–ó–∞–¥–∞—á–∞:** –£ –Ω–∞—Å —î –º–µ—Ä–µ–∂–∞ —Å–∫–ª–∞–¥—ñ–≤ —Ç–∞ –º–∞–≥–∞–∑–∏–Ω—ñ–≤. –ü–æ—Ç—Ä—ñ–±–Ω–æ –∑–Ω–∞–π—Ç–∏ –Ω–∞–π–¥–µ—à–µ–≤—à–∏–π –º–∞—Ä—à—Ä—É—Ç –¥–æ—Å—Ç–∞–≤–∫–∏ —Ç–æ–≤–∞—Ä—É –∑ –≥–æ–ª–æ–≤–Ω–æ–≥–æ —Å–∫–ª–∞–¥—É (—Ö–∞–±—É) –¥–æ –≤—ñ–¥–¥–∞–ª–µ–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω—É. –í–∞–≥–∞ —Ä–µ–±–µ—Ä ‚Äî —Ü–µ –≤–∞—Ä—Ç—ñ—Å—Ç—å –ø–µ—Ä–µ–≤–µ–∑–µ–Ω–Ω—è –º—ñ–∂ –ø—É–Ω–∫—Ç–∞–º–∏.

# %%
# =============================================================================
# –ö–ª—ñ—Ç–∏–Ω–∫–∞ 3: –ü—Ä–∞–∫—Ç–∏—á–Ω–∏–π –ø—Ä–∏–∫–ª–∞–¥ –∑ –¥–æ–º–µ–Ω—É "–õ–æ–≥—ñ—Å—Ç–∏–∫–∞"
# =============================================================================
logistics_graph, node_types, pos = GraphGenerator.create_logistics_network(n_hubs=3, n_warehouses=10, n_stores=30, seed=42)
hub_node = 0
store_node = list(node_types.keys())[-1]

logistics_path_info = Dijkstra.find_path(logistics_graph, hub_node, store_node)

print(f"–ü—Ä–∞–∫—Ç–∏—á–Ω–∏–π –ø—Ä–∏–∫–ª–∞–¥: –º–∞—Ä—à—Ä—É—Ç –∑ –•–∞–±—É-{hub_node} –¥–æ –ú–∞–≥–∞–∑–∏–Ω—É-{store_node}")
print(f"  -> –û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π –º–∞—Ä—à—Ä—É—Ç: {' ‚Üí '.join(map(str, logistics_path_info['path']))}")
print(f"  -> –í–∞—Ä—Ç—ñ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏: ${logistics_path_info['distance']:.2f}")

fig = PathVisualizer.draw_logistics_network(
    logistics_graph, node_types, pos,
    path=logistics_path_info['path'],
    title="–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π –º–∞—Ä—à—Ä—É—Ç –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ –ª–æ–≥—ñ—Å—Ç–∏—á–Ω—ñ–π –º–µ—Ä–µ–∂—ñ"
)
plt.savefig('./data/dijkstra_logistics_path.png', dpi=300, bbox_inches='tight')
plt.show()



# %% [markdown]
#    ### –ê–ª–≥–æ—Ä–∏—Ç–º A*
# 
# 
# 
# 
# 
# 
# 
#    **–Ü–¥–µ—è:** –ü–æ–∫—Ä–∞—â–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è –î–µ–π–∫—Å—Ç—Ä–∏, —è–∫–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î **–µ–≤—Ä–∏—Å—Ç–∏—á–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é** `h(n)` –¥–ª—è –æ—Ü—ñ–Ω–∫–∏ –≤—ñ–¥—Å—Ç–∞–Ω—ñ –≤—ñ–¥ –ø–æ—Ç–æ—á–Ω–æ—ó –≤–µ—Ä—à–∏–Ω–∏ `n` –¥–æ —Ü—ñ–ª—ñ. –¶–µ –¥–æ–∑–≤–æ–ª—è—î A* —Ä—É—Ö–∞—Ç–∏—Å—è –±—ñ–ª—å—à —Ü—ñ–ª–µ—Å–ø—Ä—è–º–æ–≤–∞–Ω–æ, –∑–∞–º—ñ—Å—Ç—å —Ç–æ–≥–æ, —â–æ–± –¥–æ—Å–ª—ñ–¥–∂—É–≤–∞—Ç–∏ –≥—Ä–∞—Ñ —É –≤—Å—ñ—Ö –Ω–∞–ø—Ä—è–º–∫–∞—Ö. –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç –≤–µ—Ä—à–∏–Ω–∏ –≤–∏–∑–Ω–∞—á–∞—î—Ç—å—Å—è —è–∫ `f(n) = g(n) + h(n)`, –¥–µ `g(n)` ‚Äî –≤–∂–µ –ø—Ä–æ–π–¥–µ–Ω–∏–π —à–ª—è—Ö.
# 
# 
# 
# 
# 
# 
# 
#    **–ö–ª—é—á–æ–≤–∞ –≤–∏–º–æ–≥–∞:** –ï–≤—Ä–∏—Å—Ç–∏–∫–∞ –º–∞—î –±—É—Ç–∏ *–¥–æ–ø—É—Å—Ç–∏–º–æ—é* (admissible), —Ç–æ–±—Ç–æ –Ω—ñ–∫–æ–ª–∏ –Ω–µ –ø–µ—Ä–µ–æ—Ü—ñ–Ω—é–≤–∞—Ç–∏ —Ä–µ–∞–ª—å–Ω—É –≤–∞—Ä—Ç—ñ—Å—Ç—å —à–ª—è—Ö—É –¥–æ —Ü—ñ–ª—ñ.

# %%
# =============================================================================
# –ö–ª—ñ—Ç–∏–Ω–∫–∞ 4: –ü–æ—Ä—ñ–≤–Ω—è–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ Dijkstra vs A*
# =============================================================================
city_graph, pos = GraphGenerator.create_city_road_network(n_intersections=150, seed=101)
start_city, end_city = 0, 149

# –ó–∞–ø—É—Å–∫–∞—î–º–æ –æ–±–∏–¥–≤–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–∏
result_dijkstra = Dijkstra.find_path(city_graph, start_city, end_city)
result_astar = AStar.find_path(city_graph, start_city, end_city, positions=pos, heuristic='euclidean')

# –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ —É –≤–∏–≥–ª—è–¥—ñ —Ç–∞–±–ª–∏—Ü—ñ
comparison_df = pd.DataFrame([result_dijkstra, result_astar]).set_index('algorithm')
print("–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ Dijkstra —Ç–∞ A*:")
print(comparison_df[['distance', 'execution_time']].assign(visited_nodes=lambda df: [len(result_dijkstra['visited_nodes']), len(result_astar['visited_nodes'])]))

# –í—ñ–∑—É–∞–ª—ñ–∑—É—î–º–æ –≤—ñ–¥–≤—ñ–¥–∞–Ω—ñ –≤—É–∑–ª–∏
fig = PathVisualizer.draw_visited_nodes_comparison(
    city_graph, pos,
    results=[result_dijkstra, result_astar],
    title="–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –¥–æ—Å–ª—ñ–¥–∂–µ–Ω–∏—Ö –∑–æ–Ω: Dijkstra vs A*"
)
plt.savefig('./data/dijkstra_vs_astar_visited.png', dpi=300, bbox_inches='tight')
plt.show()



# %% [markdown]
#    #### –í–∏—Å–Ω–æ–≤–∫–∏ –∑ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è
# 
# 
# 
#    –ù–∞ –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—ó —á—ñ—Ç–∫–æ –≤–∏–¥–Ω–æ, —â–æ **Dijkstra** (–∑–ª—ñ–≤–∞) –¥–æ—Å–ª—ñ–¥–∂—É—î –≤–µ–ª–∏–∫–µ –∫–æ–ª–æ –Ω–∞–≤–∫–æ–ª–æ —Å—Ç–∞—Ä—Ç–æ–≤–æ—ó —Ç–æ—á–∫–∏, —Ç–æ–¥—ñ —è–∫ **A*** (—Å–ø—Ä–∞–≤–∞) —Ä—É—Ö–∞—î—Ç—å—Å—è –≤—É–∑—å–∫–∏–º "–∫–æ—Ä–∏–¥–æ—Ä–æ–º" —É –Ω–∞–ø—Ä—è–º–∫—É —Ü—ñ–ª—ñ. –¶–µ –ø—Ä–∏–∑–≤–æ–¥–∏—Ç—å –¥–æ –∑–Ω–∞—á–Ω–æ–≥–æ –∑–º–µ–Ω—à–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –≤—ñ–¥–≤—ñ–¥–∞–Ω–∏—Ö –≤—É–∑–ª—ñ–≤ —Ç–∞, —è–∫ –Ω–∞—Å–ª—ñ–¥–æ–∫, –¥–æ –ø—Ä–∏—Å–∫–æ—Ä–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏, —â–æ –∫—Ä–∏—Ç–∏—á–Ω–æ –≤–∞–∂–ª–∏–≤–æ –¥–ª—è –≤–µ–ª–∏–∫–∏—Ö –∫–∞—Ä—Ç.

# %% [markdown]
#    ### –ê–ª–≥–æ—Ä–∏—Ç–º –ë–µ–ª–ª–º–∞–Ω–∞-–§–æ—Ä–¥–∞ (Bellman-Ford)
# 
# 
# 
# 
# 
# 
# 
#    **–Ü–¥–µ—è:** –ù–∞ –≤—ñ–¥–º—ñ–Ω—É –≤—ñ–¥ –î–µ–π–∫—Å—Ç—Ä–∏, —Ü–µ–π –∞–ª–≥–æ—Ä–∏—Ç–º –º–æ–∂–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –∑ –≥—Ä–∞—Ñ–∞–º–∏, —â–æ –º—ñ—Å—Ç—è—Ç—å —Ä–µ–±—Ä–∞ –∑ **–≤—ñ–¥'—î–º–Ω–æ—é –≤–∞–≥–æ—é**. –í—ñ–Ω –ø—Ä–∞—Ü—é—î —à–ª—è—Ö–æ–º —ñ—Ç–µ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è (—Ä–µ–ª–∞–∫—Å–∞—Ü—ñ—ó) –≤—ñ–¥—Å—Ç–∞–Ω–µ–π –¥–æ –≤—Å—ñ—Ö –≤–µ—Ä—à–∏–Ω `V-1` —Ä–∞–∑—ñ–≤. –ù–∞ `V`-–π —ñ—Ç–µ—Ä–∞—Ü—ñ—ó –≤—ñ–Ω –º–æ–∂–µ –≤–∏—è–≤–∏—Ç–∏ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Ü–∏–∫–ª—É –∑ –≤—ñ–¥'—î–º–Ω–æ—é —Å—É–º–∞—Ä–Ω–æ—é –≤–∞–≥–æ—é.
# 
# 
# 
# 
# 
# 
# 
#    **–î–æ–º–µ–Ω–∏ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è:**
# 
# 
# 
#    - **–§—ñ–Ω–∞–Ω—Å–∏:** –ü–æ—à—É–∫ –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω–∏—Ö –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π –Ω–∞ –≤–∞–ª—é—Ç–Ω–∏—Ö —Ä–∏–Ω–∫–∞—Ö (–¥–µ –≤—ñ–¥'—î–º–Ω–∏–π —Ü–∏–∫–ª –æ–∑–Ω–∞—á–∞—î –±–µ–∑–ø—Ä–æ–≥—Ä–∞—à–Ω—É –ø–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ—Å—Ç—å –æ–±–º—ñ–Ω—ñ–≤).
# 
# 
# 
#    - **–ú–µ—Ä–µ–∂—ñ:** –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü—ñ—è –≤ –º–µ—Ä–µ–∂–∞—Ö, –¥–µ –º–æ–∂—É—Ç—å –±—É—Ç–∏ "—à—Ç—Ä–∞—Ñ–∏" (–≤—ñ–¥'—î–º–Ω—ñ –≤–∞–≥–∏).

# %%


# =============================================================================
# –ö–ª—ñ—Ç–∏–Ω–∫–∞ 5: –ü—Ä–∞–∫—Ç–∏—á–Ω–∏–π –ø—Ä–∏–∫–ª–∞–¥ Bellman-Ford - –ü–æ—à—É–∫ –∞—Ä–±—ñ—Ç—Ä–∞–∂—É
# =============================================================================
currencies = ['USD', 'EUR', 'GBP', 'JPY']
rates = [
    ('USD', 'EUR', 0.92), ('EUR', 'USD', 1.08),
    ('USD', 'GBP', 0.79), ('GBP', 'USD', 1.26),
    ('EUR', 'GBP', 0.85), ('GBP', 'EUR', 1.17),
    ('JPY', 'USD', 0.0067), ('USD', 'JPY', 149.0),
    # —Å—Ç–≤–æ—Ä—é—î–º–æ –∞—Ä–±—ñ—Ç—Ä–∞–∂
    ('EUR', 'JPY', 163.0), ('JPY', 'GBP', 0.0055), ('GBP', 'EUR', 1.18)  # EUR‚ÜíJPY‚ÜíGBP‚ÜíEUR
]

arbitrage_graph = nx.DiGraph()
for u, v, rate in rates:
    arbitrage_graph.add_edge(u, v, weight=-np.log(rate))

cycle_nodes = find_negative_cycle_bf(arbitrage_graph, weight="weight")

if cycle_nodes:
    print("üìà –ó–Ω–∞–π–¥–µ–Ω–æ –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω–∏–π —Ü–∏–∫–ª:", " ‚Üí ".join(cycle_nodes))
    # (–æ–ø—Ü—ñ–π–Ω–æ) –ø–µ—Ä–µ–≤—ñ—Ä–∏–º–æ, —â–æ —Å—É–º–∞ –≤–∞–≥ < 0
    total_weight = sum(arbitrage_graph[u][v]["weight"] for u, v in zip(cycle_nodes, cycle_nodes[1:]))
    print(f"Œ£ weights = {total_weight:.6f}  (< 0 ‚áí profit)")
else:
    print("‚ùå –í—ñ–¥'—î–º–Ω–∏—Ö —Ü–∏–∫–ª—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")



# %%



# %% [markdown]
#    ## 1.2 –ê–ª–≥–æ—Ä–∏—Ç–º–∏ –æ–±—Ö–æ–¥—É –≥—Ä–∞—Ñ—ñ–≤
# 
# 
# 
# 
# 
# 
# 
#    –û–±—Ö—ñ–¥ –≥—Ä–∞—Ñ—É ‚Äî —Ü–µ –ø—Ä–æ—Ü–µ—Å —Å–∏—Å—Ç–µ–º–∞—Ç–∏—á–Ω–æ–≥–æ –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω–Ω—è –∫–æ–∂–Ω–æ—ó –≤–µ—Ä—à–∏–Ω–∏. –¶–µ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω–∞ –æ–ø–µ—Ä–∞—Ü—ñ—è, —â–æ –ª–µ–∂–∏—Ç—å –≤ –æ—Å–Ω–æ–≤—ñ –±–∞–≥–∞—Ç—å–æ—Ö —Å–∫–ª–∞–¥–Ω—ñ—à–∏—Ö –∞–ª–≥–æ—Ä–∏—Ç–º—ñ–≤.

# %% [markdown]
#    ### –ü–æ—à—É–∫ –≤ —à–∏—Ä–∏–Ω—É (BFS - Breadth-First Search)
# 
# 
# 
# 
# 
# 
# 
#    **–Ü–¥–µ—è:** BFS –¥–æ—Å–ª—ñ–¥–∂—É—î –≥—Ä–∞—Ñ "—Ä—ñ–≤–Ω—è–º–∏", –≥–∞—Ä–∞–Ω—Ç—É—é—á–∏ –∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –Ω–∞–π–∫–æ—Ä–æ—Ç—à–æ–≥–æ —à–ª—è—Ö—É –≤ —Ç–µ—Ä–º—ñ–Ω–∞—Ö –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ä–µ–±–µ—Ä.
# 
# 
# 
# 
# 
# 
# 
#    **–ü—Ä–∞–∫—Ç–∏—á–Ω–µ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è:**
# 
# 
# 
#    - **–°–æ—Ü—ñ–∞–ª—å–Ω—ñ –º–µ—Ä–µ–∂—ñ:** –ø–æ—à—É–∫ "–¥—Ä—É–∑—ñ–≤ –¥—Ä—É–∑—ñ–≤" (2-–π —Ä—ñ–≤–µ–Ω—å –∑–≤'—è–∑–∫—ñ–≤).
# 
# 
# 
#    - **–í–µ–±-–∫—Ä–∞—É–ª–µ—Ä–∏:** —ñ–Ω–¥–µ–∫—Å–∞—Ü—ñ—è —Å—Ç–æ—Ä—ñ–Ω–æ–∫, –ø–æ—á–∏–Ω–∞—é—á–∏ –∑ –≥–æ–ª–æ–≤–Ω–æ—ó.

# %%
# =============================================================================
# –ö–ª—ñ—Ç–∏–Ω–∫–∞ 6: –ü—Ä–∞–∫—Ç–∏—á–Ω–∏–π –ø—Ä–∏–∫–ª–∞–¥ BFS - –ê–Ω–∞–ª—ñ–∑ —Å–æ—Ü—ñ–∞–ª—å–Ω–æ—ó –º–µ—Ä–µ–∂—ñ
# =============================================================================
social_graph, names = GraphGenerator.create_social_network(seed=42)
start_user_id = 0
start_user_name = names[start_user_id]

bfs_traversal = BFS(social_graph)
result = bfs_traversal.traverse(start_node=start_user_id)

levels_df = pd.DataFrame(result['distances'].items(), columns=['User ID', 'Level']).sort_values(by='Level')
levels_df['Name'] = levels_df['User ID'].map(names)
print(f"–†—ñ–≤–Ω—ñ –∑–≤'—è–∑–∫—ñ–≤ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ '{start_user_name}':")
print(levels_df[['Level', 'User ID', 'Name']].to_string(index=False))

fig = TraversalVisualizer.draw_bfs_levels(
    social_graph,
    start_node=start_user_id,
    distances=result['distances'],
    labels=names,
    title=f"–†—ñ–≤–Ω—ñ –∑–≤'—è–∑–∫—ñ–≤ –¥–ª—è '{start_user_name}' (BFS)"
)
plt.savefig('./data/bfs_social_network.png', dpi=300, bbox_inches='tight')
plt.show()



# %% [markdown]
#    ### –ü–æ—à—É–∫ –≤ –≥–ª–∏–±–∏–Ω—É (DFS - Depth-First Search)
# 
# 
# 
# 
# 
# 
# 
#    **–Ü–¥–µ—è:** DFS –π–¥–µ "–≤–≥–ª–∏–±" –ø–æ –æ–¥–Ω—ñ–π –≥—ñ–ª—Ü—ñ –≥—Ä–∞—Ñ—É –¥–æ —É–ø–æ—Ä—É, –ø–µ—Ä—à –Ω—ñ–∂ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è —ñ –¥–æ—Å–ª—ñ–¥–∏—Ç–∏ —ñ–Ω—à—ñ —à–ª—è—Ö–∏.
# 
# 
# 
# 
# 
# 
# 
#    **–ü—Ä–∞–∫—Ç–∏—á–Ω–µ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è:**
# 
# 
# 
#    - **–í–∏—è–≤–ª–µ–Ω–Ω—è —Ü–∏–∫–ª—ñ–≤:** –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –ø—Ä–∏ –∑–±—ñ—Ä—Ü—ñ –ü–ó).
# 
# 
# 
#    - **–¢–æ–ø–æ–ª–æ–≥—ñ—á–Ω–µ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è:** –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫—É –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–¥–∞—á.
# 
# 
# 
#    - **–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ª–∞–±—ñ—Ä–∏–Ω—Ç—ñ–≤.**

# %%
# =============================================================================
# –ö–ª—ñ—Ç–∏–Ω–∫–∞ 7: –ü—Ä–∞–∫—Ç–∏—á–Ω–∏–π –ø—Ä–∏–∫–ª–∞–¥ DFS - –í–∏—è–≤–ª–µ–Ω–Ω—è —Ü–∏–∫–ª—ñ—á–Ω–∏—Ö –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
# =============================================================================
dep_graph, tasks = GraphGenerator.create_dependency_graph_with_cycle()

dfs_traversal = DFS(dep_graph)
cycle = dfs_traversal.find_cycle()

fig = TraversalVisualizer.draw_cycle(
    dep_graph,
    cycle=cycle or [],   # <-- –ª–∏—à–∞—î–º–æ ID
    labels=tasks,        # {node_id: "Label"}
    title="–í–∏—è–≤–ª–µ–Ω–Ω—è —Ü–∏–∫–ª—ñ—á–Ω–∏—Ö –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é DFS"
)

if cycle:
    print("üî• –í–∏—è–≤–ª–µ–Ω–æ —Ü–∏–∫–ª:", " ‚Üí ".join([tasks[n] for n in cycle]))

else:
    print("‚úÖ –¶–∏–∫–ª—ñ—á–Ω–∏—Ö –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π –Ω–µ –≤–∏—è–≤–ª–µ–Ω–æ.")
plt.savefig('./data/dependency_cycle.png', dpi=300, bbox_inches='tight')
plt.show()



# %% [markdown]
#    ## 1.3 –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–µ –æ—Å—Ç—ñ–≤–Ω–µ –¥–µ—Ä–µ–≤–æ (MST)
# 
# 
# 
# 
# 
# 
# 
#    **–ó–∞–¥–∞—á–∞:** –ó'—î–¥–Ω–∞—Ç–∏ –≤—Å—ñ –≤–µ—Ä—à–∏–Ω–∏ –≥—Ä–∞—Ñ—É —Ä–∞–∑–æ–º –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –ø—ñ–¥–º–Ω–æ–∂–∏–Ω–∏ —Ä–µ–±–µ—Ä, —â–æ –º–∞—î –º—ñ–Ω—ñ–º–∞–ª—å–Ω—É –º–æ–∂–ª–∏–≤—É –∑–∞–≥–∞–ª—å–Ω—É –≤–∞–≥—É —ñ –Ω–µ –º—ñ—Å—Ç–∏—Ç—å —Ü–∏–∫–ª—ñ–≤.
# 
# 
# 
# 
# 
# 
# 
#    **–î–æ–º–µ–Ω–∏ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è:**
# 
# 
# 
#    - **–ü—Ä–æ–µ–∫—Ç—É–≤–∞–Ω–Ω—è –º–µ—Ä–µ–∂:** –î–∏–∑–∞–π–Ω –º–µ—Ä–µ–∂ –∫–æ–º—É–Ω—ñ–∫–∞—Ü—ñ–π (—ñ–Ω—Ç–µ—Ä–Ω–µ—Ç, —Ç–µ–ª–µ—Ñ–æ–Ω), –µ–ª–µ–∫—Ç—Ä–æ–º–µ—Ä–µ–∂, —Ç—Ä—É–±–æ–ø—Ä–æ–≤–æ–¥—ñ–≤ –∑ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–º–∏ –≤–∏—Ç—Ä–∞—Ç–∞–º–∏.
# 
# 
# 
#    - **–ö–ª–∞—Å—Ç–µ—Ä–Ω–∏–π –∞–Ω–∞–ª—ñ–∑:** –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —è–∫ –∫—Ä–æ–∫ –≤ –¥–µ—è–∫–∏—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–∞—Ö –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü—ñ—ó.
# 
# 
# 
#    - **–ö–æ–º–ø'—é—Ç–µ—Ä–Ω–µ –±–∞—á–µ–Ω–Ω—è:** –°–µ–≥–º–µ–Ω—Ç–∞—Ü—ñ—è –∑–æ–±—Ä–∞–∂–µ–Ω—å.

# %% [markdown]
#    ### –ê–ª–≥–æ—Ä–∏—Ç–º –ö—Ä–∞—Å–∫–∞–ª–∞ (Kruskal) vs –ê–ª–≥–æ—Ä–∏—Ç–º –ü—Ä—ñ–º–∞ (Prim)
# 
# 
# 
# 
# 
# 
# 
#    | –ê–ª–≥–æ—Ä–∏—Ç–º | –Ü–¥–µ—è | –°–∫–ª–∞–¥–Ω—ñ—Å—Ç—å | –ù–∞–π–∫—Ä–∞—â–µ –¥–ª—è |
#    | :--- | :--- | :--- | :--- |
#    | **Kruskal**| "–õ—ñ—Å–æ–≤–∏–π" –ø—ñ–¥—Ö—ñ–¥: —Å–æ—Ä—Ç—É—î –≤—Å—ñ —Ä–µ–±—Ä–∞ —ñ –¥–æ–¥–∞—î –Ω–∞–π–ª–µ–≥—à—ñ, —â–æ –Ω–µ —Å—Ç–≤–æ—Ä—é—é—Ç—å —Ü–∏–∫–ª—ñ–≤. | `O(E log E)` | –†–æ–∑—Ä—ñ–¥–∂–µ–Ω—ñ –≥—Ä–∞—Ñ–∏. |
#    | **Prim** | "–î–µ—Ä–µ–≤–Ω–∏–π" –ø—ñ–¥—Ö—ñ–¥: –≤–∏—Ä–æ—â—É—î –æ–¥–Ω–µ –¥–µ—Ä–µ–≤–æ, –Ω–∞ –∫–æ–∂–Ω–æ–º—É –∫—Ä–æ—Ü—ñ –¥–æ–¥–∞—é—á–∏ –Ω–∞–π–ª–µ–≥—à–µ —Ä–µ–±—Ä–æ –¥–æ –Ω–æ–≤–æ—ó –≤–µ—Ä—à–∏–Ω–∏. | `O(E log V)` | –©—ñ–ª—å–Ω—ñ –≥—Ä–∞—Ñ–∏. |

# %%
# =============================================================================
# –ö–ª—ñ—Ç–∏–Ω–∫–∞ 8: –ü—Ä–∞–∫—Ç–∏—á–Ω–∏–π –ø—Ä–∏–∫–ª–∞–¥ MST - –ü—Ä–æ–µ–∫—Ç—É–≤–∞–Ω–Ω—è –º–µ—Ä–µ–∂—ñ
# =============================================================================
# –ì–µ–Ω–µ—Ä—É—î–º–æ –≥—Ä–∞—Ñ, —â–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—î –º—ñ—Å—Ç–∞ —Ç–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å –ø—Ä–æ–∫–ª–∞–¥–∞–Ω–Ω—è –∫–∞–±–µ–ª—é
network_graph, pos = GraphGenerator.create_city_road_network(n_intersections=15, connectivity=0.5, seed=50)

# –ó–Ω–∞—Ö–æ–¥–∏–º–æ MST –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –æ–±–æ—Ö –∞–ª–≥–æ—Ä–∏—Ç–º—ñ–≤
mst_kruskal = Kruskal.find_mst(network_graph)
mst_prim = Prim.find_mst(network_graph)

print("–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∞–ª–≥–æ—Ä–∏—Ç–º—ñ–≤ MST:")
mst_comparison_data = {
    'Algorithm': ['Kruskal', 'Prim'],
    'Total Weight': [mst_kruskal['total_weight'], mst_prim['total_weight']],
    'Num Edges': [len(mst_kruskal['edges']), len(mst_prim['edges'])]
}
print(pd.DataFrame(mst_comparison_data))

# –í—ñ–∑—É–∞–ª—ñ–∑—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
fig = MstVisualizer.draw_mst(
    network_graph,
    mst_kruskal['edges'],
    title=f"–û–ø—Ç–∏–º–∞–ª—å–Ω–∞ –º–µ—Ä–µ–∂–∞ (MST) - –ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å: {mst_kruskal['total_weight']:.2f}",
    pos=pos
)
plt.savefig('./data/mst_network_design.png', dpi=300, bbox_inches='tight')
plt.show()




# %% [markdown]
#    ## –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –†–æ–∑–¥—ñ–ª—É 1
# 
# 
# 
# 
# 
# 
# 
#    –ú–∏ —Ä–æ–∑–≥–ª—è–Ω—É–ª–∏ –∫–ª—é—á–æ–≤—ñ –∫–ª–∞—Å–∏—á–Ω—ñ –∞–ª–≥–æ—Ä–∏—Ç–º–∏ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –≥—Ä–∞—Ñ–∞–º–∏. –ö–æ–∂–µ–Ω –∑ –Ω–∏—Ö –º–∞—î —Å–≤–æ—é –Ω—ñ—à—É –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è, —ñ —Ä–æ–∑—É–º—ñ–Ω–Ω—è —ó—Ö–Ω—ñ—Ö —Å–∏–ª—å–Ω–∏—Ö —Ç–∞ —Å–ª–∞–±–∫–∏—Ö —Å—Ç–æ—Ä—ñ–Ω —î –∫—Ä–∏—Ç–∏—á–Ω–∏–º –¥–ª—è –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–∏—Ä—ñ—à–µ–Ω–Ω—è —Ä–µ–∞–ª—å–Ω–∏—Ö –∑–∞–¥–∞—á.
# 
# 
# 
# 
# 
# 
# 
#    **–ù–∞—Å—Ç—É–ø–Ω–∏–π —Ä–æ–∑–¥—ñ–ª** –±—É–¥–µ –ø—Ä–∏—Å–≤—è—á–µ–Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞–º –¥–∞–Ω–∏—Ö, —è–∫—ñ –ª–µ–∂–∞—Ç—å –≤ –æ—Å–Ω–æ–≤—ñ —Ü–∏—Ö —Ç–∞ –±–∞–≥–∞—Ç—å–æ—Ö —ñ–Ω—à–∏—Ö –∞–ª–≥–æ—Ä–∏—Ç–º—ñ–≤.

# %%



# %%




# %% [markdown]
#   ### –ê–ª–≥–æ—Ä–∏—Ç–º –§–ª–æ–π–¥–∞-–í–æ—Ä—à–µ–ª–ª–∞ (Floyd-Warshall)
# 
# 
# 
#   **–Ü–¥–µ—è:** –î–∏–Ω–∞–º—ñ—á–Ω–µ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è –¥–ª—è –∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –Ω–∞–π–∫–æ—Ä–æ—Ç—à–∏—Ö —à–ª—è—Ö—ñ–≤ –º—ñ–∂ **—É—Å—ñ–º–∞ –ø–∞—Ä–∞–º–∏** –≤–µ—Ä—à–∏–Ω. –ê–ª–≥–æ—Ä–∏—Ç–º —ñ—Ç–µ—Ä–∞—Ç–∏–≤–Ω–æ —Ä–æ–∑–≥–ª—è–¥–∞—î –∫–æ–∂–Ω—É –≤–µ—Ä—à–∏–Ω—É `k` —ñ –ø–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –Ω–µ —Å—Ç–∞–Ω–µ —à–ª—è—Ö –º—ñ–∂ –±—É–¥—å-—è–∫–∏–º–∏ –¥–≤–æ–º–∞ –≤–µ—Ä—à–∏–Ω–∞–º–∏ `i` —Ç–∞ `j` –∫–æ—Ä–æ—Ç—à–∏–º, —è–∫—â–æ –ø—Ä–æ–π—Ç–∏ —á–µ—Ä–µ–∑ `k`.
# 
# 
# 
#   | –°–∫–ª–∞–¥–Ω—ñ—Å—Ç—å | –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø–∞–º'—è—Ç—ñ | –û—Å–æ–±–ª–∏–≤–æ—Å—Ç—ñ |
#   | :--- | :--- | :--- |
#   | `O(V¬≥)` | `O(V¬≤)` | –ü—Ä–∞—Ü—é—î –∑ –≤—ñ–¥'—î–º–Ω–∏–º–∏ –≤–∞–≥–∞–º–∏ (–∞–ª–µ –Ω–µ —Ü–∏–∫–ª–∞–º–∏) |
# 
# 
# 
#   **–î–æ–º–µ–Ω–∏ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è:**
# 
#   - **–ê–Ω–∞–ª—ñ–∑ –º–µ—Ä–µ–∂:** –û–±—á–∏—Å–ª–µ–Ω–Ω—è "—Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ—Å—Ç—ñ" –≤—É–∑–ª—ñ–≤.
# 
#   - **–ë—ñ–æ—ñ–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞:** –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ—Å—Ç–µ–π –±—ñ–ª–∫—ñ–≤.
# 
#   - **–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç:** –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–∞—Ç—Ä–∏—Ü—å –≤—ñ–¥—Å—Ç–∞–Ω–µ–π –º—ñ–∂ —É—Å—ñ–º–∞ –º—ñ—Å—Ç–∞–º–∏ –≤ —Ä–µ–≥—ñ–æ–Ω—ñ.

# %%


# %%
# =============================================================================
# –ö–ª—ñ—Ç–∏–Ω–∫–∞ 9: –ü—Ä–∞–∫—Ç–∏—á–Ω–∏–π –ø—Ä–∏–∫–ª–∞–¥ Floyd-Warshall - –ú–∞—Ç—Ä–∏—Ü—è –≤—ñ–¥—Å—Ç–∞–Ω–µ–π
# =============================================================================
# –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–µ–≤–µ–ª–∏–∫–∏–π –≥—Ä–∞—Ñ, —â–æ —ñ–º—ñ—Ç—É—î –∫–ª—é—á–æ–≤—ñ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ñ –≤—É–∑–ª–∏
transit_graph = nx.Graph()
nodes = ["–í–æ–∫–∑–∞–ª", "–ê–µ—Ä–æ–ø–æ—Ä—Ç", "–¶–µ–Ω—Ç—Ä", "–¢–†–¶", "–ü–∞—Ä–∫"]
edges_with_weights = [
    ("–í–æ–∫–∑–∞–ª", "–¶–µ–Ω—Ç—Ä", 5), ("–í–æ–∫–∑–∞–ª", "–¢–†–¶", 10),
    ("–ê–µ—Ä–æ–ø–æ—Ä—Ç", "–í–æ–∫–∑–∞–ª", 15),
    ("–¶–µ–Ω—Ç—Ä", "–ü–∞—Ä–∫", 6), ("–¶–µ–Ω—Ç—Ä", "–¢–†–¶", 4),
    ("–¢–†–¶", "–ü–∞—Ä–∫", 2)
]
transit_graph.add_weighted_edges_from(edges_with_weights)

# –û–±—á–∏—Å–ª—é—î–º–æ –º–∞—Ç—Ä–∏—Ü—é –≤—ñ–¥—Å—Ç–∞–Ω–µ–π
fw_result = FloydWarshall.find_all_paths(transit_graph)
distance_matrix = fw_result['distances_df']

print("–ú–∞—Ç—Ä–∏—Ü—è –Ω–∞–π–∫–æ—Ä–æ—Ç—à–∏—Ö –≤—ñ–¥—Å—Ç–∞–Ω–µ–π –º—ñ–∂ —É—Å—ñ–º–∞ –ø—É–Ω–∫—Ç–∞–º–∏:")
print(distance_matrix)

# –ó–Ω–∞—Ö–æ–¥–∏–º–æ "–Ω–∞–π—Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ñ—à–∏–π" –≤—É–∑–æ–ª (–∑ –Ω–∞–π–º–µ–Ω—à–æ—é –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—é –≤—ñ–¥—Å—Ç–∞–Ω–Ω—é –¥–æ —ñ–Ω—à–∏—Ö)
centrality = distance_matrix.max(axis=1)
most_central_node = centrality.idxmin()
print(f"\n–ù–∞–π–±—ñ–ª—å—à —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–∏–π –≤—É–∑–æ–ª (–æ–ø—Ç–∏–º–∞–ª—å–Ω–∏–π –¥–ª—è —Ö–∞–±—É): '{most_central_node}' (max dist: {centrality.min()})")

# –í—ñ–∑—É–∞–ª—ñ–∑—É—î–º–æ –º–∞—Ç—Ä–∏—Ü—é
fig = AnalysisVisualizer.plot_distance_matrix(
    distance_matrix,
    "–¢–µ–ø–ª–æ–≤–∞ –∫–∞—Ä—Ç–∞ –≤—ñ–¥—Å—Ç–∞–Ω–µ–π (Floyd-Warshall)"
)
plt.savefig('./data/floyd_warshall_heatmap.png', dpi=300, bbox_inches='tight')
plt.show()


# %% [markdown]
#   ### –î–≤–æ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –ø–æ—à—É–∫ (Bidirectional Search)
# 
# 
# 
#   **–Ü–¥–µ—è:** –ó–∞–º—ñ—Å—Ç—å –æ–¥–Ω–æ–≥–æ –ø–æ—à—É–∫—É –≤—ñ–¥ —Å—Ç–∞—Ä—Ç—É –¥–æ —Ñ—ñ–Ω—ñ—à—É, –∑–∞–ø—É—Å–∫–∞—é—Ç—å—Å—è –¥–≤–∞ –æ–¥–Ω–æ—á–∞—Å–Ω–æ: –æ–¥–∏–Ω –≤—ñ–¥ —Å—Ç–∞—Ä—Ç—É (–≤–ø–µ—Ä–µ–¥), —ñ–Ω—à–∏–π –≤—ñ–¥ —Ñ—ñ–Ω—ñ—à—É (–Ω–∞–∑–∞–¥). –ê–ª–≥–æ—Ä–∏—Ç–º –∑–∞–≤–µ—Ä—à—É—î—Ç—å—Å—è, –∫–æ–ª–∏ –¥–≤–∞ —Ñ—Ä–æ–Ω—Ç–∏ –ø–æ—à—É–∫—É –∑—É—Å—Ç—Ä—ñ—á–∞—é—Ç—å—Å—è.
# 
# 
# 
#   **–ü–µ—Ä–µ–≤–∞–≥–∞:** –ó–Ω–∞—á–Ω–æ –∑–º–µ–Ω—à—É—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤—É–∑–ª—ñ–≤ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏. –Ø–∫—â–æ –∑–≤–∏—á–∞–π–Ω–∏–π BFS –ø–µ—Ä–µ–≤—ñ—Ä—è—î `O(b^d)` –≤—É–∑–ª—ñ–≤ (–¥–µ `b` - —Ñ–∞–∫—Ç–æ—Ä —Ä–æ–∑–≥–∞–ª—É–∂–µ–Ω–Ω—è, `d` - –≥–ª–∏–±–∏–Ω–∞), —Ç–æ –¥–≤–æ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π ‚Äî –ª–∏—à–µ `O(2 * b^(d/2))`.
# 
# 
# 
#   **–î–æ–º–µ–Ω–∏ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è:**
# 
#   - **–°–æ—Ü—ñ–∞–ª—å–Ω—ñ –º–µ—Ä–µ–∂—ñ:** –®–≤–∏–¥–∫–∏–π –ø–æ—à—É–∫ —à–ª—è—Ö—É –º—ñ–∂ –¥–≤–æ–º–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏ —É –≤–µ–ª–∏—á–µ–∑–Ω—ñ–π –º–µ—Ä–µ–∂—ñ.
# 
#   - **GPS:** –ü—Ä–∏—Å–∫–æ—Ä–µ–Ω–Ω—è –ø–æ—à—É–∫—É –º–∞—Ä—à—Ä—É—Ç—É –Ω–∞ –≤–µ–ª–∏–∫–∏—Ö –∫–∞—Ä—Ç–∞—Ö.

# %%
# =============================================================================
# –ö–ª—ñ—Ç–∏–Ω–∫–∞ 10: –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è BFS —Ç–∞ Bidirectional Search
# =============================================================================
# –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –≤–µ–ª–∏–∫–∏–π —Å—ñ—Ç–∫–æ–≤–∏–π –≥—Ä–∞—Ñ, –¥–µ –ø–µ—Ä–µ–≤–∞–≥–∞ –±—É–¥–µ –æ—á–µ–≤–∏–¥–Ω–æ—é
grid_graph, pos = GraphGenerator.create_city_road_network(n_intersections=400, connectivity=0.05, seed=1)
start_grid, end_grid = 0, 399

# –ó–∞–ø—É—Å–∫–∞—î–º–æ –∑–≤–∏—á–∞–π–Ω–∏–π BFS (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–∞—à –∫–ª–∞—Å –∑ traversal.py)
# –î–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è, –Ω–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–∞ –≤–µ—Ä—Å—ñ—è BFS, —â–æ —à—É–∫–∞—î —à–ª—è—Ö
def find_path_bfs(graph, start, end):
    res = BFS(graph).traverse(start)
    path = []
    curr = end
    while curr is not None:
        path.append(curr)
        curr = res['parent'].get(curr)
    return {'path': list(reversed(path)), 'visited_nodes': set(res['order'])}

result_bfs = find_path_bfs(grid_graph, start_grid, end_grid)
result_bidir = BidirectionalSearch.find_path(grid_graph, start_grid, end_grid)

# –î–æ–¥–∞—î–º–æ –∫–ª—é—á—ñ –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ –∑ –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ç–æ—Ä–æ–º
result_bfs['algorithm'] = 'BFS'
result_bidir['algorithm'] = 'Bidirectional'

# –í—ñ–∑—É–∞–ª—ñ–∑—É—î–º–æ –≤—ñ–¥–≤—ñ–¥–∞–Ω—ñ –≤—É–∑–ª–∏
fig = PathVisualizer.draw_visited_nodes_comparison(
    grid_graph, pos,
    results=[result_bfs, result_bidir],
    title="–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –¥–æ—Å–ª—ñ–¥–∂–µ–Ω–∏—Ö –∑–æ–Ω: BFS vs Bidirectional Search"
)
plt.savefig('./data/bfs_vs_bidirectional.png', dpi=300, bbox_inches='tight')
plt.show()

# –¢–∞–±–ª–∏—Ü—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
print("–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ BFS —Ç–∞ Bidirectional Search:")
visited_bfs = len(result_bfs['visited_nodes'])
visited_bidir = len(result_bidir['visited_nodes'])
speedup = visited_bfs / visited_bidir if visited_bidir > 0 else float('inf')

summary_df = pd.DataFrame({
    'Algorithm': ['BFS', 'Bidirectional'],
    'Visited Nodes': [visited_bfs, visited_bidir],
    'Path Length': [len(result_bfs['path']), len(result_bidir['path'])]
})
print(summary_df)
print(f"\n–ü—Ä–∏—Å–∫–æ—Ä–µ–Ω–Ω—è –∑–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—é –≤—ñ–¥–≤—ñ–¥–∞–Ω–∏—Ö –≤—É–∑–ª—ñ–≤: {speedup:.2f}x")


# %% [markdown]
#   ### –ü—Ä–æ—Å—É–Ω—É—Ç—ñ –∞–ª–≥–æ—Ä–∏—Ç–º–∏ (–ö–æ–Ω—Ü–µ–ø—Ç—É–∞–ª—å–Ω–∏–π –æ–≥–ª—è–¥)
# 
# 
# 
#   **Contraction Hierarchies (CH)** —Ç–∞ **ALT** ‚Äî —Ü–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∏, —â–æ –≤–∏–º–∞–≥–∞—é—Ç—å –∑–Ω–∞—á–Ω–æ–≥–æ –µ—Ç–∞–ø—É **–ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ—ó –æ–±—Ä–æ–±–∫–∏ (–ø—Ä–µ–ø—Ä–æ—Ü–µ—Å–∏–Ω–≥—É)** –≥—Ä–∞—Ñ—É.
# 
# 
# 
#   - **–Ü–¥–µ—è CH:** "–°—Ç–∏—Å–Ω—É—Ç–∏" –≥—Ä–∞—Ñ, —Å—Ç–≤–æ—Ä—é—é—á–∏ —è—Ä–ª–∏–∫–∏ (shortcuts) —á–µ—Ä–µ–∑ –º–µ–Ω—à –≤–∞–∂–ª–∏–≤—ñ –≤—É–∑–ª–∏. –ù–∞–ø—Ä–∏–∫–ª–∞–¥, –Ω–∞ –º–∞–≥—ñ—Å—Ç—Ä–∞–ª—ñ –ö–∏—ó–≤-–û–¥–µ—Å–∞ –≤—Å—ñ –ø—Ä–æ–º—ñ–∂–Ω—ñ —Å–µ–ª–∞ "—Å—Ç–∏—Å–∫–∞—é—Ç—å—Å—è" –≤ –æ–¥–∏–Ω —à–≤–∏–¥–∫–∏–π —à–ª—è—Ö.
# 
#   - **–Ü–¥–µ—è ALT:** –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î "–æ—Ä—ñ—î–Ω—Ç–∏—Ä–∏" (landmarks) —Ç–∞ –Ω–µ—Ä—ñ–≤–Ω—ñ—Å—Ç—å —Ç—Ä–∏–∫—É—Ç–Ω–∏–∫–∞ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥—É–∂–µ —Ç–æ—á–Ω–æ—ó –µ–≤—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è A*.
# 
# 
# 
#   –¶—ñ –º–µ—Ç–æ–¥–∏ –¥–æ–∑–≤–æ–ª—è—é—Ç—å –∑–Ω–∞—Ö–æ–¥–∏—Ç–∏ —à–ª—è—Ö–∏ –Ω–∞ –∫–æ–Ω—Ç–∏–Ω–µ–Ω—Ç–∞–ª—å–Ω–∏—Ö –≥—Ä–∞—Ñ–∞—Ö –∑–∞ –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥–∏, —â–æ —î –æ—Å–Ω–æ–≤–æ—é —Å—É—á–∞—Å–Ω–∏—Ö –Ω–∞–≤—ñ–≥–∞—Ü—ñ–π–Ω–∏—Ö —Å–∏—Å—Ç–µ–º. –á—Ö —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–∫–ª–∞–¥–Ω–∞, –∞–ª–µ —Ä–æ–∑—É–º—ñ–Ω–Ω—è –ø—Ä–∏–Ω—Ü–∏–ø—É —î –∫–ª—é—á–æ–≤–∏–º.

# %% [markdown]
#   ## –†–æ–∑–¥—ñ–ª 3: –°—Ç—Ä—É–∫—Ç—É—Ä–∏ –¥–∞–Ω–∏—Ö
# 
#   ### 3.1 –ì—Ä–∞—Ñ–æ–≤—ñ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏
# 
# 
# 
#   –°–ø–æ—Å—ñ–±, —É —è–∫–∏–π –º–∏ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –≥—Ä–∞—Ñ —É –ø–∞–º'—è—Ç—ñ, –Ω–∞–ø—Ä—è–º—É –≤–ø–ª–∏–≤–∞—î –Ω–∞ –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º—ñ–≤. –í–∏–±—ñ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ—ó —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ ‚Äî —Ü–µ –ø–µ—Ä—à–∏–π –∫—Ä–æ–∫ –¥–æ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó.

# %% [markdown]
#   | –°—Ç—Ä—É–∫—Ç—É—Ä–∞ | –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–µ–±—Ä–∞ | –Ü—Ç–µ—Ä–∞—Ü—ñ—è —Å—É—Å—ñ–¥—ñ–≤ | –ü–∞–º'—è—Ç—å | –ù–∞–π–∫—Ä–∞—â–µ –¥–ª—è |
#   | :--- | :--- | :--- | :--- | :--- |
#   | **–ú–∞—Ç—Ä–∏—Ü—è —Å—É–º—ñ–∂–Ω–æ—Å—Ç—ñ** | `O(1)` | `O(V)` | `O(V¬≤)` | **–©—ñ–ª—å–Ω—ñ –≥—Ä–∞—Ñ–∏** |
#   | **–°–ø–∏—Å–æ–∫ —Å—É–º—ñ–∂–Ω–æ—Å—Ç—ñ** | `O(deg(v))` | `O(deg(v))` | `O(V+E)`| **–†–æ–∑—Ä—ñ–¥–∂–µ–Ω—ñ –≥—Ä–∞—Ñ–∏** |

# %%
!pip install jinja2

# %%
# =============================================================================
# –ö–ª—ñ—Ç–∏–Ω–∫–∞ 11: –ë–µ–Ω—á–º–∞—Ä–∫ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—å –≥—Ä–∞—Ñ—É (–ø–æ–∫—Ä–∞—â–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü—è)
# =============================================================================


def benchmark_representations(n_nodes, density):
    g = nx.fast_gnp_random_graph(n_nodes, density, seed=42)
    
    # 1. –ú–∞—Ç—Ä–∏—Ü—è —Å—É–º—ñ–∂–Ω–æ—Å—Ç—ñ
    adj_matrix = nx.to_numpy_array(g)
    mem_matrix = adj_matrix.nbytes / 1024  # KB

    # 2. –°–ø–∏—Å–æ–∫ —Å—É–º—ñ–∂–Ω–æ—Å—Ç—ñ (–ø—Ä–∏–±–ª–∏–∑–Ω–∞ –æ—Ü—ñ–Ω–∫–∞)
    mem_list = (g.number_of_nodes() * 8 + g.number_of_edges() * 2 * 16) / 1024

    # 3. –û–ø–µ—Ä–∞—Ü—ñ—ó
    nodes_to_check = np.random.randint(0, n_nodes, size=(1000, 2))
    
    start = time.perf_counter()
    for u, v in nodes_to_check:
        _ = adj_matrix[u, v] > 0
    time_matrix_check = (time.perf_counter() - start) * 1e6  # Œºs

    start = time.perf_counter()
    for u, v in nodes_to_check:
        _ = g.has_edge(u, v)
    time_list_check = (time.perf_counter() - start) * 1e6  # Œºs
    
    return {
        'Graph Density': f"{density:.0%}",
        'Adjacency Matrix\nMemory (KB)': mem_matrix,
        'Adjacency List\nMemory (KB)': mem_list,
        'Edge Check\n(Matrix, Œºs)': time_matrix_check,
        'Edge Check\n(List, Œºs)': time_list_check
    }


# –¢–µ—Å—Ç—É—î–º–æ –Ω–∞ —Ä–æ–∑—Ä—ñ–¥–∂–µ–Ω–æ–º—É —Ç–∞ —â—ñ–ª—å–Ω–æ–º—É –≥—Ä–∞—Ñ–∞—Ö
n = 500
sparse_results = benchmark_representations(n, 0.01)  # 1%
dense_results  = benchmark_representations(n, 0.50)  # 50%

benchmark_df = pd.DataFrame([sparse_results, dense_results]).round(2)


def highlight_min(s):
    """–ü—ñ–¥—Å–≤—ñ—á—É—î –º—ñ–Ω—ñ–º–∞–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è —É —Å—Ç–æ–≤–ø—Ü—ñ."""
    is_min = s == s.min()
    return ['background-color: #d4edda; font-weight: 600;' if v else '' for v in is_min]

styled_df = (
    benchmark_df.style
    .set_caption(f"üìä Benchmark: Adjacency Matrix vs List (N={n})")
    .set_table_styles([
        {'selector': 'caption', 'props': [('caption-side', 'top'), ('font-size', '16px'), ('font-weight', 'bold'), ('text-align', 'left')]},
        {'selector': 'th', 'props': [('background-color', "#2b5f93"), ('font-size', '13px'), ('text-align', 'center')]},
        {'selector': 'td', 'props': [('font-size', '13px'), ('text-align', 'center')]}
    ])
    .apply(highlight_min, subset=['Adjacency Matrix\nMemory (KB)', 'Adjacency List\nMemory (KB)'])
    .apply(highlight_min, subset=['Edge Check\n(Matrix, Œºs)', 'Edge Check\n(List, Œºs)'])
    .format({
        'Adjacency Matrix\nMemory (KB)': '{:,.1f}',
        'Adjacency List\nMemory (KB)': '{:,.1f}',
        'Edge Check\n(Matrix, Œºs)': '{:,.2f}',
        'Edge Check\n(List, Œºs)': '{:,.2f}',
    })
)

styled_df


# %% [markdown]
#   #### –í–∏—Å–Ω–æ–≤–∫–∏
# 
#   - **–ü–∞–º'—è—Ç—å:** –î–ª—è **—Ä–æ–∑—Ä—ñ–¥–∂–µ–Ω–∏—Ö** –≥—Ä–∞—Ñ—ñ–≤ (—Ç–∏–ø–æ–≤–∏—Ö –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–≤—ñ—Ç—É, —è–∫-–æ—Ç –¥–æ—Ä–æ–∂–Ω—ñ –º–µ—Ä–µ–∂—ñ) —Å–ø–∏—Å–æ–∫ —Å—É–º—ñ–∂–Ω–æ—Å—Ç—ñ —î –∑–Ω–∞—á–Ω–æ –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—à–∏–º. –î–ª—è **—â—ñ–ª—å–Ω–∏—Ö** –≥—Ä–∞—Ñ—ñ–≤ —Ä—ñ–∑–Ω–∏—Ü—è –≤ –ø–∞–º'—è—Ç—ñ –º–µ–Ω—à–∞.
# 
#   - **–®–≤–∏–¥–∫—ñ—Å—Ç—å:** –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —Ä–µ–±—Ä–∞ –≤ –º–∞—Ç—Ä–∏—Ü—ñ **–∑–∞–≤–∂–¥–∏** —à–≤–∏–¥—à–∞ (`O(1)`), —â–æ —Ä–æ–±–∏—Ç—å —ó—ó —ñ–¥–µ–∞–ª—å–Ω–æ—é –¥–ª—è –∞–ª–≥–æ—Ä–∏—Ç–º—ñ–≤, –¥–µ —Ü—è –æ–ø–µ—Ä–∞—Ü—ñ—è —î –¥–æ–º—ñ–Ω—É—é—á–æ—é.
# 
# 
# 
#   **–ì–æ–ª–æ–≤–Ω–µ –ø—Ä–∞–≤–∏–ª–æ:** –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ **—Å–ø–∏—Å–æ–∫ —Å—É–º—ñ–∂–Ω–æ—Å—Ç—ñ** –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º, —è–∫—â–æ –Ω–µ –≤–ø–µ–≤–Ω–µ–Ω—ñ. –¶–µ –∑–æ–ª–æ—Ç–∞ —Å–µ—Ä–µ–¥–∏–Ω–∞ –¥–ª—è –±—ñ–ª—å—à–æ—Å—Ç—ñ –∑–∞–¥–∞—á.


#%%

#%%


# %% [markdown]
#  ## 3.2 –î–µ—Ä–µ–≤–æ–ø–æ–¥—ñ–±–Ω—ñ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏
#
#  –î–µ—Ä–µ–≤–∞ —î –æ–¥–Ω–∏–º–∏ –∑ –Ω–∞–π–≤–∞–∂–ª–∏–≤—ñ—à–∏—Ö –Ω–µ–ª—ñ–Ω—ñ–π–Ω–∏—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä –¥–∞–Ω–∏—Ö. –í–æ–Ω–∏ —ñ—î—Ä–∞—Ä—Ö—ñ—á–Ω–æ –æ—Ä–≥–∞–Ω—ñ–∑–æ–≤—É—é—Ç—å –¥–∞–Ω—ñ, —â–æ –¥–æ–∑–≤–æ–ª—è—î —Ä–µ–∞–ª—ñ–∑–æ–≤—É–≤–∞—Ç–∏ –Ω–∞–¥–∑–≤–∏—á–∞–π–Ω–æ –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ –∞–ª–≥–æ—Ä–∏—Ç–º–∏ –ø–æ—à—É–∫—É, –≤—Å—Ç–∞–≤–∫–∏ —Ç–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è.

# %% [markdown]
#  ### –ë—ñ–Ω–∞—Ä–Ω–µ –¥–µ—Ä–µ–≤–æ –ø–æ—à—É–∫—É (Binary Search Tree - BST)
#
#  **–Ü–¥–µ—è:** –§—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω–∞ –¥–µ—Ä–µ–≤–æ–ø–æ–¥—ñ–±–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞, –¥–µ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –≤—É–∑–ª–∞ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è —ñ–Ω–≤–∞—Ä—ñ–∞–Ω—Ç: –≤—Å—ñ –∫–ª—é—á—ñ –≤ –ª—ñ–≤–æ–º—É –ø—ñ–¥–¥–µ—Ä–µ–≤—ñ –º–µ–Ω—à—ñ –∑–∞ –∫–ª—é—á –≤—É–∑–ª–∞, –∞ –≤—Å—ñ –∫–ª—é—á—ñ –≤ –ø—Ä–∞–≤–æ–º—É ‚Äî –±—ñ–ª—å—à—ñ.
#
#  **–ü—Ä–æ–±–ª–µ–º–∞:** –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å BST —Å–∏–ª—å–Ω–æ –∑–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ –ø–æ—Ä—è–¥–∫—É –≤—Å—Ç–∞–≤–∫–∏ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤. –£ –Ω–∞–π–≥—ñ—Ä—à–æ–º—É –≤–∏–ø–∞–¥–∫—É (–ø—Ä–∏ –≤—Å—Ç–∞–≤—Ü—ñ –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö) –¥–µ—Ä–µ–≤–æ "–≤–∏—Ä–æ–¥–∂—É—î—Ç—å—Å—è" —É –∑–≤'—è–∑–Ω–∏–π —Å–ø–∏—Å–æ–∫, —ñ –≤—Å—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó –∑–∞–π–º–∞—é—Ç—å `O(n)` —á–∞—Å—É –∑–∞–º—ñ—Å—Ç—å –æ—á—ñ–∫—É–≤–∞–Ω–æ–≥–æ `O(log n)`.

# %%
# =============================================================================
# –ö–ª—ñ—Ç–∏–Ω–∫–∞ 12: –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –¥–µ–≥—Ä–∞–¥–∞—Ü—ñ—ó BST
# =============================================================================
from src.data_structures.trees import BinarySearchTree
from src.utils.visualizer import TreeVisualizer
import random

# –î–∞–Ω—ñ
data_random = random.sample(range(1, 100), 15)
data_sorted = sorted(data_random)

# –î–µ—Ä–µ–≤–æ –Ω–∞ –≤–∏–ø–∞–¥–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö
bst_random = BinarySearchTree()
for item in data_random:
    bst_random.insert(item)

# –î–µ—Ä–µ–≤–æ –Ω–∞ –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö
bst_sorted = BinarySearchTree()
for item in data_sorted:
    bst_sorted.insert(item)

# –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –≤–∏—Å–æ—Ç–∏
height_random = bst_random.get_height()
height_sorted = bst_sorted.get_height()
optimal_height = int(np.log2(len(data_random))) + 1

comparison_data = {
    '–¢–∏–ø –¥–∞–Ω–∏—Ö': ['–í–∏–ø–∞–¥–∫–æ–≤—ñ', '–í—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω—ñ'],
    '–í–∏—Å–æ—Ç–∞ –¥–µ—Ä–µ–≤–∞': [height_random, height_sorted],
    '–û–ø—Ç–∏–º–∞–ª—å–Ω–∞ –≤–∏—Å–æ—Ç–∞ (log n)': [optimal_height, optimal_height],
    '–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å': ['O(log n)', 'O(n) - –î–µ–≥—Ä–∞–¥–∞—Ü—ñ—è!']
}
bst_df = pd.DataFrame(comparison_data)
print("–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è BST –Ω–∞ —Ä—ñ–∑–Ω–∏—Ö –¥–∞–Ω–∏—Ö:")
print(bst_df)

# –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è
fig_rand = TreeVisualizer.draw_tree(bst_random.root, "BST –Ω–∞ –≤–∏–ø–∞–¥–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö (–∑–±–∞–ª–∞–Ω—Å–æ–≤–∞–Ω–µ)")
plt.show()

fig_sort = TreeVisualizer.draw_tree(bst_sorted.root, "BST –Ω–∞ –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö (–¥–µ–≥—Ä–∞–¥–æ–≤–∞–Ω–µ)")
plt.savefig('./data/bst_degradation.png', dpi=300, bbox_inches='tight')
plt.show()

# %% [markdown]
#  ### AVL-–¥–µ—Ä–µ–≤–æ
#
#  **–†—ñ—à–µ–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º–∏ BST:** AVL-–¥–µ—Ä–µ–≤–æ ‚Äî —Ü–µ **—Å–∞–º–æ–∑–±–∞–ª–∞–Ω—Å–æ–≤–∞–Ω–µ** –±—ñ–Ω–∞—Ä–Ω–µ –¥–µ—Ä–µ–≤–æ –ø–æ—à—É–∫—É. –í–æ–Ω–æ –ø—ñ–¥—Ç—Ä–∏–º—É—î —ñ–Ω–≤–∞—Ä—ñ–∞–Ω—Ç, —â–æ –¥–ª—è –±—É–¥—å-—è–∫–æ–≥–æ –≤—É–∑–ª–∞ –≤–∏—Å–æ—Ç–∏ –π–æ–≥–æ –ª—ñ–≤–æ–≥–æ —Ç–∞ –ø—Ä–∞–≤–æ–≥–æ –ø—ñ–¥–¥–µ—Ä–µ–≤ –≤—ñ–¥—Ä—ñ–∑–Ω—è—é—Ç—å—Å—è –Ω–µ –±—ñ–ª—å—à–µ –Ω—ñ–∂ –Ω–∞ –æ–¥–∏–Ω–∏—Ü—é. –¶–µ –¥–æ—Å—è–≥–∞—î—Ç—å—Å—è –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é "–ø–æ–≤–æ—Ä–æ—Ç—ñ–≤" (rotations) –ø—ñ—Å–ª—è –æ–ø–µ—Ä–∞—Ü—ñ–π –≤—Å—Ç–∞–≤–∫–∏ –∞–±–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è.
#
#  **–†–µ–∑—É–ª—å—Ç–∞—Ç:** –£—Å—ñ –æ—Å–Ω–æ–≤–Ω—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó (–ø–æ—à—É–∫, –≤—Å—Ç–∞–≤–∫–∞, –≤–∏–¥–∞–ª–µ–Ω–Ω—è) **–≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ** –≤–∏–∫–æ–Ω—É—é—Ç—å—Å—è –∑–∞ `O(log n)`.

# %%
# =============================================================================
# –ö–ª—ñ—Ç–∏–Ω–∫–∞ 13: AVL-–¥–µ—Ä–µ–≤–æ —è–∫ –≤–∏—Ä—ñ—à–µ–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º–∏ –¥–µ–≥—Ä–∞–¥–∞—Ü—ñ—ó
# =============================================================================
from src.data_structures.trees import AVLTree

# –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç—ñ —Å–∞–º—ñ –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ, —â–æ —Å–ø—Ä–∏—á–∏–Ω–∏–ª–∏ –¥–µ–≥—Ä–∞–¥–∞—Ü—ñ—é BST
avl_tree = AVLTree()
for item in data_sorted:
    avl_tree.insert(item)

height_avl = avl_tree.get_height()

print(f"–í–∏—Å–æ—Ç–∞ AVL-–¥–µ—Ä–µ–≤–∞ –Ω–∞ –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö: {height_avl}")
print(f"–í–∏—Å–æ—Ç–∞ –¥–µ–≥—Ä–∞–¥–æ–≤–∞–Ω–æ–≥–æ BST –Ω–∞ —Ç–∏—Ö –∂–µ –¥–∞–Ω–∏—Ö: {height_sorted}")
print(f"–û–ø—Ç–∏–º–∞–ª—å–Ω–∞ –≤–∏—Å–æ—Ç–∞: {optimal_height}")
print("\n‚úÖ AVL-–¥–µ—Ä–µ–≤–æ —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–≥–ª–æ –±–∞–ª–∞–Ω—Å —ñ –ª–æ–≥–∞—Ä–∏—Ñ–º—ñ—á–Ω—É –≤–∏—Å–æ—Ç—É!")

# –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è –∑–±–∞–ª–∞–Ω—Å–æ–≤–∞–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞
fig_avl = TreeVisualizer.draw_tree(avl_tree.root, "AVL-–¥–µ—Ä–µ–≤–æ –Ω–∞ –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö (–∑–±–∞–ª–∞–Ω—Å–æ–≤–∞–Ω–µ)")
plt.savefig('./data/avl_tree_balanced.png', dpi=300, bbox_inches='tight')
plt.show()

# %% [markdown]
#  ### –î–µ—Ä–µ–≤–æ –≤—ñ–¥—Ä—ñ–∑–∫—ñ–≤ (Segment Tree)
#
#  **–Ü–¥–µ—è:** –°–ø–µ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–∏—Ö –¥–ª—è –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è **–∑–∞–ø–∏—Ç—ñ–≤ –Ω–∞ –¥—ñ–∞–ø–∞–∑–æ–Ω–∞—Ö (range queries)**. –ö–æ–∂–µ–Ω –≤—É–∑–æ–ª —É –¥–µ—Ä–µ–≤—ñ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—î –ø–µ–≤–Ω–∏–π –≤—ñ–¥—Ä—ñ–∑–æ–∫ –≤—Ö—ñ–¥–Ω–æ–≥–æ –º–∞—Å–∏–≤—É —Ç–∞ –∑–±–µ—Ä—ñ–≥–∞—î –∞–≥—Ä–µ–≥–æ–≤–∞–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, —Å—É–º—É, –º—ñ–Ω—ñ–º—É–º, –º–∞–∫—Å–∏–º—É–º) –¥–ª—è —Ü—å–æ–≥–æ –≤—ñ–¥—Ä—ñ–∑–∫–∞.
#
#  | –û–ø–µ—Ä–∞—Ü—ñ—è | –°–∫–ª–∞–¥–Ω—ñ—Å—Ç—å |
#  | :--- | :--- |
#  | –ü–æ–±—É–¥–æ–≤–∞ | `O(n)` |
#  | –ó–∞–ø–∏—Ç –Ω–∞ –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ | `O(log n)` |
#  | –û–Ω–æ–≤–ª–µ–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç–∞ | `O(log n)` |
#
#  **–î–æ–º–µ–Ω–∏ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è:**
#  - **–§—ñ–Ω–∞–Ω—Å–æ–≤–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞:** –®–≤–∏–¥–∫–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Å—É–º–∞—Ä–Ω–æ–≥–æ –¥–æ—Ö–æ–¥—É –∑–∞ –±—É–¥—å-—è–∫–∏–π –ø–µ—Ä—ñ–æ–¥.
#  - **–ö–æ–º–ø'—é—Ç–µ—Ä–Ω–∞ –≥—Ä–∞—Ñ—ñ–∫–∞:** –ü–æ—à—É–∫ –æ–±'—î–∫—Ç—ñ–≤ —É –ø–µ–≤–Ω—ñ–π –æ–±–ª–∞—Å—Ç—ñ.
#  - **–ë—ñ–æ—ñ–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞:** –ê–Ω–∞–ª—ñ–∑ –≥–µ–Ω–æ–º–Ω–∏—Ö –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ—Å—Ç–µ–π.

# %%
# =============================================================================
# –ö–ª—ñ—Ç–∏–Ω–∫–∞ 14: –ü—Ä–∞–∫—Ç–∏—á–Ω–∏–π –ø—Ä–∏–∫–ª–∞–¥ Segment Tree - –ê–Ω–∞–ª—ñ–∑ –ø—Ä–æ–¥–∞–∂—ñ–≤
# =============================================================================
from src.data_structures.trees import SegmentTree
import time

# –ì–µ–Ω–µ—Ä—É—î–º–æ –¥–∞–Ω—ñ –ø—Ä–æ –ø—Ä–æ–¥–∞–∂—ñ –∑–∞ 30 –¥–Ω—ñ–≤
np.random.seed(42)
sales_data = np.random.randint(50, 200, size=30)

# –ë—É–¥—É—î–º–æ –¥–µ—Ä–µ–≤–æ –≤—ñ–¥—Ä—ñ–∑–∫—ñ–≤
seg_tree = SegmentTree(sales_data)

# --- –ü—Ä–∏–∫–ª–∞–¥ –∑–∞–ø–∏—Ç—ñ–≤ ---
# 1. –ó–∞–≥–∞–ª—å–Ω—ñ –ø—Ä–æ–¥–∞–∂—ñ –∑–∞ –¥—Ä—É–≥–∏–π —Ç–∏–∂–¥–µ–Ω—å (–¥–Ω—ñ 7-13)
week_2_sales = seg_tree.query(7, 13)
# 2. –ü—Ä–æ–¥–∞–∂—ñ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—é –¥–µ–∫–∞–¥—É (–¥–Ω—ñ 20-29)
last_10_days_sales = seg_tree.query(20, 29)

print("–ê–Ω–∞–ª—ñ–∑ –ø—Ä–æ–¥–∞–∂—ñ–≤ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –î–µ—Ä–µ–≤–∞ –≤—ñ–¥—Ä—ñ–∑–∫—ñ–≤:")
print(f"- –ü—Ä–æ–¥–∞–∂—ñ –∑–∞ 2-–π —Ç–∏–∂–¥–µ–Ω—å (–¥–Ω—ñ 7-13): ${week_2_sales} (–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞: ${np.sum(sales_data[7:14])})")
print(f"- –ü—Ä–æ–¥–∞–∂—ñ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 10 –¥–Ω—ñ–≤ (–¥–Ω—ñ 20-29): ${last_10_days_sales} (–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞: ${np.sum(sales_data[20:30])})")

# --- –ë–µ–Ω—á–º–∞—Ä–∫ ---
large_sales_data = np.random.randint(50, 200, size=10000)
large_seg_tree = SegmentTree(large_sales_data)
num_queries = 5000

# –ß–∞—Å –¥–ª—è Segment Tree
start_time = time.perf_counter()
for _ in range(num_queries):
    l, r = sorted(np.random.randint(0, 10000, 2))
    large_seg_tree.query(l, r)
time_seg_tree = (time.perf_counter() - start_time) * 1000

# –ß–∞—Å –¥–ª—è –Ω–∞—ó–≤–Ω–æ–≥–æ –ø—ñ–¥—Ö–æ–¥—É
start_time = time.perf_counter()
for _ in range(num_queries):
    l, r = sorted(np.random.randint(0, 10000, 2))
    np.sum(large_sales_data[l:r+1])
time_naive = (time.perf_counter() - start_time) * 1000

print("\n–ë–µ–Ω—á–º–∞—Ä–∫ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ (10,000 –µ–ª–µ–º–µ–Ω—Ç—ñ–≤, 5,000 –∑–∞–ø–∏—Ç—ñ–≤):")
print(f"  - –ß–∞—Å –î–µ—Ä–µ–≤–∞ –≤—ñ–¥—Ä—ñ–∑–∫—ñ–≤: {time_seg_tree:.2f} –º—Å")
print(f"  - –ß–∞—Å –Ω–∞—ó–≤–Ω–æ–≥–æ –ø—ñ–¥—Å—É–º–æ–≤—É–≤–∞–Ω–Ω—è: {time_naive:.2f} –º—Å")
print(f"  - –ü—Ä–∏—Å–∫–æ—Ä–µ–Ω–Ω—è: {time_naive / time_seg_tree:.2f}x")

# %% [markdown]
#  ### –Ü–Ω—à—ñ –≤–∞–∂–ª–∏–≤—ñ –¥–µ—Ä–µ–≤–æ–ø–æ–¥—ñ–±–Ω—ñ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ (–ö–æ–Ω—Ü–µ–ø—Ç—É–∞–ª—å–Ω–∏–π –æ–≥–ª—è–¥)
#
#  - **Red-Black Tree:** –©–µ –æ–¥–∏–Ω —Ç–∏–ø —Å–∞–º–æ–∑–±–∞–ª–∞–Ω—Å–æ–≤–∞–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞. –ú–µ–Ω—à —Å—Ç—Ä–æ–≥–æ –∑–±–∞–ª–∞–Ω—Å–æ–≤–∞–Ω–µ, –Ω—ñ–∂ AVL, —â–æ —Ä–æ–±–∏—Ç—å –≤—Å—Ç–∞–≤–∫–∏/–≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ç—Ä–æ—Ö–∏ —à–≤–∏–¥—à–∏–º–∏ –∑–∞ —Ä–∞—Ö—É–Ω–æ–∫ –º–µ–Ω—à–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø–æ–≤–æ—Ä–æ—Ç—ñ–≤. –Ñ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ—é —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—î—é –¥–ª—è `map` —Ç–∞ `set` —É C++ STL.
#
#  - **B-Tree / B+ Tree:** –û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω—ñ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –¥–∞–Ω–∏–º–∏, —â–æ –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è –Ω–∞ –¥–∏—Å–∫—É (HDD, SSD). –í–æ–Ω–∏ –º–∞—é—Ç—å –≤–∏—Å–æ–∫–∏–π —Ñ–∞–∫—Ç–æ—Ä —Ä–æ–∑–≥–∞–ª—É–∂–µ–Ω–Ω—è (–±–∞–≥–∞—Ç–æ –¥–æ—á—ñ—Ä–Ω—ñ—Ö –≤—É–∑–ª—ñ–≤), —â–æ –º—ñ–Ω—ñ–º—ñ–∑—É—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–∏—Å–∫–æ–≤–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π. –¶–µ –æ—Å–Ω–æ–≤–∞ —ñ–Ω–¥–µ–∫—Å—ñ–≤ —É –±—ñ–ª—å—à–æ—Å—Ç—ñ —Ä–µ–ª—è—Ü—ñ–π–Ω–∏—Ö –±–∞–∑ –¥–∞–Ω–∏—Ö (PostgreSQL, MySQL).
#
#  - **Fenwick Tree (BIT):** –ë—ñ–ª—å—à –ø—Ä–æ—Å—Ç–∞ —Ç–∞ –ø–∞–º'—è—Ç–µ—Ñ–µ–∫—Ç–∏–≤–Ω–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ –î–µ—Ä–µ–≤—É –≤—ñ–¥—Ä—ñ–∑–∫—ñ–≤, –∞–ª–µ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å –ª–∏—à–µ –¥–ª—è "–æ–±–µ—Ä–Ω–µ–Ω–∏—Ö" –æ–ø–µ—Ä–∞—Ü—ñ–π, —Ç–∞–∫–∏—Ö —è–∫ —Å—É–º–∞.
