# %% [markdown]
#  # –ö–æ–º–ø–ª–µ–∫—Å–Ω–∏–π –∫—É—Ä—Å –∑ –∞–ª–≥–æ—Ä–∏—Ç–º—ñ–≤ —Ç–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä –¥–∞–Ω–∏—Ö –Ω–∞ –≥—Ä–∞—Ñ–∞—Ö
#
#  ## –†–æ–∑–¥—ñ–ª 1: –ö–ª–∞—Å–∏—á–Ω—ñ –∞–ª–≥–æ—Ä–∏—Ç–º–∏ –Ω–∞ –≥—Ä–∞—Ñ–∞—Ö
#
#  ### üéØ –¶—ñ–ª—ñ —Ä–æ–∑–¥—ñ–ª—É:
#  1. **–û–ø–∞–Ω—É–≤–∞—Ç–∏** —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ñ –∞–ª–≥–æ—Ä–∏—Ç–º–∏ –¥–ª—è –ø–æ—à—É–∫—É —à–ª—è—Ö—ñ–≤, –æ–±—Ö–æ–¥—É —Ç–∞ –∞–Ω–∞–ª—ñ–∑—É —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –≥—Ä–∞—Ñ—ñ–≤.
#  2. **–ù–∞–≤—á–∏—Ç–∏—Å—å** –∑–∞—Å—Ç–æ—Å–æ–≤—É–≤–∞—Ç–∏ —Ü—ñ –∞–ª–≥–æ—Ä–∏—Ç–º–∏ –¥–ª—è –≤–∏—Ä—ñ—à–µ–Ω–Ω—è –ø—Ä–∞–∫—Ç–∏—á–Ω–∏—Ö –∑–∞–¥–∞—á –∑ —Ä—ñ–∑–Ω–∏—Ö –¥–æ–º–µ–Ω—ñ–≤.
#  3. **–†–æ–∑—É–º—ñ—Ç–∏** –∫–æ–º–ø—Ä–æ–º—ñ—Å–∏ (—à–≤–∏–¥–∫—ñ—Å—Ç—å, –ø–∞–º'—è—Ç—å, –æ–±–º–µ–∂–µ–Ω–Ω—è) –º—ñ–∂ —Ä—ñ–∑–Ω–∏–º–∏ –ø—ñ–¥—Ö–æ–¥–∞–º–∏.

# %%
# =============================================================================
# –ö–ª—ñ—Ç–∏–Ω–∫–∞ 1: –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ —Ç–∞ —ñ–º–ø–æ—Ä—Ç–∏
# =============================================================================
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import networkx as nx
import numpy as np

# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –Ω–∞—à—ñ –≤–ª–∞—Å–Ω—ñ –º–æ–¥—É–ª—ñ
from src.algorithms.shortest_path import Dijkstra, AStar, BellmanFord, FloydWarshall
from src.algorithms.traversal import BFS, DFS
from src.algorithms.mst import Kruskal, Prim
from src.utils.graph_generator import GraphGenerator
from src.utils.visualizer import PathVisualizer, TraversalVisualizer, MstVisualizer

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—ó
sns.set_theme(style="whitegrid", palette="viridis")
plt.rcParams['figure.figsize'] = (15, 10)
plt.rcParams['font.size'] = 12
print("‚úÖ –°–µ—Ä–µ–¥–æ–≤–∏—â–µ –≥–æ—Ç–æ–≤–µ –¥–æ —Ä–æ–±–æ—Ç–∏.")

# %% [markdown]
#  ## 1.1 –ê–ª–≥–æ—Ä–∏—Ç–º–∏ –ø–æ—à—É–∫—É –Ω–∞–π–∫–æ—Ä–æ—Ç—à–æ–≥–æ —à–ª—è—Ö—É
#
#  –ü–æ—à—É–∫ –Ω–∞–π–∫–æ—Ä–æ—Ç—à–æ–≥–æ —à–ª—è—Ö—É ‚Äî –æ–¥–Ω–∞ –∑ –Ω–∞–π–±—ñ–ª—å—à —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω–∏—Ö –∑–∞–¥–∞—á –≤ —Ç–µ–æ—Ä—ñ—ó –≥—Ä–∞—Ñ—ñ–≤ –∑ –≤–µ–ª–∏—á–µ–∑–Ω–æ—é –∫—ñ–ª—å–∫—ñ—Å—Ç—é –ø—Ä–∞–∫—Ç–∏—á–Ω–∏—Ö –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω—å, –≤—ñ–¥ GPS-–Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –¥–æ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü—ñ—ó —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç-—Ç—Ä–∞—Ñ—ñ–∫—É. –£ —Ü—å–æ–º—É —Ä–æ–∑–¥—ñ–ª—ñ –º–∏ —Ä–æ–∑–≥–ª—è–Ω–µ–º–æ –∫–ª—é—á–æ–≤—ñ –∞–ª–≥–æ—Ä–∏—Ç–º–∏ —Ç–∞ —ó—Ö–Ω—ñ –æ—Å–æ–±–ª–∏–≤–æ—Å—Ç—ñ.

# %% [markdown]
#  ### –ê–ª–≥–æ—Ä–∏—Ç–º –î–µ–π–∫—Å—Ç—Ä–∏ (Dijkstra's Algorithm)
#
#  **–Ü–¥–µ—è:** "–ñ–∞–¥—ñ–±–Ω–∏–π" –∞–ª–≥–æ—Ä–∏—Ç–º, —è–∫–∏–π –∑–Ω–∞—Ö–æ–¥–∏—Ç—å –Ω–∞–π–∫–æ—Ä–æ—Ç—à–∏–π —à–ª—è—Ö –≤—ñ–¥ –æ–¥–Ω—ñ—î—ó —Å—Ç–∞—Ä—Ç–æ–≤–æ—ó –≤–µ—Ä—à–∏–Ω–∏ –¥–æ –≤—Å—ñ—Ö —ñ–Ω—à–∏—Ö —É –≥—Ä–∞—Ñ—ñ –∑ **–Ω–µ–≤—ñ–¥'—î–º–Ω–∏–º–∏** –≤–∞–≥–∞–º–∏ —Ä–µ–±–µ—Ä. –ù–∞ –∫–æ–∂–Ω–æ–º—É –∫—Ä–æ—Ü—ñ –≤—ñ–Ω –æ–±–∏—Ä–∞—î –Ω–∞–π–±–ª–∏–∂—á—É —â–µ –Ω–µ –≤—ñ–¥–≤—ñ–¥–∞–Ω—É –≤–µ—Ä—à–∏–Ω—É —ñ –æ–Ω–æ–≤–ª—é—î –≤—ñ–¥—Å—Ç–∞–Ω—ñ –¥–æ —ó—ó —Å—É—Å—ñ–¥—ñ–≤.
#
#  | –°–∫–ª–∞–¥–Ω—ñ—Å—Ç—å | –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø–∞–º'—è—Ç—ñ | –û–±–º–µ–∂–µ–Ω–Ω—è |
#  | :--- | :--- | :--- |
#  | `O(E log V)` | `O(V)` | –ù–µ –ø—Ä–∞—Ü—é—î –∑ –≤—ñ–¥'—î–º–Ω–∏–º–∏ –≤–∞–≥–∞–º–∏ |
#
#  **–î–æ–º–µ–Ω–∏ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è:**
#  - **–õ–æ–≥—ñ—Å—Ç–∏–∫–∞:** –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω–∏—Ö –º–∞—Ä—à—Ä—É—Ç—ñ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏.
#  - **–ú–µ—Ä–µ–∂—ñ:** –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü—ñ—è –ø–∞–∫–µ—Ç—ñ–≤ –∑–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–º OSPF.
#  - **–ë—ñ–æ—ñ–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞:** –ê–Ω–∞–ª—ñ–∑ –º–µ—Ç–∞–±–æ–ª—ñ—á–Ω–∏—Ö —à–ª—è—Ö—ñ–≤.

# %%
# =============================================================================
# –ö–ª—ñ—Ç–∏–Ω–∫–∞ 2: –ö–æ–Ω—Ü–µ–ø—Ç—É–∞–ª—å–Ω–∏–π –ø—Ä–∏–∫–ª–∞–¥
# =============================================================================
conceptual_graph = nx.Graph()
edges = [('A', 'B', 4), ('A', 'C', 2), ('B', 'C', 1), ('B', 'D', 5), ('C', 'D', 8), ('C', 'E', 10), ('D', 'E', 2)]
conceptual_graph.add_weighted_edges_from(edges)
start_node, end_node = 'A', 'E'

path_info = Dijkstra.find_path(conceptual_graph, start_node, end_node)

print(f"–ö–æ–Ω—Ü–µ–ø—Ç—É–∞–ª—å–Ω–∏–π –ø—Ä–∏–∫–ª–∞–¥: –ø–æ—à—É–∫ —à–ª—è—Ö—É –∑ '{start_node}' –¥–æ '{end_node}'")
print(f"  -> –ó–Ω–∞–π–¥–µ–Ω–∏–π —à–ª—è—Ö: {' ‚Üí '.join(path_info['path'])}")
print(f"  -> –ó–∞–≥–∞–ª—å–Ω–∞ –≤—ñ–¥—Å—Ç–∞–Ω—å: {path_info['distance']:.2f}")

fig = PathVisualizer.draw_path(
    conceptual_graph,
    path=path_info['path'],
    title=f"–ù–∞–π–∫–æ—Ä–æ—Ç—à–∏–π —à–ª—è—Ö –≤—ñ–¥ {start_node} –¥–æ {end_node} (–î–µ–π–∫—Å—Ç—Ä–∞)"
)
plt.show()

# %% [markdown]
#  #### –ü—Ä–∞–∫—Ç–∏—á–Ω–∏–π –ø—Ä–∏–∫–ª–∞–¥: –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –ª–æ–≥—ñ—Å—Ç–∏–∫–∏
#  **–ó–∞–¥–∞—á–∞:** –£ –Ω–∞—Å —î –º–µ—Ä–µ–∂–∞ —Å–∫–ª–∞–¥—ñ–≤ —Ç–∞ –º–∞–≥–∞–∑–∏–Ω—ñ–≤. –ü–æ—Ç—Ä—ñ–±–Ω–æ –∑–Ω–∞–π—Ç–∏ –Ω–∞–π–¥–µ—à–µ–≤—à–∏–π –º–∞—Ä—à—Ä—É—Ç –¥–æ—Å—Ç–∞–≤–∫–∏ —Ç–æ–≤–∞—Ä—É –∑ –≥–æ–ª–æ–≤–Ω–æ–≥–æ —Å–∫–ª–∞–¥—É (—Ö–∞–±—É) –¥–æ –≤—ñ–¥–¥–∞–ª–µ–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω—É. –í–∞–≥–∞ —Ä–µ–±–µ—Ä ‚Äî —Ü–µ –≤–∞—Ä—Ç—ñ—Å—Ç—å –ø–µ—Ä–µ–≤–µ–∑–µ–Ω–Ω—è –º—ñ–∂ –ø—É–Ω–∫—Ç–∞–º–∏.

# %%
# =============================================================================
# –ö–ª—ñ—Ç–∏–Ω–∫–∞ 3: –ü—Ä–∞–∫—Ç–∏—á–Ω–∏–π –ø—Ä–∏–∫–ª–∞–¥ –∑ –¥–æ–º–µ–Ω—É "–õ–æ–≥—ñ—Å—Ç–∏–∫–∞"
# =============================================================================
logistics_graph, node_types, pos = GraphGenerator.create_logistics_network(n_hubs=3, n_warehouses=10, n_stores=30, seed=42)
hub_node = 0
store_node = list(node_types.keys())[-1]

logistics_path_info = Dijkstra.find_path(logistics_graph, hub_node, store_node)

print(f"–ü—Ä–∞–∫—Ç–∏—á–Ω–∏–π –ø—Ä–∏–∫–ª–∞–¥: –º–∞—Ä—à—Ä—É—Ç –∑ –•–∞–±—É-{hub_node} –¥–æ –ú–∞–≥–∞–∑–∏–Ω—É-{store_node}")
print(f"  -> –û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π –º–∞—Ä—à—Ä—É—Ç: {' ‚Üí '.join(map(str, logistics_path_info['path']))}")
print(f"  -> –í–∞—Ä—Ç—ñ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏: ${logistics_path_info['distance']:.2f}")

fig = PathVisualizer.draw_logistics_network(
    logistics_graph, node_types, pos,
    path=logistics_path_info['path'],
    title="–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π –º–∞—Ä—à—Ä—É—Ç –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ –ª–æ–≥—ñ—Å—Ç–∏—á–Ω—ñ–π –º–µ—Ä–µ–∂—ñ"
)
plt.savefig('./data/dijkstra_logistics_path.png', dpi=300, bbox_inches='tight')
plt.show()

# %% [markdown]
#  ### –ê–ª–≥–æ—Ä–∏—Ç–º A*
#
#  **–Ü–¥–µ—è:** –ü–æ–∫—Ä–∞—â–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è –î–µ–π–∫—Å—Ç—Ä–∏, —è–∫–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î **–µ–≤—Ä–∏—Å—Ç–∏—á–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é** `h(n)` –¥–ª—è –æ—Ü—ñ–Ω–∫–∏ –≤—ñ–¥—Å—Ç–∞–Ω—ñ –≤—ñ–¥ –ø–æ—Ç–æ—á–Ω–æ—ó –≤–µ—Ä—à–∏–Ω–∏ `n` –¥–æ —Ü—ñ–ª—ñ. –¶–µ –¥–æ–∑–≤–æ–ª—è—î A* —Ä—É—Ö–∞—Ç–∏—Å—è –±—ñ–ª—å—à —Ü—ñ–ª–µ—Å–ø—Ä—è–º–æ–≤–∞–Ω–æ, –∑–∞–º—ñ—Å—Ç—å —Ç–æ–≥–æ, —â–æ–± –¥–æ—Å–ª—ñ–¥–∂—É–≤–∞—Ç–∏ –≥—Ä–∞—Ñ —É –≤—Å—ñ—Ö –Ω–∞–ø—Ä—è–º–∫–∞—Ö. –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç –≤–µ—Ä—à–∏–Ω–∏ –≤–∏–∑–Ω–∞—á–∞—î—Ç—å—Å—è —è–∫ `f(n) = g(n) + h(n)`, –¥–µ `g(n)` ‚Äî –≤–∂–µ –ø—Ä–æ–π–¥–µ–Ω–∏–π —à–ª—è—Ö.
#
#  **–ö–ª—é—á–æ–≤–∞ –≤–∏–º–æ–≥–∞:** –ï–≤—Ä–∏—Å—Ç–∏–∫–∞ –º–∞—î –±—É—Ç–∏ *–¥–æ–ø—É—Å—Ç–∏–º–æ—é* (admissible), —Ç–æ–±—Ç–æ –Ω—ñ–∫–æ–ª–∏ –Ω–µ –ø–µ—Ä–µ–æ—Ü—ñ–Ω—é–≤–∞—Ç–∏ —Ä–µ–∞–ª—å–Ω—É –≤–∞—Ä—Ç—ñ—Å—Ç—å —à–ª—è—Ö—É –¥–æ —Ü—ñ–ª—ñ.

# %%
# =============================================================================
# –ö–ª—ñ—Ç–∏–Ω–∫–∞ 4: –ü–æ—Ä—ñ–≤–Ω—è–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ Dijkstra vs A*
# =============================================================================
city_graph, pos = GraphGenerator.create_city_road_network(n_intersections=150, seed=101)
start_city, end_city = 0, 149

# –ó–∞–ø—É—Å–∫–∞—î–º–æ –æ–±–∏–¥–≤–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–∏
result_dijkstra = Dijkstra.find_path(city_graph, start_city, end_city)
result_astar = AStar.find_path(city_graph, start_city, end_city, positions=pos, heuristic='euclidean')

# –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ —É –≤–∏–≥–ª—è–¥—ñ —Ç–∞–±–ª–∏—Ü—ñ
comparison_df = pd.DataFrame([result_dijkstra, result_astar]).set_index('algorithm')
print("–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ Dijkstra —Ç–∞ A*:")
print(comparison_df[['distance', 'execution_time']].assign(visited_nodes=lambda df: [len(result_dijkstra['visited_nodes']), len(result_astar['visited_nodes'])]))

# –í—ñ–∑—É–∞–ª—ñ–∑—É—î–º–æ –≤—ñ–¥–≤—ñ–¥–∞–Ω—ñ –≤—É–∑–ª–∏
fig = PathVisualizer.draw_visited_nodes_comparison(
    city_graph, pos,
    results=[result_dijkstra, result_astar],
    title="–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –¥–æ—Å–ª—ñ–¥–∂–µ–Ω–∏—Ö –∑–æ–Ω: Dijkstra vs A*"
)
plt.savefig('./data/dijkstra_vs_astar_visited.png', dpi=300, bbox_inches='tight')
plt.show()

# %% [markdown]
#  #### –í–∏—Å–Ω–æ–≤–∫–∏ –∑ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è
#  –ù–∞ –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—ó —á—ñ—Ç–∫–æ –≤–∏–¥–Ω–æ, —â–æ **Dijkstra** (–∑–ª—ñ–≤–∞) –¥–æ—Å–ª—ñ–¥–∂—É—î –≤–µ–ª–∏–∫–µ –∫–æ–ª–æ –Ω–∞–≤–∫–æ–ª–æ —Å—Ç–∞—Ä—Ç–æ–≤–æ—ó —Ç–æ—á–∫–∏, —Ç–æ–¥—ñ —è–∫ **A*** (—Å–ø—Ä–∞–≤–∞) —Ä—É—Ö–∞—î—Ç—å—Å—è –≤—É–∑—å–∫–∏–º "–∫–æ—Ä–∏–¥–æ—Ä–æ–º" —É –Ω–∞–ø—Ä—è–º–∫—É —Ü—ñ–ª—ñ. –¶–µ –ø—Ä–∏–∑–≤–æ–¥–∏—Ç—å –¥–æ –∑–Ω–∞—á–Ω–æ–≥–æ –∑–º–µ–Ω—à–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –≤—ñ–¥–≤—ñ–¥–∞–Ω–∏—Ö –≤—É–∑–ª—ñ–≤ —Ç–∞, —è–∫ –Ω–∞—Å–ª—ñ–¥–æ–∫, –¥–æ –ø—Ä–∏—Å–∫–æ—Ä–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏, —â–æ –∫—Ä–∏—Ç–∏—á–Ω–æ –≤–∞–∂–ª–∏–≤–æ –¥–ª—è –≤–µ–ª–∏–∫–∏—Ö –∫–∞—Ä—Ç.

# %% [markdown]
#  ### –ê–ª–≥–æ—Ä–∏—Ç–º –ë–µ–ª–ª–º–∞–Ω–∞-–§–æ—Ä–¥–∞ (Bellman-Ford)
#
#  **–Ü–¥–µ—è:** –ù–∞ –≤—ñ–¥–º—ñ–Ω—É –≤—ñ–¥ –î–µ–π–∫—Å—Ç—Ä–∏, —Ü–µ–π –∞–ª–≥–æ—Ä–∏—Ç–º –º–æ–∂–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –∑ –≥—Ä–∞—Ñ–∞–º–∏, —â–æ –º—ñ—Å—Ç—è—Ç—å —Ä–µ–±—Ä–∞ –∑ **–≤—ñ–¥'—î–º–Ω–æ—é –≤–∞–≥–æ—é**. –í—ñ–Ω –ø—Ä–∞—Ü—é—î —à–ª—è—Ö–æ–º —ñ—Ç–µ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è (—Ä–µ–ª–∞–∫—Å–∞—Ü—ñ—ó) –≤—ñ–¥—Å—Ç–∞–Ω–µ–π –¥–æ –≤—Å—ñ—Ö –≤–µ—Ä—à–∏–Ω `V-1` —Ä–∞–∑—ñ–≤. –ù–∞ `V`-–π —ñ—Ç–µ—Ä–∞—Ü—ñ—ó –≤—ñ–Ω –º–æ–∂–µ –≤–∏—è–≤–∏—Ç–∏ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Ü–∏–∫–ª—É –∑ –≤—ñ–¥'—î–º–Ω–æ—é —Å—É–º–∞—Ä–Ω–æ—é –≤–∞–≥–æ—é.
#
#  **–î–æ–º–µ–Ω–∏ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è:**
#  - **–§—ñ–Ω–∞–Ω—Å–∏:** –ü–æ—à—É–∫ –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω–∏—Ö –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π –Ω–∞ –≤–∞–ª—é—Ç–Ω–∏—Ö —Ä–∏–Ω–∫–∞—Ö (–¥–µ –≤—ñ–¥'—î–º–Ω–∏–π —Ü–∏–∫–ª –æ–∑–Ω–∞—á–∞—î –±–µ–∑–ø—Ä–æ–≥—Ä–∞—à–Ω—É –ø–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ—Å—Ç—å –æ–±–º—ñ–Ω—ñ–≤).
#  - **–ú–µ—Ä–µ–∂—ñ:** –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü—ñ—è –≤ –º–µ—Ä–µ–∂–∞—Ö, –¥–µ –º–æ–∂—É—Ç—å –±—É—Ç–∏ "—à—Ç—Ä–∞—Ñ–∏" (–≤—ñ–¥'—î–º–Ω—ñ –≤–∞–≥–∏).

# %%
# =============================================================================
# –ö–ª—ñ—Ç–∏–Ω–∫–∞ 5: –ü—Ä–∞–∫—Ç–∏—á–Ω–∏–π –ø—Ä–∏–∫–ª–∞–¥ Bellman-Ford - –ü–æ—à—É–∫ –∞—Ä–±—ñ—Ç—Ä–∞–∂—É
# =============================================================================
# –°—Ç–≤–æ—Ä—é—î–º–æ –≥—Ä–∞—Ñ –≤–∞–ª—é—Ç. –í–∞–≥–∞ log(rate) -> —à–ª—è—Ö —Ü–µ –¥–æ–±—É—Ç–æ–∫ –∫—É—Ä—Å—ñ–≤. –í—ñ–¥'—î–º–Ω–∏–π —Ü–∏–∫–ª = –ø—Ä–∏–±—É—Ç–æ–∫
currencies = ['USD', 'EUR', 'GBP', 'JPY']
rates = [
    ('USD', 'EUR', 0.92), ('EUR', 'USD', 1.08),
    ('USD', 'GBP', 0.79), ('GBP', 'USD', 1.26),
    ('EUR', 'GBP', 0.85), ('GBP', 'EUR', 1.17),
    ('JPY', 'USD', 0.0067), ('USD', 'JPY', 149.0),
    # –°—Ç–≤–æ—Ä—é—î–º–æ –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω—É –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å
    ('EUR', 'JPY', 163.0), ('JPY', 'GBP', 0.0055), ('GBP', 'EUR', 1.18) # EUR->JPY->GBP->EUR
]
arbitrage_graph = nx.DiGraph()
for u, v, rate in rates:
    arbitrage_graph.add_edge(u, v, weight=-np.log(rate))

# –ó–∞–ø—É—Å–∫–∞—î–º–æ –ë–µ–ª–ª–º–∞–Ω–∞-–§–æ—Ä–¥–∞
# –î–ª—è –≤–∏—è–≤–ª–µ–Ω–Ω—è —Ü–∏–∫–ª—É, –Ω–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –π–æ–≥–æ –Ω–∞ –≤—Å—å–æ–º—É –≥—Ä–∞—Ñ—ñ
# –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç–∏, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—î–º–æ –≤–±—É–¥–æ–≤–∞–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é networkx, —è–∫–∞ –±–∞–∑—É—î—Ç—å—Å—è –Ω–∞ Bellman-Ford
try:
    cycle = nx.find_negative_edge_cycle(arbitrage_graph, source='EUR')
    print("üìà –ó–Ω–∞–π–¥–µ–Ω–æ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –¥–ª—è –∞—Ä–±—ñ—Ç—Ä–∞–∂—É (–≤—ñ–¥'—î–º–Ω–∏–π —Ü–∏–∫–ª)!")
    print(f"   -> –®–ª—è—Ö: {' ‚Üí '.join(cycle)}")
except nx.NetworkXError:
    print("üìâ –ú–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π –¥–ª—è –∞—Ä–±—ñ—Ç—Ä–∞–∂—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

# %% [markdown]
#  ## 1.2 –ê–ª–≥–æ—Ä–∏—Ç–º–∏ –æ–±—Ö–æ–¥—É –≥—Ä–∞—Ñ—ñ–≤
#
#  –û–±—Ö—ñ–¥ –≥—Ä–∞—Ñ—É ‚Äî —Ü–µ –ø—Ä–æ—Ü–µ—Å —Å–∏—Å—Ç–µ–º–∞—Ç–∏—á–Ω–æ–≥–æ –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω–Ω—è –∫–æ–∂–Ω–æ—ó –≤–µ—Ä—à–∏–Ω–∏. –¶–µ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω–∞ –æ–ø–µ—Ä–∞—Ü—ñ—è, —â–æ –ª–µ–∂–∏—Ç—å –≤ –æ—Å–Ω–æ–≤—ñ –±–∞–≥–∞—Ç—å–æ—Ö —Å–∫–ª–∞–¥–Ω—ñ—à–∏—Ö –∞–ª–≥–æ—Ä–∏—Ç–º—ñ–≤.

# %% [markdown]
#  ### –ü–æ—à—É–∫ –≤ —à–∏—Ä–∏–Ω—É (BFS - Breadth-First Search)
#
#  **–Ü–¥–µ—è:** BFS –¥–æ—Å–ª—ñ–¥–∂—É—î –≥—Ä–∞—Ñ "—Ä—ñ–≤–Ω—è–º–∏", –≥–∞—Ä–∞–Ω—Ç—É—é—á–∏ –∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –Ω–∞–π–∫–æ—Ä–æ—Ç—à–æ–≥–æ —à–ª—è—Ö—É –≤ —Ç–µ—Ä–º—ñ–Ω–∞—Ö –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ä–µ–±–µ—Ä.
#
#  **–ü—Ä–∞–∫—Ç–∏—á–Ω–µ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è:**
#  - **–°–æ—Ü—ñ–∞–ª—å–Ω—ñ –º–µ—Ä–µ–∂—ñ:** –ø–æ—à—É–∫ "–¥—Ä—É–∑—ñ–≤ –¥—Ä—É–∑—ñ–≤" (2-–π —Ä—ñ–≤–µ–Ω—å –∑–≤'—è–∑–∫—ñ–≤).
#  - **–í–µ–±-–∫—Ä–∞—É–ª–µ—Ä–∏:** —ñ–Ω–¥–µ–∫—Å–∞—Ü—ñ—è —Å—Ç–æ—Ä—ñ–Ω–æ–∫, –ø–æ—á–∏–Ω–∞—é—á–∏ –∑ –≥–æ–ª–æ–≤–Ω–æ—ó.

# %%
# =============================================================================
# –ö–ª—ñ—Ç–∏–Ω–∫–∞ 6: –ü—Ä–∞–∫—Ç–∏—á–Ω–∏–π –ø—Ä–∏–∫–ª–∞–¥ BFS - –ê–Ω–∞–ª—ñ–∑ —Å–æ—Ü—ñ–∞–ª—å–Ω–æ—ó –º–µ—Ä–µ–∂—ñ
# =============================================================================
social_graph, names = GraphGenerator.create_social_network(seed=42)
start_user_id = 0
start_user_name = names[start_user_id]

bfs_traversal = BFS(social_graph)
result = bfs_traversal.traverse(start_node=start_user_id)

levels_df = pd.DataFrame(result['distances'].items(), columns=['User ID', 'Level']).sort_values(by='Level')
levels_df['Name'] = levels_df['User ID'].map(names)
print(f"–†—ñ–≤–Ω—ñ –∑–≤'—è–∑–∫—ñ–≤ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ '{start_user_name}':")
print(levels_df[['Level', 'User ID', 'Name']].to_string(index=False))

fig = TraversalVisualizer.draw_bfs_levels(
    social_graph,
    start_node=start_user_id,
    distances=result['distances'],
    labels=names,
    title=f"–†—ñ–≤–Ω—ñ –∑–≤'—è–∑–∫—ñ–≤ –¥–ª—è '{start_user_name}' (BFS)"
)
plt.savefig('./data/bfs_social_network.png', dpi=300, bbox_inches='tight')
plt.show()

# %% [markdown]
#  ### –ü–æ—à—É–∫ –≤ –≥–ª–∏–±–∏–Ω—É (DFS - Depth-First Search)
#
#  **–Ü–¥–µ—è:** DFS –π–¥–µ "–≤–≥–ª–∏–±" –ø–æ –æ–¥–Ω—ñ–π –≥—ñ–ª—Ü—ñ –≥—Ä–∞—Ñ—É –¥–æ —É–ø–æ—Ä—É, –ø–µ—Ä—à –Ω—ñ–∂ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è —ñ –¥–æ—Å–ª—ñ–¥–∏—Ç–∏ —ñ–Ω—à—ñ —à–ª—è—Ö–∏.
#
#  **–ü—Ä–∞–∫—Ç–∏—á–Ω–µ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è:**
#  - **–í–∏—è–≤–ª–µ–Ω–Ω—è —Ü–∏–∫–ª—ñ–≤:** –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –ø—Ä–∏ –∑–±—ñ—Ä—Ü—ñ –ü–ó).
#  - **–¢–æ–ø–æ–ª–æ–≥—ñ—á–Ω–µ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è:** –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫—É –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–¥–∞—á.
#  - **–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ª–∞–±—ñ—Ä–∏–Ω—Ç—ñ–≤.**

# %%
# =============================================================================
# –ö–ª—ñ—Ç–∏–Ω–∫–∞ 7: –ü—Ä–∞–∫—Ç–∏—á–Ω–∏–π –ø—Ä–∏–∫–ª–∞–¥ DFS - –í–∏—è–≤–ª–µ–Ω–Ω—è —Ü–∏–∫–ª—ñ—á–Ω–∏—Ö –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
# =============================================================================
dep_graph, tasks = GraphGenerator.create_dependency_graph_with_cycle()

dfs_traversal = DFS(dep_graph)
cycle = dfs_traversal.find_cycle()

fig = TraversalVisualizer.draw_cycle(
    dep_graph,
    cycle=[tasks[n] for n in cycle] if cycle else [],
    labels=tasks,
    title="–í–∏—è–≤–ª–µ–Ω–Ω—è —Ü–∏–∫–ª—ñ—á–Ω–∏—Ö –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é DFS"
)
if cycle:
    print(f"üî• –í–∏—è–≤–ª–µ–Ω–æ —Ü–∏–∫–ª: {' ‚Üí '.join([tasks[n] for n in cycle])}")
else:
    print("‚úÖ –¶–∏–∫–ª—ñ—á–Ω–∏—Ö –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π –Ω–µ –≤–∏—è–≤–ª–µ–Ω–æ.")
plt.savefig('./data/dependency_cycle.png', dpi=300, bbox_inches='tight')
plt.show()

# %% [markdown]
#  ## 1.3 –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–µ –æ—Å—Ç—ñ–≤–Ω–µ –¥–µ—Ä–µ–≤–æ (MST)
#
#  **–ó–∞–¥–∞—á–∞:** –ó'—î–¥–Ω–∞—Ç–∏ –≤—Å—ñ –≤–µ—Ä—à–∏–Ω–∏ –≥—Ä–∞—Ñ—É —Ä–∞–∑–æ–º –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –ø—ñ–¥–º–Ω–æ–∂–∏–Ω–∏ —Ä–µ–±–µ—Ä, —â–æ –º–∞—î –º—ñ–Ω—ñ–º–∞–ª—å–Ω—É –º–æ–∂–ª–∏–≤—É –∑–∞–≥–∞–ª—å–Ω—É –≤–∞–≥—É —ñ –Ω–µ –º—ñ—Å—Ç–∏—Ç—å —Ü–∏–∫–ª—ñ–≤.
#
#  **–î–æ–º–µ–Ω–∏ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è:**
#  - **–ü—Ä–æ–µ–∫—Ç—É–≤–∞–Ω–Ω—è –º–µ—Ä–µ–∂:** –î–∏–∑–∞–π–Ω –º–µ—Ä–µ–∂ –∫–æ–º—É–Ω—ñ–∫–∞—Ü—ñ–π (—ñ–Ω—Ç–µ—Ä–Ω–µ—Ç, —Ç–µ–ª–µ—Ñ–æ–Ω), –µ–ª–µ–∫—Ç—Ä–æ–º–µ—Ä–µ–∂, —Ç—Ä—É–±–æ–ø—Ä–æ–≤–æ–¥—ñ–≤ –∑ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–º–∏ –≤–∏—Ç—Ä–∞—Ç–∞–º–∏.
#  - **–ö–ª–∞—Å—Ç–µ—Ä–Ω–∏–π –∞–Ω–∞–ª—ñ–∑:** –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —è–∫ –∫—Ä–æ–∫ –≤ –¥–µ—è–∫–∏—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–∞—Ö –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü—ñ—ó.
#  - **–ö–æ–º–ø'—é—Ç–µ—Ä–Ω–µ –±–∞—á–µ–Ω–Ω—è:** –°–µ–≥–º–µ–Ω—Ç–∞—Ü—ñ—è –∑–æ–±—Ä–∞–∂–µ–Ω—å.

# %% [markdown]
#  ### –ê–ª–≥–æ—Ä–∏—Ç–º –ö—Ä–∞—Å–∫–∞–ª–∞ (Kruskal) vs –ê–ª–≥–æ—Ä–∏—Ç–º –ü—Ä—ñ–º–∞ (Prim)
#
#  | –ê–ª–≥–æ—Ä–∏—Ç–º | –Ü–¥–µ—è | –°–∫–ª–∞–¥–Ω—ñ—Å—Ç—å | –ù–∞–π–∫—Ä–∞—â–µ –¥–ª—è |
#  | :--- | :--- | :--- | :--- |
#  | **Kruskal**| "–õ—ñ—Å–æ–≤–∏–π" –ø—ñ–¥—Ö—ñ–¥: —Å–æ—Ä—Ç—É—î –≤—Å—ñ —Ä–µ–±—Ä–∞ —ñ –¥–æ–¥–∞—î –Ω–∞–π–ª–µ–≥—à—ñ, —â–æ –Ω–µ —Å—Ç–≤–æ—Ä—é—é—Ç—å —Ü–∏–∫–ª—ñ–≤. | `O(E log E)` | –†–æ–∑—Ä—ñ–¥–∂–µ–Ω—ñ –≥—Ä–∞—Ñ–∏. |
#  | **Prim** | "–î–µ—Ä–µ–≤–Ω–∏–π" –ø—ñ–¥—Ö—ñ–¥: –≤–∏—Ä–æ—â—É—î –æ–¥–Ω–µ –¥–µ—Ä–µ–≤–æ, –Ω–∞ –∫–æ–∂–Ω–æ–º—É –∫—Ä–æ—Ü—ñ –¥–æ–¥–∞—é—á–∏ –Ω–∞–π–ª–µ–≥—à–µ —Ä–µ–±—Ä–æ –¥–æ –Ω–æ–≤–æ—ó –≤–µ—Ä—à–∏–Ω–∏. | `O(E log V)` | –©—ñ–ª—å–Ω—ñ –≥—Ä–∞—Ñ–∏. |

# %%
# =============================================================================
# –ö–ª—ñ—Ç–∏–Ω–∫–∞ 8: –ü—Ä–∞–∫—Ç–∏—á–Ω–∏–π –ø—Ä–∏–∫–ª–∞–¥ MST - –ü—Ä–æ–µ–∫—Ç—É–≤–∞–Ω–Ω—è –º–µ—Ä–µ–∂—ñ
# =============================================================================
# –ì–µ–Ω–µ—Ä—É—î–º–æ –≥—Ä–∞—Ñ, —â–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—î –º—ñ—Å—Ç–∞ —Ç–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å –ø—Ä–æ–∫–ª–∞–¥–∞–Ω–Ω—è –∫–∞–±–µ–ª—é
network_graph, pos = GraphGenerator.create_city_road_network(n_intersections=15, connectivity=0.5, seed=50)

# –ó–Ω–∞—Ö–æ–¥–∏–º–æ MST –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –æ–±–æ—Ö –∞–ª–≥–æ—Ä–∏—Ç–º—ñ–≤
mst_kruskal = Kruskal.find_mst(network_graph)
mst_prim = Prim.find_mst(network_graph)

print("–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∞–ª–≥–æ—Ä–∏—Ç–º—ñ–≤ MST:")
mst_comparison_data = {
    'Algorithm': ['Kruskal', 'Prim'],
    'Total Weight': [mst_kruskal['total_weight'], mst_prim['total_weight']],
    'Num Edges': [len(mst_kruskal['edges']), len(mst_prim['edges'])]
}
print(pd.DataFrame(mst_comparison_data))

# –í—ñ–∑—É–∞–ª—ñ–∑—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
fig = MstVisualizer.draw_mst(
    network_graph,
    mst_kruskal['edges'],
    title=f"–û–ø—Ç–∏–º–∞–ª—å–Ω–∞ –º–µ—Ä–µ–∂–∞ (MST) - –ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å: {mst_kruskal['total_weight']:.2f}",
    pos=pos
)
plt.savefig('./data/mst_network_design.png', dpi=300, bbox_inches='tight')
plt.show()


# %% [markdown]
#  ## –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –†–æ–∑–¥—ñ–ª—É 1
#
#  –ú–∏ —Ä–æ–∑–≥–ª—è–Ω—É–ª–∏ –∫–ª—é—á–æ–≤—ñ –∫–ª–∞—Å–∏—á–Ω—ñ –∞–ª–≥–æ—Ä–∏—Ç–º–∏ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –≥—Ä–∞—Ñ–∞–º–∏. –ö–æ–∂–µ–Ω –∑ –Ω–∏—Ö –º–∞—î —Å–≤–æ—é –Ω—ñ—à—É –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è, —ñ —Ä–æ–∑—É–º—ñ–Ω–Ω—è —ó—Ö–Ω—ñ—Ö —Å–∏–ª—å–Ω–∏—Ö —Ç–∞ —Å–ª–∞–±–∫–∏—Ö —Å—Ç–æ—Ä—ñ–Ω —î –∫—Ä–∏—Ç–∏—á–Ω–∏–º –¥–ª—è –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–∏—Ä—ñ—à–µ–Ω–Ω—è —Ä–µ–∞–ª—å–Ω–∏—Ö –∑–∞–¥–∞—á.
#
#  **–ù–∞—Å—Ç—É–ø–Ω–∏–π —Ä–æ–∑–¥—ñ–ª** –±—É–¥–µ –ø—Ä–∏—Å–≤—è—á–µ–Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞–º –¥–∞–Ω–∏—Ö, —è–∫—ñ –ª–µ–∂–∞—Ç—å –≤ –æ—Å–Ω–æ–≤—ñ —Ü–∏—Ö —Ç–∞ –±–∞–≥–∞—Ç—å–æ—Ö —ñ–Ω—à–∏—Ö –∞–ª–≥–æ—Ä–∏—Ç–º—ñ–≤.
# %%
