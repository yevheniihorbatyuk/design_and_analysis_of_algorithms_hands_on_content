# %% [markdown]
#  # –ê–ª–≥–æ—Ä–∏—Ç–º–∏ –ø–æ—à—É–∫—É —à–ª—è—Ö—ñ–≤ —É –≥—Ä–∞—Ñ–∞—Ö
# 
#  ## –ö–æ–º–ø–ª–µ–∫—Å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –¥–ª—è –Ω–∞–≤—á–∞–ª—å–Ω–æ–≥–æ –∫—É—Ä—Å—É
# 
# 
# 
#  ### üìö –¢–µ–æ—Ä–µ—Ç–∏—á–Ω—ñ –æ—Å–Ω–æ–≤–∏
# 
# 
# 
#  –ê–ª–≥–æ—Ä–∏—Ç–º–∏ –ø–æ—à—É–∫—É –Ω–∞–π–∫–æ—Ä–æ—Ç—à–æ–≥–æ —à–ª—è—Ö—É ‚Äî —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω–∞ –æ–±–ª–∞—Å—Ç—å —Ç–µ–æ—Ä—ñ—ó –≥—Ä–∞—Ñ—ñ–≤
# 
#  –∑ —à–∏—Ä–æ–∫–∏–º –ø—Ä–∞–∫—Ç–∏—á–Ω–∏–º –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è–º:
# 
# 
# 
#  1. **–ù–∞–≤—ñ–≥–∞—Ü—ñ–π–Ω—ñ —Å–∏—Å—Ç–µ–º–∏** (Google Maps, Waze, OSRM)
# 
#  2. **–°–æ—Ü—ñ–∞–ª—å–Ω—ñ –º–µ—Ä–µ–∂—ñ** (–ø–æ—à—É–∫ –∑–≤'—è–∑–∫—ñ–≤, —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó)
# 
#  3. **–õ–æ–≥—ñ—Å—Ç–∏–∫–∞** (–º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü—ñ—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É)
# 
#  4. **–Ü–≥—Ä–æ–≤–∞ —ñ–Ω–¥—É—Å—Ç—Ä—ñ—è** (–ø–æ—à—É–∫ —à–ª—è—Ö—É NPC)
# 
#  5. **–ú–µ—Ä–µ–∂–µ–≤—ñ –ø—Ä–æ—Ç–æ–∫–æ–ª–∏** (–º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü—ñ—è –ø–∞–∫–µ—Ç—ñ–≤)
# 
# 
# 
#  #### üéØ –ö–ª—é—á–æ–≤—ñ –ø–æ–Ω—è—Ç—Ç—è:
# 
#  - **–ì—Ä–∞—Ñ G = (V, E)**: V - –≤–µ—Ä—à–∏–Ω–∏ (–≤—É–∑–ª–∏), E - —Ä–µ–±—Ä–∞ (–∑–≤'—è–∑–∫–∏)
# 
#  - **–í–∞–≥–∞ —Ä–µ–±—Ä–∞**: —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è "–≤–∞—Ä—Ç–æ—Å—Ç—ñ" –ø–µ—Ä–µ—Ö–æ–¥—É
# 
#  - **–®–ª—è—Ö**: –ø–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ—Å—Ç—å –≤–µ—Ä—à–∏–Ω, –∑'—î–¥–Ω–∞–Ω–∏—Ö —Ä–µ–±—Ä–∞–º–∏
# 
#  - **–ù–∞–π–∫–æ—Ä–æ—Ç—à–∏–π —à–ª—è—Ö**: —à–ª—è—Ö –∑ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ—é —Å—É–º–∞—Ä–Ω–æ—é –≤–∞–≥–æ—é

# %%
# –Ü–º–ø–æ—Ä—Ç –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –±—ñ–±–ª—ñ–æ—Ç–µ–∫
import numpy as np
import matplotlib.pyplot as plt
import networkx as nx
import heapq
import time
from collections import defaultdict, deque
from typing import List, Tuple, Dict, Set, Optional, Callable
import seaborn as sns
import pandas as pd
from dataclasses import dataclass, field
import math
import warnings
warnings.filterwarnings('ignore')

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—ó
plt.style.use('default')
sns.set_palette("husl")
plt.rcParams['figure.figsize'] = (14, 10)
plt.rcParams['font.size'] = 10
plt.rcParams['axes.grid'] = True
plt.rcParams['grid.alpha'] = 0.3

print("üó∫Ô∏è –õ–∞–±–æ—Ä–∞—Ç–æ—Ä—ñ—è –∞–ª–≥–æ—Ä–∏—Ç–º—ñ–≤ –ø–æ—à—É–∫—É —à–ª—è—Ö—ñ–≤ —É –≥—Ä–∞—Ñ–∞—Ö")
print("=" * 80)


# %%
# –î–æ–ø–æ–º—ñ–∂–Ω—ñ –∫–ª–∞—Å–∏ —Ç–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –¥–∞–Ω–∏—Ö

@dataclass
class PathResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—à—É–∫—É —à–ª—è—Ö—É"""
    path: List[int]
    distance: float
    visited_nodes: int
    execution_time: float
    algorithm: str
    
@dataclass
class GraphStats:
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥—Ä–∞—Ñ—É"""
    nodes: int
    edges: int
    avg_degree: float
    density: float
    is_weighted: bool
    has_negative_weights: bool

class PriorityQueue:
    """–ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–Ω–∞ —á–µ—Ä–≥–∞ –¥–ª—è –∞–ª–≥–æ—Ä–∏—Ç–º—ñ–≤ –ø–æ—à—É–∫—É"""
    def __init__(self):
        self.elements = []
        self.counter = 0
    
    def empty(self):
        return len(self.elements) == 0
    
    def put(self, item, priority):
        heapq.heappush(self.elements, (priority, self.counter, item))
        self.counter += 1
    
    def get(self):
        return heapq.heappop(self.elements)[2]

class PerformanceTracker:
    """–¢—Ä–µ–∫–µ—Ä –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –∞–ª–≥–æ—Ä–∏—Ç–º—ñ–≤"""
    def __init__(self):
        self.visited_count = 0
        self.comparisons = 0
        
    def reset(self):
        self.visited_count = 0
        self.comparisons = 0
    
    def visit_node(self):
        self.visited_count += 1
    
    def compare(self):
        self.comparisons += 1

tracker = PerformanceTracker()


# %%
# –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∏ –≥—Ä–∞—Ñ—ñ–≤ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö –¥–æ–º–µ–Ω—ñ–≤

class GraphGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≥—Ä–∞—Ñ—ñ–≤ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Å—Ü–µ–Ω–∞—Ä—ñ—ó–≤"""
    
    @staticmethod
    def create_city_road_network(n_intersections=50, connectivity=0.15, seed=42):
        """
        –°—Ç–≤–æ—Ä—é—î –≥—Ä–∞—Ñ –º—ñ—Å—å–∫–æ—ó –¥–æ—Ä–æ–∂–Ω—å–æ—ó –º–µ—Ä–µ–∂—ñ
        –î–æ–º–µ–Ω: –õ–æ–≥—ñ—Å—Ç–∏–∫–∞, GPS-–Ω–∞–≤—ñ–≥–∞—Ü—ñ—è
        """
        np.random.seed(seed)
        G = nx.Graph()
        
        # –†–æ–∑–º—ñ—â—É—î–º–æ –ø–µ—Ä–µ—Ö—Ä–µ—Å—Ç—è –Ω–∞ —Å—ñ—Ç—Ü—ñ –∑ –Ω–µ–≤–µ–ª–∏–∫–∏–º —à—É–º–æ–º
        positions = {}
        grid_size = int(np.sqrt(n_intersections)) + 1
        for i in range(n_intersections):
            x = (i % grid_size) + np.random.uniform(-0.3, 0.3)
            y = (i // grid_size) + np.random.uniform(-0.3, 0.3)
            positions[i] = (x, y)
            G.add_node(i, pos=(x, y))
        
        # –î–æ–¥–∞—î–º–æ —Ä–µ–±—Ä–∞ –∑ –≤–∞–≥–∞–º–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –µ–≤–∫–ª—ñ–¥–æ–≤–æ—ó –≤—ñ–¥—Å—Ç–∞–Ω—ñ
        for i in range(n_intersections):
            for j in range(i + 1, n_intersections):
                if np.random.random() < connectivity:
                    dist = np.sqrt(
                        (positions[i][0] - positions[j][0])**2 + 
                        (positions[i][1] - positions[j][1])**2
                    )
                    # –í–∞–≥–∞ = –≤—ñ–¥—Å—Ç–∞–Ω—å + –≤–∏–ø–∞–¥–∫–æ–≤–∏–π —Ç—Ä–∞—Ñ—ñ–∫
                    weight = dist * (1 + np.random.uniform(0, 0.5))
                    G.add_edge(i, j, weight=weight)
        
        return G, positions
    
    @staticmethod
    def create_social_network(n_users=100, avg_friends=8, seed=42):
        """
        –°—Ç–≤–æ—Ä—é—î –≥—Ä–∞—Ñ —Å–æ—Ü—ñ–∞–ª—å–Ω–æ—ó –º–µ—Ä–µ–∂—ñ
        –î–æ–º–µ–Ω: –°–æ—Ü—ñ–∞–ª—å–Ω—ñ –º–µ—Ä–µ–∂—ñ (Facebook, LinkedIn)
        """
        np.random.seed(seed)
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –º–æ–¥–µ–ª—å Watts-Strogatz –¥–ª—è —Ä–µ–∞–ª—ñ—Å—Ç–∏—á–Ω–æ—ó —Å–æ—Ü—ñ–∞–ª—å–Ω–æ—ó –º–µ—Ä–µ–∂—ñ
        k = avg_friends
        p = 0.3  # –π–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –ø–µ—Ä–µ–∑'—î–¥–Ω–∞–Ω–Ω—è (—Å—Ç–≤–æ—Ä—é—î "–º–æ—Å—Ç–∏" –º—ñ–∂ –∫–ª–∞—Å—Ç–µ—Ä–∞–º–∏)
        G = nx.watts_strogatz_graph(n_users, k, p, seed=seed)
        
        # –î–æ–¥–∞—î–º–æ –≤–∞–≥–∏ —è–∫ "—Å–∏–ª—É –∑–≤'—è–∑–∫—É" (–∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø—ñ–ª—å–Ω–∏—Ö —ñ–Ω—Ç–µ—Ä–µ—Å—ñ–≤)
        for u, v in G.edges():
            G[u][v]['weight'] = np.random.randint(1, 10)
        
        return G
    
    @staticmethod
    def create_protein_network(n_proteins=80, interaction_prob=0.1, seed=42):
        """
        –°—Ç–≤–æ—Ä—é—î –º–µ—Ä–µ–∂—É –±—ñ–ª–æ–∫-–±—ñ–ª–∫–æ–≤–∏—Ö –≤–∑–∞—î–º–æ–¥—ñ–π
        –î–æ–º–µ–Ω: –ë—ñ–æ—ñ–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞
        """
        np.random.seed(seed)
        G = nx.erdos_renyi_graph(n_proteins, interaction_prob, seed=seed)
        
        # –í–∞–≥–∏ —è–∫ "—Å–∏–ª–∞ –≤–∑–∞—î–º–æ–¥—ñ—ó" –∞–±–æ "–µ–Ω–µ—Ä–≥—ñ—è –∑–≤'—è–∑—É–≤–∞–Ω–Ω—è"
        for u, v in G.edges():
            G[u][v]['weight'] = np.random.uniform(0.1, 5.0)
        
        return G
    
    @staticmethod
    def create_game_dungeon(width=20, height=20, obstacle_prob=0.3, seed=42):
        """
        –°—Ç–≤–æ—Ä—é—î –ø—ñ–¥–∑–µ–º–µ–ª–ª—è –¥–ª—è —ñ–≥–æ—Ä
        –î–æ–º–µ–Ω: –Ü–≥—Ä–æ–≤–∞ —ñ–Ω–¥—É—Å—Ç—Ä—ñ—è, —Ä–æ–±–æ—Ç–µ—Ö–Ω—ñ–∫–∞
        """
        np.random.seed(seed)
        G = nx.grid_2d_graph(width, height)
        
        # –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –Ω–∞ –∑–≤–∏—á–∞–π–Ω–∏–π –≥—Ä–∞—Ñ –∑ —á–∏—Å–ª–æ–≤–∏–º–∏ –≤–µ—Ä—à–∏–Ω–∞–º–∏
        mapping = {node: i for i, node in enumerate(G.nodes())}
        G = nx.relabel_nodes(G, mapping)
        
        # –í–∏–¥–∞–ª—è—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤—ñ –≤–µ—Ä—à–∏–Ω–∏ (–ø–µ—Ä–µ—à–∫–æ–¥–∏)
        nodes_to_remove = [n for n in G.nodes() if np.random.random() < obstacle_prob]
        G.remove_nodes_from(nodes_to_remove)
        
        # –î–æ–¥–∞—î–º–æ –≤–∞–≥–∏ (—Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å —Ç–µ—Ä–µ–Ω—É)
        for u, v in G.edges():
            G[u][v]['weight'] = np.random.choice([1, 2, 3, 5], p=[0.5, 0.3, 0.15, 0.05])
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—ñ—Ç–∫—É –¥–ª—è –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—ó
        positions = {i: (i % width, i // width) for i in G.nodes()}
        
        return G, positions
    
    @staticmethod
    def create_network_topology(n_routers=60, seed=42):
        """
        –°—Ç–≤–æ—Ä—é—î —Ç–æ–ø–æ–ª–æ–≥—ñ—é –∫–æ–º–ø'—é—Ç–µ—Ä–Ω–æ—ó –º–µ—Ä–µ–∂—ñ
        –î–æ–º–µ–Ω: –ú–µ—Ä–µ–∂–µ–≤—ñ –ø—Ä–æ—Ç–æ–∫–æ–ª–∏, –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü—ñ—è
        """
        np.random.seed(seed)
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –º–æ–¥–µ–ª—å Barab√°si-Albert –¥–ª—è scale-free –º–µ—Ä–µ–∂—ñ
        G = nx.barabasi_albert_graph(n_routers, 3, seed=seed)
        
        # –í–∞–≥–∏ —è–∫ –∑–∞—Ç—Ä–∏–º–∫–∞ (latency) —É –º—Å
        for u, v in G.edges():
            G[u][v]['weight'] = np.random.uniform(1, 50)
        
        return G
    
    @staticmethod
    def create_logistics_network(n_warehouses=30, n_stores=40, seed=42):
        """
        –°—Ç–≤–æ—Ä—é—î –ª–æ–≥—ñ—Å—Ç–∏—á–Ω—É –º–µ—Ä–µ–∂—É –¥–æ—Å—Ç–∞–≤–∫–∏
        –î–æ–º–µ–Ω: –õ–æ–≥—ñ—Å—Ç–∏–∫–∞, supply chain
        """
        np.random.seed(seed)
        G = nx.Graph()
        
        # –î–æ–¥–∞—î–º–æ —Å–∫–ª–∞–¥–∏ —Ç–∞ –º–∞–≥–∞–∑–∏–Ω–∏
        for i in range(n_warehouses):
            G.add_node(i, node_type='warehouse')
        
        for i in range(n_warehouses, n_warehouses + n_stores):
            G.add_node(i, node_type='store')
        
        # –°–∫–ª–∞–¥–∏ –∑'—î–¥–Ω–∞–Ω—ñ –º—ñ–∂ —Å–æ–±–æ—é
        for i in range(n_warehouses):
            for j in range(i + 1, n_warehouses):
                if np.random.random() < 0.4:
                    G.add_edge(i, j, weight=np.random.uniform(50, 200))
        
        # –ö–æ–∂–µ–Ω –º–∞–≥–∞–∑–∏–Ω –∑'—î–¥–Ω–∞–Ω–∏–π –∑ –∫—ñ–ª—å–∫–æ–º–∞ —Å–∫–ª–∞–¥–∞–º–∏
        for store in range(n_warehouses, n_warehouses + n_stores):
            n_connections = np.random.randint(2, 5)
            warehouses = np.random.choice(n_warehouses, n_connections, replace=False)
            for wh in warehouses:
                G.add_edge(store, wh, weight=np.random.uniform(20, 100))
        
        return G
    
    @staticmethod
    def create_flight_network(n_airports=50, hub_count=5, seed=42):
        """
        –°—Ç–≤–æ—Ä—é—î –º–µ—Ä–µ–∂—É –∞–≤—ñ–∞—Ä–µ–π—Å—ñ–≤
        –î–æ–º–µ–Ω: –õ–æ–≥—ñ—Å—Ç–∏–∫–∞, –∞–≤—ñ–∞–ø–µ—Ä–µ–≤–µ–∑–µ–Ω–Ω—è
        """
        np.random.seed(seed)
        G = nx.Graph()
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ö–∞–±–∏ (–≤–µ–ª–∏–∫—ñ –∞–µ—Ä–æ–ø–æ—Ä—Ç–∏)
        hubs = list(range(hub_count))
        regular = list(range(hub_count, n_airports))
        
        # –•–∞–±–∏ –∑'—î–¥–Ω–∞–Ω—ñ –º—ñ–∂ —Å–æ–±–æ—é
        for i in hubs:
            G.add_node(i, hub=True)
            for j in hubs:
                if i < j:
                    G.add_edge(i, j, weight=np.random.uniform(100, 500))
        
        # –†–µ–≥—É–ª—è—Ä–Ω—ñ –∞–µ—Ä–æ–ø–æ—Ä—Ç–∏
        for i in regular:
            G.add_node(i, hub=False)
            # –ö–æ–∂–µ–Ω –∑'—î–¥–Ω–∞–Ω–∏–π –∑ 2-4 —Ö–∞–±–∞–º–∏
            connected_hubs = np.random.choice(hubs, np.random.randint(2, 5), replace=False)
            for hub in connected_hubs:
                G.add_edge(i, hub, weight=np.random.uniform(50, 300))
            
            # –î–µ—è–∫—ñ –ø—Ä—è–º—ñ —Ä–µ–π—Å–∏ –º—ñ–∂ —Ä–µ–≥—É–ª—è—Ä–Ω–∏–º–∏
            if np.random.random() < 0.1:
                other = np.random.choice([x for x in regular if x != i])
                if not G.has_edge(i, other):
                    G.add_edge(i, other, weight=np.random.uniform(100, 400))
        
        return G


# %% [markdown]
#  ## 1. Dijkstra's Algorithm
# 
# 
# 
#  ### –û–ø–∏—Å:
# 
#  –ö–ª–∞—Å–∏—á–Ω–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º –ø–æ—à—É–∫—É –Ω–∞–π–∫–æ—Ä–æ—Ç—à–æ–≥–æ —à–ª—è—Ö—É –≤—ñ–¥ –æ–¥–Ω—ñ—î—ó –≤–µ—Ä—à–∏–Ω–∏ –¥–æ –≤—Å—ñ—Ö —ñ–Ω—à–∏—Ö
# 
#  —É –≥—Ä–∞—Ñ—ñ –∑ –Ω–µ–≤—ñ–¥'—î–º–Ω–∏–º–∏ –≤–∞–≥–∞–º–∏ —Ä–µ–±–µ—Ä.
# 
# 
# 
#  ### –°–∫–ª–∞–¥–Ω—ñ—Å—Ç—å:
# 
#  - **–ß–∞—Å–æ–≤–∞**: O(E log V) –∑ –±—ñ–Ω–∞—Ä–Ω–æ—é –∫—É–ø–æ—é, O(E + V log V) –∑ –∫—É–ø–æ—é –§—ñ–±–æ–Ω–∞—á—á—ñ
# 
#  - **–ü—Ä–æ—Å—Ç–æ—Ä–æ–≤–∞**: O(V)
# 
# 
# 
#  ### –ü–µ—Ä–µ–≤–∞–≥–∏:
# 
#  - –ì–∞—Ä–∞–Ω—Ç—É—î –æ–ø—Ç–∏–º–∞–ª—å–Ω–∏–π —à–ª—è—Ö
# 
#  - –ï—Ñ–µ–∫—Ç–∏–≤–Ω–∏–π –¥–ª—è –≥—Ä–∞—Ñ—ñ–≤ –±–µ–∑ –≤—ñ–¥'—î–º–Ω–∏—Ö –≤–∞–≥
# 
#  - –ú–æ–∂–Ω–∞ –∑—É–ø–∏–Ω–∏—Ç–∏ –ø—Ä–∏ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—ñ —Ü—ñ–ª—å–æ–≤–æ—ó –≤–µ—Ä—à–∏–Ω–∏
# 
# 
# 
#  ### –ù–µ–¥–æ–ª—ñ–∫–∏:
# 
#  - –ù–µ –ø—Ä–∞—Ü—é—î –∑ –≤—ñ–¥'—î–º–Ω–∏–º–∏ –≤–∞–≥–∞–º–∏
# 
#  - –î–æ—Å–ª—ñ–¥–∂—É—î –±–∞–≥–∞—Ç–æ –≤–µ—Ä—à–∏–Ω —É –≤—Å—ñ—Ö –Ω–∞–ø—Ä—è–º–∫–∞—Ö

# %%
class DijkstraAlgorithm:
    """–†–µ–∞–ª—ñ–∑–∞—Ü—ñ—è –∞–ª–≥–æ—Ä–∏—Ç–º—É –î–µ–π–∫—Å—Ç—Ä–∏"""
    
    @staticmethod
    def find_shortest_path(graph: nx.Graph, start: int, goal: int) -> PathResult:
        """
        –ó–Ω–∞—Ö–æ–¥–∏—Ç—å –Ω–∞–π–∫–æ—Ä–æ—Ç—à–∏–π —à–ª—è—Ö –≤—ñ–¥ start –¥–æ goal
        """
        start_time = time.perf_counter()
        tracker.reset()
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
        distances = {node: float('inf') for node in graph.nodes()}
        distances[start] = 0
        previous = {node: None for node in graph.nodes()}
        pq = PriorityQueue()
        pq.put(start, 0)
        visited = set()
        
        while not pq.empty():
            current = pq.get()
            
            if current == goal:
                break
            
            if current in visited:
                continue
            
            visited.add(current)
            tracker.visit_node()
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤—Å—ñ—Ö —Å—É—Å—ñ–¥—ñ–≤
            for neighbor in graph.neighbors(current):
                tracker.compare()
                weight = graph[current][neighbor].get('weight', 1)
                distance = distances[current] + weight
                
                if distance < distances[neighbor]:
                    distances[neighbor] = distance
                    previous[neighbor] = current
                    pq.put(neighbor, distance)
        
        # –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —à–ª—è—Ö—É
        path = []
        current = goal
        while current is not None:
            path.append(current)
            current = previous[current]
        path.reverse()
        
        execution_time = (time.perf_counter() - start_time) * 1000
        
        return PathResult(
            path=path if path[0] == start else [],
            distance=distances[goal] if distances[goal] != float('inf') else -1,
            visited_nodes=tracker.visited_count,
            execution_time=execution_time,
            algorithm="Dijkstra"
        )
    
    @staticmethod
    def find_all_shortest_paths(graph: nx.Graph, start: int) -> Dict[int, float]:
        """
        –ó–Ω–∞—Ö–æ–¥–∏—Ç—å –Ω–∞–π–∫–æ—Ä–æ—Ç—à—ñ —à–ª—è—Ö–∏ –≤—ñ–¥ start –¥–æ –≤—Å—ñ—Ö —ñ–Ω—à–∏—Ö –≤–µ—Ä—à–∏–Ω
        """
        distances = {node: float('inf') for node in graph.nodes()}
        distances[start] = 0
        pq = PriorityQueue()
        pq.put(start, 0)
        visited = set()
        
        while not pq.empty():
            current = pq.get()
            
            if current in visited:
                continue
            
            visited.add(current)
            
            for neighbor in graph.neighbors(current):
                weight = graph[current][neighbor].get('weight', 1)
                distance = distances[current] + weight
                
                if distance < distances[neighbor]:
                    distances[neighbor] = distance
                    pq.put(neighbor, distance)
        
        return distances


# %%
def test_dijkstra_scenarios():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è Dijkstra –Ω–∞ —Ä—ñ–∑–Ω–∏—Ö —Å—Ü–µ–Ω–∞—Ä—ñ—è—Ö"""
    print("\nüîç –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ê–õ–ì–û–†–ò–¢–ú–£ –î–ï–ô–ö–°–¢–†–ò")
    print("=" * 80)
    
    scenarios = [
        ("–ú—ñ—Å—å–∫–∞ –¥–æ—Ä–æ–∂–Ω—è –º–µ—Ä–µ–∂–∞", *GraphGenerator.create_city_road_network(50)),
        ("–°–æ—Ü—ñ–∞–ª—å–Ω–∞ –º–µ—Ä–µ–∂–∞", GraphGenerator.create_social_network(100), None),
        ("–ú–µ—Ä–µ–∂–∞ –∞–≤—ñ–∞—Ä–µ–π—Å—ñ–≤", GraphGenerator.create_flight_network(50), None),
        ("–õ–æ–≥—ñ—Å—Ç–∏—á–Ω–∞ –º–µ—Ä–µ–∂–∞", GraphGenerator.create_logistics_network(30, 40), None),
    ]
    
    results = []
    
    for name, graph, positions in scenarios:
        print(f"\nüìä –°—Ü–µ–Ω–∞—Ä—ñ–π: {name}")
        print(f"   –í–µ—Ä—à–∏–Ω: {graph.number_of_nodes()}, –†–µ–±–µ—Ä: {graph.number_of_edges()}")
        
        # –í–∏–±–∏—Ä–∞—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤—ñ start —ñ goal
        nodes = list(graph.nodes())
        start, goal = np.random.choice(nodes, 2, replace=False)
        
        result = DijkstraAlgorithm.find_shortest_path(graph, start, goal)
        
        print(f"   –®–ª—è—Ö: {start} ‚Üí {goal}")
        print(f"   –í—ñ–¥—Å—Ç–∞–Ω—å: {result.distance:.2f}")
        print(f"   –í—ñ–¥–≤—ñ–¥–∞–Ω–æ –≤—É–∑–ª—ñ–≤: {result.visited_nodes}")
        print(f"   –ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: {result.execution_time:.3f}ms")
        print(f"   –î–æ–≤–∂–∏–Ω–∞ —à–ª—è—Ö—É: {len(result.path)} –≤—É–∑–ª—ñ–≤")
        
        results.append({
            'Scenario': name,
            'Nodes': graph.number_of_nodes(),
            'Edges': graph.number_of_edges(),
            'Distance': result.distance,
            'Visited': result.visited_nodes,
            'Time (ms)': result.execution_time
        })
    
    return pd.DataFrame(results)

dijkstra_results = test_dijkstra_scenarios()


# %% [markdown]
#  ## 2. A* Algorithm
# 
# 
# 
#  ### –û–ø–∏—Å:
# 
#  –ï–≤—Ä–∏—Å—Ç–∏—á–Ω–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º –ø–æ—à—É–∫—É, —â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î —Ñ—É–Ω–∫—Ü—ñ—é –æ—Ü—ñ–Ω–∫–∏ f(n) = g(n) + h(n),
# 
#  –¥–µ g(n) - —Ñ–∞–∫—Ç–∏—á–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å —à–ª—è—Ö—É, h(n) - –µ–≤—Ä–∏—Å—Ç–∏—á–Ω–∞ –æ—Ü—ñ–Ω–∫–∞ –¥–æ —Ü—ñ–ª—ñ.
# 
# 
# 
#  ### –°–∫–ª–∞–¥–Ω—ñ—Å—Ç—å:
# 
#  - **–ß–∞—Å–æ–≤–∞**: O(E) —É —Å–µ—Ä–µ–¥–Ω—å–æ–º—É (–∑–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ –µ–≤—Ä–∏—Å—Ç–∏–∫–∏)
# 
#  - **–ü—Ä–æ—Å—Ç–æ—Ä–æ–≤–∞**: O(V)
# 
# 
# 
#  ### –ü–µ—Ä–µ–≤–∞–≥–∏:
# 
#  - –ó–Ω–∞—á–Ω–æ —à–≤–∏–¥—à–µ –Ω—ñ–∂ Dijkstra –ø—Ä–∏ —Ö–æ—Ä–æ—à—ñ–π –µ–≤—Ä–∏—Å—Ç–∏—Ü—ñ
# 
#  - –û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π –ø—Ä–∏ –¥–æ–ø—É—Å—Ç–∏–º—ñ–π –µ–≤—Ä–∏—Å—Ç–∏—Ü—ñ (h(n) ‚â§ —Ä–µ–∞–ª—å–Ω–∞ –≤—ñ–¥—Å—Ç–∞–Ω—å)
# 
#  - –Ü–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ä–æ–≤–æ–≥–æ –ø–æ—à—É–∫—É
# 
# 
# 
#  ### –ù–µ–¥–æ–ª—ñ–∫–∏:
# 
#  - –ü–æ—Ç—Ä–µ–±—É—î –µ–≤—Ä–∏—Å—Ç–∏—á–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó
# 
#  - –Ø–∫—ñ—Å—Ç—å –∑–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ —è–∫–æ—Å—Ç—ñ –µ–≤—Ä–∏—Å—Ç–∏–∫–∏

# %%
class AStarAlgorithm:
    """–†–µ–∞–ª—ñ–∑–∞—Ü—ñ—è –∞–ª–≥–æ—Ä–∏—Ç–º—É A*"""
    
    @staticmethod
    def manhattan_distance(pos1, pos2):
        """–ú–∞–Ω—Ö–µ—Ç—Ç–µ–Ω—Å—å–∫–∞ –≤—ñ–¥—Å—Ç–∞–Ω—å (–¥–ª—è —Å—ñ—Ç–æ–∫)"""
        return abs(pos1[0] - pos2[0]) + abs(pos1[1] - pos2[1])
    
    @staticmethod
    def euclidean_distance(pos1, pos2):
        """–ï–≤–∫–ª—ñ–¥–æ–≤–∞ –≤—ñ–¥—Å—Ç–∞–Ω—å (–¥–ª—è –≥–µ–æ–≥—Ä–∞—Ñ—ñ—á–Ω–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç)"""
        return np.sqrt((pos1[0] - pos2[0])**2 + (pos1[1] - pos2[1])**2)
    
    @staticmethod
    def find_shortest_path(graph: nx.Graph, start: int, goal: int, 
                          positions: Dict = None, heuristic: str = 'euclidean') -> PathResult:
        """
        –ó–Ω–∞—Ö–æ–¥–∏—Ç—å –Ω–∞–π–∫–æ—Ä–æ—Ç—à–∏–π —à–ª—è—Ö –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ A*
        """
        start_time = time.perf_counter()
        tracker.reset()
        
        # –í–∏–±—ñ—Ä –µ–≤—Ä–∏—Å—Ç–∏–∫–∏
        if positions is None:
            # –Ø–∫—â–æ –Ω–µ–º–∞—î –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω—É–ª—å–æ–≤—É –µ–≤—Ä–∏—Å—Ç–∏–∫—É (A* = Dijkstra)
            heuristic_func = lambda n: 0
        else:
            if heuristic == 'manhattan':
                heuristic_func = lambda n: AStarAlgorithm.manhattan_distance(
                    positions.get(n, (0, 0)), positions.get(goal, (0, 0))
                )
            else:  # euclidean
                heuristic_func = lambda n: AStarAlgorithm.euclidean_distance(
                    positions.get(n, (0, 0)), positions.get(goal, (0, 0))
                )
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
        g_score = {node: float('inf') for node in graph.nodes()}
        g_score[start] = 0
        
        f_score = {node: float('inf') for node in graph.nodes()}
        f_score[start] = heuristic_func(start)
        
        previous = {node: None for node in graph.nodes()}
        pq = PriorityQueue()
        pq.put(start, f_score[start])
        visited = set()
        
        while not pq.empty():
            current = pq.get()
            
            if current == goal:
                break
            
            if current in visited:
                continue
            
            visited.add(current)
            tracker.visit_node()
            
            for neighbor in graph.neighbors(current):
                tracker.compare()
                weight = graph[current][neighbor].get('weight', 1)
                tentative_g_score = g_score[current] + weight
                
                if tentative_g_score < g_score[neighbor]:
                    previous[neighbor] = current
                    g_score[neighbor] = tentative_g_score
                    f_score[neighbor] = g_score[neighbor] + heuristic_func(neighbor)
                    pq.put(neighbor, f_score[neighbor])
        
        # –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —à–ª—è—Ö—É
        path = []
        current = goal
        while current is not None:
            path.append(current)
            current = previous[current]
        path.reverse()
        
        execution_time = (time.perf_counter() - start_time) * 1000
        
        return PathResult(
            path=path if path and path[0] == start else [],
            distance=g_score[goal] if g_score[goal] != float('inf') else -1,
            visited_nodes=tracker.visited_count,
            execution_time=execution_time,
            algorithm="A*"
        )


# %%
def test_astar_vs_dijkstra():
    """–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è A* –∑ Dijkstra"""
    print("\n‚ö° –ü–û–†–Ü–í–ù–Ø–ù–ù–Ø A* vs DIJKSTRA")
    print("=" * 80)
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –≥—Ä–∞—Ñ –º—ñ—Å—Ç–∞ –∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
    graph, positions = GraphGenerator.create_city_road_network(100, 0.12)
    
    nodes = list(graph.nodes())
    start, goal = nodes[0], nodes[-1]
    
    print(f"\n–ì—Ä–∞—Ñ: {graph.number_of_nodes()} –≤—É–∑–ª—ñ–≤, {graph.number_of_edges()} —Ä–µ–±–µ—Ä")
    print(f"–ú–∞—Ä—à—Ä—É—Ç: {start} ‚Üí {goal}")
    print(f"–ü—Ä—è–º–∞ –≤—ñ–¥—Å—Ç–∞–Ω—å: {AStarAlgorithm.euclidean_distance(positions[start], positions[goal]):.2f}")
    
    # Dijkstra
    result_dijkstra = DijkstraAlgorithm.find_shortest_path(graph, start, goal)
    
    # A* –∑ –µ–≤–∫–ª—ñ–¥–æ–≤–æ—é –µ–≤—Ä–∏—Å—Ç–∏–∫–æ—é
    result_astar_euclidean = AStarAlgorithm.find_shortest_path(
        graph, start, goal, positions, 'euclidean'
    )
    
    # A* –∑ –º–∞–Ω—Ö–µ—Ç—Ç–µ–Ω—Å—å–∫–æ—é –µ–≤—Ä–∏—Å—Ç–∏–∫–æ—é
    result_astar_manhattan = AStarAlgorithm.find_shortest_path(
        graph, start, goal, positions, 'manhattan'
    )
    
    comparison = pd.DataFrame([
        {
            'Algorithm': 'Dijkstra',
            'Distance': result_dijkstra.distance,
            'Visited Nodes': result_dijkstra.visited_nodes,
            'Time (ms)': result_dijkstra.execution_time,
            'Path Length': len(result_dijkstra.path)
        },
        {
            'Algorithm': 'A* (Euclidean)',
            'Distance': result_astar_euclidean.distance,
            'Visited Nodes': result_astar_euclidean.visited_nodes,
            'Time (ms)': result_astar_euclidean.execution_time,
            'Path Length': len(result_astar_euclidean.path)
        },
        {
            'Algorithm': 'A* (Manhattan)',
            'Distance': result_astar_manhattan.distance,
            'Visited Nodes': result_astar_manhattan.visited_nodes,
            'Time (ms)': result_astar_manhattan.execution_time,
            'Path Length': len(result_astar_manhattan.path)
        }
    ])
    
    print("\n" + comparison.to_string(index=False))
    
    # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –ø—Ä–∏—Å–∫–æ—Ä–µ–Ω–Ω—è
    speedup_euclidean = result_dijkstra.visited_nodes / result_astar_euclidean.visited_nodes
    speedup_manhattan = result_dijkstra.visited_nodes / result_astar_manhattan.visited_nodes
    
    print(f"\nüìà –ü—Ä–∏—Å–∫–æ—Ä–µ–Ω–Ω—è A* (Euclidean): {speedup_euclidean:.2f}x –º–µ–Ω—à–µ –≤—É–∑–ª—ñ–≤")
    print(f"üìà –ü—Ä–∏—Å–∫–æ—Ä–µ–Ω–Ω—è A* (Manhattan): {speedup_manhattan:.2f}x –º–µ–Ω—à–µ –≤—É–∑–ª—ñ–≤")
    
    return comparison

astar_comparison = test_astar_vs_dijkstra()


# %% [markdown]
#  ## 3. Bellman-Ford Algorithm
# 
# 
# 
#  ### –û–ø–∏—Å:
# 
#  –ê–ª–≥–æ—Ä–∏—Ç–º, —â–æ –ø—Ä–∞—Ü—é—î –∑ –≤—ñ–¥'—î–º–Ω–∏–º–∏ –≤–∞–≥–∞–º–∏ —Ç–∞ –≤–∏—è–≤–ª—è—î –≤—ñ–¥'—î–º–Ω—ñ —Ü–∏–∫–ª–∏.
# 
#  –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –¥–∏–Ω–∞–º—ñ—á–Ω–µ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è.
# 
# 
# 
#  ### –°–∫–ª–∞–¥–Ω—ñ—Å—Ç—å:
# 
#  - **–ß–∞—Å–æ–≤–∞**: O(V¬∑E)
# 
#  - **–ü—Ä–æ—Å—Ç–æ—Ä–æ–≤–∞**: O(V)
# 
# 
# 
#  ### –ü–µ—Ä–µ–≤–∞–≥–∏:
# 
#  - –ü—Ä–∞—Ü—é—î –∑ –≤—ñ–¥'—î–º–Ω–∏–º–∏ –≤–∞–≥–∞–º–∏
# 
#  - –í–∏—è–≤–ª—è—î –≤—ñ–¥'—î–º–Ω—ñ —Ü–∏–∫–ª–∏
# 
#  - –ü—Ä–æ—Å—Ç–∏–π —É —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—ó
# 
# 
# 
#  ### –ù–µ–¥–æ–ª—ñ–∫–∏:
# 
#  - –ü–æ–≤—ñ–ª—å–Ω—ñ—à–∏–π –∑–∞ Dijkstra
# 
#  - –ù–µ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å –¥–ª—è –≤–µ–ª–∏–∫–∏—Ö –≥—Ä–∞—Ñ—ñ–≤

# %%
# class PathResult:
#     def __init__(self, path, distance, visited_nodes, execution_time, algorithm):
#         self.path = path
#         self.distance = distance
#         self.visited_nodes = visited_nodes
#         self.execution_time = execution_time
#         self.algorithm = algorithm

# class Tracker:
#     def __init__(self):
#         self.visited_count = 0
#         self.compare_count = 0

#     def reset(self):
#         self.visited_count = 0
#         self.compare_count = 0

#     def visit_node(self):
#         self.visited_count += 1

#     def compare(self):
#         self.compare_count += 1

# tracker = Tracker()

# class BellmanFordAlgorithm:
#     """–†–µ–∞–ª—ñ–∑–∞—Ü—ñ—è –∞–ª–≥–æ—Ä–∏—Ç–º—É –ë–µ–ª–ª–º–∞–Ω–∞-–§–æ—Ä–¥–∞"""
    
#     @staticmethod
#     def find_shortest_path(graph: nx.Graph, start: int, goal: int) -> Tuple[PathResult, bool]:
#         """
#         –ó–Ω–∞—Ö–æ–¥–∏—Ç—å –Ω–∞–π–∫–æ—Ä–æ—Ç—à–∏–π —à–ª—è—Ö, –ø—Ä–∞—Ü—é—î –∑ –≤—ñ–¥'—î–º–Ω–∏–º–∏ –≤–∞–≥–∞–º–∏
#         –ü–æ–≤–µ—Ä—Ç–∞—î (PathResult, has_negative_cycle)
#         """
#         start_time = time.perf_counter()
#         tracker.reset()
        
#         # –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –Ω–µ–æ—Ä—ñ—î–Ω—Ç–æ–≤–∞–Ω–∏–π –≥—Ä–∞—Ñ –Ω–∞ –æ—Ä—ñ—î–Ω—Ç–æ–≤–∞–Ω–∏–π –¥–ª—è Bellman-Ford
#         # –ö–æ–∂–Ω–µ —Ä–µ–±—Ä–æ {u,v} —Å—Ç–∞—î –¥–≤–æ–º–∞ —Ä–µ–±—Ä–∞–º–∏ (u,v) —ñ (v,u)
#         directed_graph = nx.DiGraph()
#         for u, v, data in graph.edges(data=True):
#             weight = data.get('weight', 1)
#             directed_graph.add_edge(u, v, weight=weight)
#             directed_graph.add_edge(v, u, weight=weight)
        
#         nodes = list(directed_graph.nodes())
        
#         # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
#         distances = {node: float('inf') for node in nodes}
#         distances[start] = 0
#         previous = {node: None for node in nodes}
        
#         # –†–µ–ª–∞–∫—Å–∞—Ü—ñ—è —Ä–µ–±–µ—Ä V-1 —Ä–∞–∑—ñ–≤
#         for _ in range(len(nodes) - 1):
#             tracker.visit_node()
#             for u, v in directed_graph.edges():
#                 tracker.compare()
#                 weight = directed_graph[u][v].get('weight', 1)
                
#                 if distances[u] != float('inf') and distances[u] + weight < distances[v]:
#                     distances[v] = distances[u] + weight
#                     previous[v] = u
        
#         # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –≤—ñ–¥'—î–º–Ω—ñ —Ü–∏–∫–ª–∏
#         has_negative_cycle = False
#         for u, v in directed_graph.edges():
#             weight = directed_graph[u][v].get('weight', 1)
#             if distances[u] != float('inf') and distances[u] + weight < distances[v]:
#                 has_negative_cycle = True
#                 break
        
#         # –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —à–ª—è—Ö—É
#         path = []
#         current = goal
#         while current is not None:
#             path.append(current)
#             current = previous[current]
#         path.reverse()
        
#         execution_time = (time.perf_counter() - start_time) * 1000
        
#         return PathResult(
#             path=path if path and path[0] == start else [],
#             distance=distances[goal] if distances[goal] != float('inf') else -1,
#             visited_nodes=tracker.visited_count,
#             execution_time=execution_time,
#             algorithm="Bellman-Ford"
#         ), has_negative_cycle

# %%
# def test_bellman_ford_with_negative_weights():
#     """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è Bellman-Ford –∑ –≤—ñ–¥'—î–º–Ω–∏–º–∏ –≤–∞–≥–∞–º–∏"""
#     print("\n‚öñÔ∏è –¢–ï–°–¢–£–í–ê–ù–ù–Ø BELLMAN-FORD –ó –í–Ü–î'–Ñ–ú–ù–ò–ú–ò –í–ê–ì–ê–ú–ò")
#     print("=" * 80)
    
#     # –°—Ç–≤–æ—Ä—é—î–º–æ –≥—Ä–∞—Ñ –∑ –≤—ñ–¥'—î–º–Ω–∏–º–∏ –≤–∞–≥–∞–º–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –∞—Ä–±—ñ—Ç—Ä–∞–∂ –≤–∞–ª—é—Ç)
#     G = nx.Graph()
    
#     # –î–æ–¥–∞—î–º–æ –≤–∞–ª—é—Ç–Ω—ñ –ø–∞—Ä–∏ –∑ "–ø—Ä–∏–±—É—Ç–∫–æ–º/–≤–∏—Ç—Ä–∞—Ç–∞–º–∏"
#     currencies = ['USD', 'EUR', 'GBP', 'JPY', 'CHF']
#     currency_map = {curr: i for i, curr in enumerate(currencies)}
    
#     # –î–æ–¥–∞—î–º–æ —Ä–µ–±—Ä–∞ (–æ–±–º—ñ–Ω–Ω—ñ –∫—É—Ä—Å–∏ –∑ –º–æ–∂–ª–∏–≤–∏–º –ø—Ä–∏–±—É—Ç–∫–æ–º/–∑–±–∏—Ç–∫–æ–º)
#     exchanges = [
#         ('USD', 'EUR', -0.02),  # –ù–µ–≤–µ–ª–∏–∫–∞ –∫–æ–º—ñ—Å—ñ—è
#         ('EUR', 'GBP', 0.05),   # –ü—Ä–∏–±—É—Ç–æ–∫
#         ('GBP', 'JPY', -0.03),
#         ('JPY', 'CHF', 0.02),
#         ('CHF', 'USD', -0.01),
#         ('USD', 'GBP', -0.04),
#         ('EUR', 'JPY', 0.01),
#         ('GBP', 'CHF', -0.02),
#     ]
    
#     for curr1, curr2, rate in exchanges:
#         G.add_edge(currency_map[curr1], currency_map[curr2], weight=rate)
    
#     print("\n–°—Ü–µ–Ω–∞—Ä—ñ–π: –ê—Ä–±—ñ—Ç—Ä–∞–∂ –≤–∞–ª—é—Ç (–≤—ñ–¥'—î–º–Ω—ñ –≤–∞–≥–∏ = –ø—Ä–∏–±—É—Ç–æ–∫)")
#     print(f"–í–∞–ª—é—Ç–∏: {currencies}")
#     print(f"–û–±–º—ñ–Ω–Ω–∏—Ö –ø–∞—Ä: {G.number_of_edges()}")
    
#     start = currency_map['USD']
#     goal = currency_map['EUR']
    
#     result, has_negative_cycle = BellmanFordAlgorithm.find_shortest_path(G, start, goal)
    
#     print(f"\n–ú–∞—Ä—à—Ä—É—Ç: USD ‚Üí EUR")
#     print(f"–û–ø—Ç–∏–º–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å: {result.distance:.4f}")
#     print(f"–®–ª—è—Ö: {' ‚Üí '.join([currencies[i] for i in result.path])}")
#     print(f"–í–∏—è–≤–ª–µ–Ω–æ –≤—ñ–¥'—î–º–Ω–∏–π —Ü–∏–∫–ª: {'–¢–∞–∫ (–º–æ–∂–ª–∏–≤–∏–π –∞—Ä–±—ñ—Ç—Ä–∞–∂!)' if has_negative_cycle else '–ù—ñ'}")
#     print(f"–ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: {result.execution_time:.3f}ms")
    
#     return result, has_negative_cycle

# bellman_ford_result = test_bellman_ford_with_negative_weights()


# %% [markdown]
#  ## 4. Floyd-Warshall Algorithm
# 
# 
# 
#  ### –û–ø–∏—Å:
# 
#  –ó–Ω–∞—Ö–æ–¥–∏—Ç—å –Ω–∞–π–∫–æ—Ä–æ—Ç—à—ñ —à–ª—è—Ö–∏ –º—ñ–∂ —É—Å—ñ–º–∞ –ø–∞—Ä–∞–º–∏ –≤–µ—Ä—à–∏–Ω.
# 
#  –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –¥–∏–Ω–∞–º—ñ—á–Ω–µ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è.
# 
# 
# 
#  ### –°–∫–ª–∞–¥–Ω—ñ—Å—Ç—å:
# 
#  - **–ß–∞—Å–æ–≤–∞**: O(V¬≥)
# 
#  - **–ü—Ä–æ—Å—Ç–æ—Ä–æ–≤–∞**: O(V¬≤)
# 
# 
# 
#  ### –ü–µ—Ä–µ–≤–∞–≥–∏:
# 
#  - –ó–Ω–∞—Ö–æ–¥–∏—Ç—å –≤—Å—ñ —à–ª—è—Ö–∏ –∑–∞ –æ–¥–∏–Ω –ø—Ä–æ—Ö—ñ–¥
# 
#  - –ü—Ä–∞—Ü—é—î –∑ –≤—ñ–¥'—î–º–Ω–∏–º–∏ –≤–∞–≥–∞–º–∏
# 
#  - –ü—Ä–æ—Å—Ç–∞ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è
# 
# 
# 
#  ### –ù–µ–¥–æ–ª—ñ–∫–∏:
# 
#  - –ö—É–±—ñ—á–Ω–∞ —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å
# 
#  - –í–µ–ª–∏–∫—ñ –≤–∏–º–æ–≥–∏ –¥–æ –ø–∞–º'—è—Ç—ñ
# 
#  - –ù–µ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å –¥–ª—è –≤–µ–ª–∏–∫–∏—Ö –≥—Ä–∞—Ñ—ñ–≤ (>500 –≤—É–∑–ª—ñ–≤)

# %%
class FloydWarshallAlgorithm:
    """–†–µ–∞–ª—ñ–∑–∞—Ü—ñ—è –∞–ª–≥–æ—Ä–∏—Ç–º—É –§–ª–æ–π–¥–∞-–í–æ—Ä—à–µ–ª–ª–∞"""
    
    @staticmethod
    def find_all_shortest_paths(graph: nx.Graph) -> Tuple[np.ndarray, np.ndarray, float]:
        """
        –ó–Ω–∞—Ö–æ–¥–∏—Ç—å –Ω–∞–π–∫–æ—Ä–æ—Ç—à—ñ —à–ª—è—Ö–∏ –º—ñ–∂ —É—Å—ñ–º–∞ –ø–∞—Ä–∞–º–∏ –≤–µ—Ä—à–∏–Ω
        –ü–æ–≤–µ—Ä—Ç–∞—î (–º–∞—Ç—Ä–∏—Ü—è_–≤—ñ–¥—Å—Ç–∞–Ω–µ–π, –º–∞—Ç—Ä–∏—Ü—è_–Ω–∞—Å—Ç—É–ø–Ω–∏—Ö_–≤–µ—Ä—à–∏–Ω, —á–∞—Å_–≤–∏–∫–æ–Ω–∞–Ω–Ω—è)
        """
        start_time = time.perf_counter()
        
        nodes = list(graph.nodes())
        n = len(nodes)
        node_index = {node: i for i, node in enumerate(nodes)}
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–∞—Ç—Ä–∏—Ü—å
        dist = np.full((n, n), np.inf)
        next_node = np.full((n, n), -1, dtype=int)
        
        # –í—ñ–¥—Å—Ç–∞–Ω—å –≤—ñ–¥ –≤–µ—Ä—à–∏–Ω–∏ –¥–æ —Å–µ–±–µ = 0
        for i in range(n):
            dist[i][i] = 0
        
        # –ó–∞–ø–æ–≤–Ω—é—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤—ñ –≤—ñ–¥—Å—Ç–∞–Ω—ñ –∑ –≥—Ä–∞—Ñ—É
        for u, v in graph.edges():
            i, j = node_index[u], node_index[v]
            weight = graph[u][v].get('weight', 1)
            dist[i][j] = weight
            dist[j][i] = weight  # –î–ª—è –Ω–µ–æ—Ä—ñ—î–Ω—Ç–æ–≤–∞–Ω–æ–≥–æ –≥—Ä–∞—Ñ—É
            next_node[i][j] = j
            next_node[j][i] = i
        
        # –û—Å–Ω–æ–≤–Ω–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º Floyd-Warshall
        for k in range(n):
            for i in range(n):
                for j in range(n):
                    if dist[i][k] + dist[k][j] < dist[i][j]:
                        dist[i][j] = dist[i][k] + dist[k][j]
                        next_node[i][j] = next_node[i][k]
        
        execution_time = (time.perf_counter() - start_time) * 1000
        
        return dist, next_node, execution_time, node_index
    
    @staticmethod
    def reconstruct_path(next_node: np.ndarray, node_index: Dict, start: int, goal: int) -> List[int]:
        """–í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —à–ª—è—Ö—É –∑ –º–∞—Ç—Ä–∏—Ü—ñ next_node"""
        if next_node[node_index[start]][node_index[goal]] == -1:
            return []
        
        path = [start]
        current = start
        while current != goal:
            current = next_node[node_index[current]][node_index[goal]]
            if current == -1:
                return []
            # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –≤—É–∑–æ–ª –∑ —ñ–Ω–¥–µ–∫—Å—É
            current = [k for k, v in node_index.items() if v == current][0]
            path.append(current)
        
        return path


# %%
def test_floyd_warshall_applications():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è Floyd-Warshall –Ω–∞ —Ä—ñ–∑–Ω–∏—Ö –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è—Ö"""
    print("\nüåê –¢–ï–°–¢–£–í–ê–ù–ù–Ø FLOYD-WARSHALL (–í–°–Ü –ü–ê–†–ò –®–õ–Ø–•–Ü–í)")
    print("=" * 80)
    
    # –°—Ü–µ–Ω–∞—Ä—ñ–π 1: –ú–∞–ª–∞ –º–µ—Ä–µ–∂–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
    print("\nüì¶ –°—Ü–µ–Ω–∞—Ä—ñ–π 1: –ú–µ—Ä–µ–∂–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ (–≤—Å—ñ –≤—ñ–¥—Å—Ç–∞–Ω—ñ –º—ñ–∂ —Ç–æ—á–∫–∞–º–∏)")
    G_delivery = GraphGenerator.create_logistics_network(n_warehouses=8, n_stores=12)
    
    dist, next_node, exec_time, node_index = FloydWarshallAlgorithm.find_all_shortest_paths(G_delivery)
    
    print(f"–í—É–∑–ª—ñ–≤: {len(G_delivery.nodes())}")
    print(f"–ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: {exec_time:.2f}ms")
    print(f"–û–±—á–∏—Å–ª–µ–Ω–æ {len(G_delivery.nodes())**2} –ø–∞—Ä –≤—ñ–¥—Å—Ç–∞–Ω–µ–π")
    
    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –Ω–∞–π–¥–æ–≤—à—É –Ω–∞–π–∫–æ—Ä–æ—Ç—à—É –≤—ñ–¥—Å—Ç–∞–Ω—å (–¥—ñ–∞–º–µ—Ç—Ä –≥—Ä–∞—Ñ—É)
    max_dist = np.max(dist[dist != np.inf])
    print(f"–î—ñ–∞–º–µ—Ç—Ä –º–µ—Ä–µ–∂—ñ (–Ω–∞–π–¥–æ–≤—à–∞ –≤—ñ–¥—Å—Ç–∞–Ω—å): {max_dist:.2f}")
    
    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–∏–π –≤—É–∑–æ–ª (–∑ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ—é –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—é –≤—ñ–¥—Å—Ç–∞–Ω–Ω—é)
    max_distances = np.max(dist, axis=1)
    max_distances[max_distances == np.inf] = np.nan
    central_node_idx = np.nanargmin(max_distances)
    central_node = [k for k, v in node_index.items() if v == central_node_idx][0]
    print(f"–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∏–π –≤—É–∑–æ–ª (–æ–ø—Ç–∏–º–∞–ª—å–Ω–∏–π –¥–ª—è —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è): {central_node}")
    
    # –°—Ü–µ–Ω–∞—Ä—ñ–π 2: –°–æ—Ü—ñ–∞–ª—å–Ω–∞ –º–µ—Ä–µ–∂–∞ - —Å—Ç—É–ø–µ–Ω—ñ —Ä–æ–∑–¥—ñ–ª–µ–Ω–Ω—è
    print("\nüë• –°—Ü–µ–Ω–∞—Ä—ñ–π 2: –°–æ—Ü—ñ–∞–ª—å–Ω–∞ –º–µ—Ä–µ–∂–∞ (—Å—Ç—É–ø–µ–Ω—ñ —Ä–æ–∑–¥—ñ–ª–µ–Ω–Ω—è)")
    G_social = GraphGenerator.create_social_network(n_users=50, avg_friends=6)
    
    dist_social, _, exec_time_social, node_index_social = FloydWarshallAlgorithm.find_all_shortest_paths(G_social)
    
    # –ü—ñ–¥—Ä–∞—Ö–æ–≤—É—î–º–æ —Ä–æ–∑–ø–æ–¥—ñ–ª —Å—Ç—É–ø–µ–Ω—ñ–≤ —Ä–æ–∑–¥—ñ–ª–µ–Ω–Ω—è
    separation_degrees = dist_social[dist_social != np.inf]
    separation_degrees = separation_degrees[separation_degrees != 0]
    
    print(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {len(G_social.nodes())}")
    print(f"–ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: {exec_time_social:.2f}ms")
    print(f"–°–µ—Ä–µ–¥–Ω—ñ–π —Å—Ç—É–ø—ñ–Ω—å —Ä–æ–∑–¥—ñ–ª–µ–Ω–Ω—è: {np.mean(separation_degrees):.2f}")
    print(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —Å—Ç—É–ø—ñ–Ω—å —Ä–æ–∑–¥—ñ–ª–µ–Ω–Ω—è: {int(np.max(separation_degrees))}")
    
    # –†–æ–∑–ø–æ–¥—ñ–ª —Å—Ç—É–ø–µ–Ω—ñ–≤
    unique, counts = np.unique(separation_degrees.astype(int), return_counts=True)
    print("\n–†–æ–∑–ø–æ–¥—ñ–ª —Å—Ç—É–ø–µ–Ω—ñ–≤ —Ä–æ–∑–¥—ñ–ª–µ–Ω–Ω—è:")
    for degree, count in zip(unique, counts):
        print(f"  {degree} —Å—Ç—É–ø—ñ–Ω—å: {count} –ø–∞—Ä ({count/len(separation_degrees)*100:.1f}%)")
    
    return dist, dist_social

floyd_warshall_results = test_floyd_warshall_applications()


# %% [markdown]
#  ## 5. Bidirectional Search
# 
# 
# 
#  ### –û–ø–∏—Å:
# 
#  –í–∏–∫–æ–Ω—É—î –ø–æ—à—É–∫ –æ–¥–Ω–æ—á–∞—Å–Ω–æ –≤—ñ–¥ –ø–æ—á–∞—Ç–∫–æ–≤–æ—ó —Ç–∞ –∫—ñ–Ω—Ü–µ–≤–æ—ó –≤–µ—Ä—à–∏–Ω,
# 
#  –∑—É—Å—Ç—Ä—ñ—á–∞—é—á–∏—Å—å –ø–æ—Å–µ—Ä–µ–¥–∏–Ω—ñ.
# 
# 
# 
#  ### –°–∫–ª–∞–¥–Ω—ñ—Å—Ç—å:
# 
#  - **–ß–∞—Å–æ–≤–∞**: O(b^(d/2)) –¥–µ b - —Ñ–∞–∫—Ç–æ—Ä —Ä–æ–∑–≥–∞–ª—É–∂–µ–Ω–Ω—è, d - –≥–ª–∏–±–∏–Ω–∞
# 
#  - **–ü—Ä–æ—Å—Ç–æ—Ä–æ–≤–∞**: O(b^(d/2))
# 
# 
# 
#  ### –ü–µ—Ä–µ–≤–∞–≥–∏:
# 
#  - –ó–Ω–∞—á–Ω–æ —à–≤–∏–¥—à–µ –∑–∞ –æ–¥–Ω–æ—Å–ø—Ä—è–º–æ–≤–∞–Ω–∏–π –ø–æ—à—É–∫
# 
#  - –ó–º–µ–Ω—à—É—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤—ñ–¥–≤—ñ–¥–∞–Ω–∏—Ö –≤—É–∑–ª—ñ–≤ –µ–∫—Å–ø–æ–Ω–µ–Ω—Ü—ñ–π–Ω–æ
# 
# 
# 
#  ### –ù–µ–¥–æ–ª—ñ–∫–∏:
# 
#  - –ü–æ—Ç—Ä—ñ–±–Ω–æ –∑–Ω–∞—Ç–∏ –∫—ñ–Ω—Ü–µ–≤—É –≤–µ—Ä—à–∏–Ω—É
# 
#  - –°–∫–ª–∞–¥–Ω—ñ—à–∞ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è
# 
#  - –ü–æ—Ç—Ä–µ–±—É—î –±—ñ–ª—å—à–µ –ø–∞–º'—è—Ç—ñ

# %%
class BidirectionalSearch:
    """–†–µ–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–≤–æ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–æ–≥–æ –ø–æ—à—É–∫—É"""
    
    @staticmethod
    def find_shortest_path(graph: nx.Graph, start: int, goal: int) -> PathResult:
        """
        –î–≤–æ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –ø–æ—à—É–∫ –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º BFS
        """
        start_time = time.perf_counter()
        tracker.reset()
        
        if start == goal:
            return PathResult([start], 0, 1, 0, "Bidirectional")
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–ª—è –ø–æ—à—É–∫—É –∑ –ø–æ—á–∞—Ç–∫—É
        queue_start = deque([start])
        visited_start = {start: None}
        dist_start = {start: 0}
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–ª—è –ø–æ—à—É–∫—É –∑ –∫—ñ–Ω—Ü—è
        queue_goal = deque([goal])
        visited_goal = {goal: None}
        dist_goal = {goal: 0}
        
        # –¢–æ—á–∫–∞ –∑—É—Å—Ç—Ä—ñ—á—ñ
        meeting_node = None
        
        while queue_start and queue_goal:
            # –ö—Ä–æ–∫ –∑ –ø–æ—á–∞—Ç–∫—É
            if queue_start:
                current_start = queue_start.popleft()
                tracker.visit_node()
                
                for neighbor in graph.neighbors(current_start):
                    if neighbor not in visited_start:
                        visited_start[neighbor] = current_start
                        weight = graph[current_start][neighbor].get('weight', 1)
                        dist_start[neighbor] = dist_start[current_start] + weight
                        queue_start.append(neighbor)
                        
                        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –∑—É—Å—Ç—Ä—ñ—á
                        if neighbor in visited_goal:
                            meeting_node = neighbor
                            break
                
                if meeting_node:
                    break
            
            # –ö—Ä–æ–∫ –∑ –∫—ñ–Ω—Ü—è
            if queue_goal:
                current_goal = queue_goal.popleft()
                tracker.visit_node()
                
                for neighbor in graph.neighbors(current_goal):
                    if neighbor not in visited_goal:
                        visited_goal[neighbor] = current_goal
                        weight = graph[current_goal][neighbor].get('weight', 1)
                        dist_goal[neighbor] = dist_goal[current_goal] + weight
                        queue_goal.append(neighbor)
                        
                        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –∑—É—Å—Ç—Ä—ñ—á
                        if neighbor in visited_start:
                            meeting_node = neighbor
                            break
                
                if meeting_node:
                    break
        
        if meeting_node is None:
            return PathResult([], -1, tracker.visited_count, 0, "Bidirectional")
        
        # –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —à–ª—è—Ö—É
        path_start = []
        current = meeting_node
        while current is not None:
            path_start.append(current)
            current = visited_start[current]
        path_start.reverse()
        
        path_goal = []
        current = visited_goal[meeting_node]
        while current is not None:
            path_goal.append(current)
            current = visited_goal[current]
        
        path = path_start + path_goal
        total_distance = dist_start[meeting_node] + dist_goal[meeting_node]
        
        execution_time = (time.perf_counter() - start_time) * 1000
        
        return PathResult(
            path=path,
            distance=total_distance,
            visited_nodes=tracker.visited_count,
            execution_time=execution_time,
            algorithm="Bidirectional"
        )


# %%
def test_bidirectional_vs_dijkstra():
    """–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –¥–≤–æ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–æ–≥–æ –ø–æ—à—É–∫—É –∑ Dijkstra"""
    print("\n‚ÜîÔ∏è –ü–û–†–Ü–í–ù–Ø–ù–ù–Ø BIDIRECTIONAL SEARCH vs DIJKSTRA")
    print("=" * 80)
    
    # –¢–µ—Å—Ç—É—î–º–æ –Ω–∞ —Ä—ñ–∑–Ω–∏—Ö —Ä–æ–∑–º—ñ—Ä–∞—Ö –≥—Ä–∞—Ñ—ñ–≤
    sizes = [50, 100, 200, 500]
    results = []
    
    for size in sizes:
        print(f"\nüìä –†–æ–∑–º—ñ—Ä –≥—Ä–∞—Ñ—É: {size} –≤—É–∑–ª—ñ–≤")
        
        graph, positions = GraphGenerator.create_city_road_network(size, 0.1)
        nodes = list(graph.nodes())
        
        # –í–∏–±–∏—Ä–∞—î–º–æ –≤—ñ–¥–¥–∞–ª–µ–Ω—ñ –≤—É–∑–ª–∏
        start = nodes[0]
        goal = nodes[-1]
        
        # Dijkstra
        result_dijkstra = DijkstraAlgorithm.find_shortest_path(graph, start, goal)
        
        # Bidirectional
        result_bidirectional = BidirectionalSearch.find_shortest_path(graph, start, goal)
        
        speedup = result_dijkstra.visited_nodes / result_bidirectional.visited_nodes if result_bidirectional.visited_nodes > 0 else 1
        
        print(f"  Dijkstra: {result_dijkstra.visited_nodes} –≤—É–∑–ª—ñ–≤, {result_dijkstra.execution_time:.3f}ms")
        print(f"  Bidirectional: {result_bidirectional.visited_nodes} –≤—É–∑–ª—ñ–≤, {result_bidirectional.execution_time:.3f}ms")
        print(f"  –ü—Ä–∏—Å–∫–æ—Ä–µ–Ω–Ω—è: {speedup:.2f}x –º–µ–Ω—à–µ –≤—É–∑–ª—ñ–≤")
        
        results.append({
            'Size': size,
            'Dijkstra Visited': result_dijkstra.visited_nodes,
            'Bidirectional Visited': result_bidirectional.visited_nodes,
            'Speedup': speedup,
            'Dijkstra Time': result_dijkstra.execution_time,
            'Bidirectional Time': result_bidirectional.execution_time
        })
    
    return pd.DataFrame(results)

bidirectional_comparison = test_bidirectional_vs_dijkstra()


# %% [markdown]
#  ## 6. Contraction Hierarchies (CH)
# 
# 
# 
#  ### –û–ø–∏—Å:
# 
#  –ú–µ—Ç–æ–¥ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ—ó –æ–±—Ä–æ–±–∫–∏ –≥—Ä–∞—Ñ—É –¥–ª—è –Ω–∞–¥—à–≤–∏–¥–∫–æ–≥–æ –ø–æ—à—É–∫—É.
# 
#  –°—Ç–≤–æ—Ä—é—î —ñ—î—Ä–∞—Ä—Ö—ñ—é –≤—É–∑–ª—ñ–≤ –∑–∞ –≤–∞–∂–ª–∏–≤—ñ—Å—Ç—é.
# 
# 
# 
#  ### –°–∫–ª–∞–¥–Ω—ñ—Å—Ç—å:
# 
#  - **–ü—Ä–µ–ø—Ä–æ—Ü–µ—Å–∏–Ω–≥**: O(n log n)
# 
#  - **–ó–∞–ø–∏—Ç**: O(log n)
# 
#  - **–ü—Ä–æ—Å—Ç–æ—Ä–æ–≤–∞**: O(E log V)
# 
# 
# 
#  ### –ü–µ—Ä–µ–≤–∞–≥–∏:
# 
#  - –ù–∞–¥–∑–≤–∏—á–∞–π–Ω–æ —à–≤–∏–¥–∫—ñ –∑–∞–ø–∏—Ç–∏ (–º—ñ–∫—Ä–æ—Å–µ–∫—É–Ω–¥–∏)
# 
#  - –û—Å–Ω–æ–≤–∞ —Å—É—á–∞—Å–Ω–∏—Ö –Ω–∞–≤—ñ–≥–∞—Ü—ñ–π–Ω–∏—Ö —Å–∏—Å—Ç–µ–º
# 
#  - –ú–∞—Å—à—Ç–∞–±—É—î—Ç—å—Å—è –Ω–∞ –º—ñ–ª—å–π–æ–Ω–∏ –≤—É–∑–ª—ñ–≤
# 
# 
# 
#  ### –ù–µ–¥–æ–ª—ñ–∫–∏:
# 
#  - –î–æ–≤–≥–∏–π –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å–∏–Ω–≥
# 
#  - –ë–∞–≥–∞—Ç–æ –¥–æ–¥–∞—Ç–∫–æ–≤–æ—ó –ø–∞–º'—è—Ç—ñ
# 
#  - –°–∫–ª–∞–¥–Ω–∞ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è

# %%
class ContractionHierarchies:
    """–°–ø—Ä–æ—â–µ–Ω–∞ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è Contraction Hierarchies"""
    
    def __init__(self, graph: nx.Graph):
        self.original_graph = graph
        self.node_order = []
        self.shortcuts = {}
        self.levels = {}
        
    def preprocess(self) -> float:
        """
        –í–∏–∫–æ–Ω—É—î –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å–∏–Ω–≥ –≥—Ä–∞—Ñ—É
        –ü–æ–≤–µ—Ä—Ç–∞—î —á–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
        """
        start_time = time.perf_counter()
        
        # –°–ø—Ä–æ—â–µ–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç: —Å–æ—Ä—Ç—É—î–º–æ –≤—É–∑–ª–∏ –∑–∞ —Å—Ç—É–ø–µ–Ω–µ–º
        nodes = list(self.original_graph.nodes())
        node_degrees = [(node, self.original_graph.degree(node)) for node in nodes]
        node_degrees.sort(key=lambda x: x[1])
        
        self.node_order = [node for node, _ in node_degrees]
        
        # –ü—Ä–∏—Å–≤–æ—é—î–º–æ —Ä—ñ–≤–Ω—ñ
        for level, node in enumerate(self.node_order):
            self.levels[node] = level
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ shortcuts (—Å–ø—Ä–æ—â–µ–Ω–æ)
        working_graph = self.original_graph.copy()
        
        for level, node in enumerate(self.node_order[:-1]):  # –ù–µ –æ–±—Ä–æ–±–ª—è—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π
            neighbors = list(working_graph.neighbors(node))
            
            # –î–ª—è –∫–æ–∂–Ω–æ—ó –ø–∞—Ä–∏ —Å—É—Å—ñ–¥—ñ–≤ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –ø–æ—Ç—Ä—ñ–±–µ–Ω shortcut
            for i, u in enumerate(neighbors):
                for v in neighbors[i+1:]:
                    if not working_graph.has_edge(u, v):
                        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —à–ª—è—Ö —á–µ—Ä–µ–∑ node –∫–æ—Ä–æ—Ç—à–∏–π
                        dist_through_node = (
                            working_graph[u][node].get('weight', 1) +
                            working_graph[node][v].get('weight', 1)
                        )
                        
                        # –î–æ–¥–∞—î–º–æ shortcut
                        if (u, v) not in self.shortcuts:
                            self.shortcuts[(u, v)] = dist_through_node
                            self.shortcuts[(v, u)] = dist_through_node
            
            # –í–∏–¥–∞–ª—è—î–º–æ –≤—É–∑–æ–ª –∑ —Ä–æ–±–æ—á–æ–≥–æ –≥—Ä–∞—Ñ—É
            working_graph.remove_node(node)
        
        preprocessing_time = (time.perf_counter() - start_time) * 1000
        return preprocessing_time
    
    def query(self, start: int, goal: int) -> PathResult:
        """
        –®–≤–∏–¥–∫–∏–π –∑–∞–ø–∏—Ç –ø—ñ—Å–ª—è –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å–∏–Ω–≥—É
        """
        start_time = time.perf_counter()
        tracker.reset()
        
        # –°–ø—Ä–æ—â–µ–Ω–∏–π bidirectional Dijkstra –ø–æ —ñ—î—Ä–∞—Ä—Ö—ñ—ó
        # Forward search (—Ç—ñ–ª—å–∫–∏ –≤–≥–æ—Ä—É –ø–æ —ñ—î—Ä–∞—Ä—Ö—ñ—ó)
        dist_forward = {start: 0}
        pq_forward = PriorityQueue()
        pq_forward.put(start, 0)
        visited_forward = set()
        
        # Backward search (—Ç—ñ–ª—å–∫–∏ –≤–≥–æ—Ä—É –ø–æ —ñ—î—Ä–∞—Ä—Ö—ñ—ó)
        dist_backward = {goal: 0}
        pq_backward = PriorityQueue()
        pq_backward.put(goal, 0)
        visited_backward = set()
        
        best_distance = float('inf')
        meeting_node = None
        
        # Forward search
        while not pq_forward.empty():
            current = pq_forward.get()
            if current in visited_forward:
                continue
            
            visited_forward.add(current)
            tracker.visit_node()
            
            # –¢—ñ–ª—å–∫–∏ –¥–æ –≤—É–∑–ª—ñ–≤ –≤–∏—â–µ –≤ —ñ—î—Ä–∞—Ä—Ö—ñ—ó
            for neighbor in self.original_graph.neighbors(current):
                if self.levels[neighbor] > self.levels[current]:
                    weight = self.original_graph[current][neighbor].get('weight', 1)
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ shortcuts
                    if (current, neighbor) in self.shortcuts:
                        weight = min(weight, self.shortcuts[(current, neighbor)])
                    
                    new_dist = dist_forward[current] + weight
                    if neighbor not in dist_forward or new_dist < dist_forward[neighbor]:
                        dist_forward[neighbor] = new_dist
                        pq_forward.put(neighbor, new_dist)
        
        # Backward search
        while not pq_backward.empty():
            current = pq_backward.get()
            if current in visited_backward:
                continue
            
            visited_backward.add(current)
            tracker.visit_node()
            
            for neighbor in self.original_graph.neighbors(current):
                if self.levels[neighbor] > self.levels[current]:
                    weight = self.original_graph[current][neighbor].get('weight', 1)
                    if (current, neighbor) in self.shortcuts:
                        weight = min(weight, self.shortcuts[(current, neighbor)])
                    
                    new_dist = dist_backward[current] + weight
                    if neighbor not in dist_backward or new_dist < dist_backward[neighbor]:
                        dist_backward[neighbor] = new_dist
                        pq_backward.put(neighbor, new_dist)
        
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –Ω–∞–π–∫–æ—Ä–æ—Ç—à—É –≤—ñ–¥—Å—Ç–∞–Ω—å —á–µ—Ä–µ–∑ –∑–∞–≥–∞–ª—å–Ω—ñ –≤—É–∑–ª–∏
        common_nodes = visited_forward & visited_backward
        for node in common_nodes:
            total_dist = dist_forward.get(node, float('inf')) + dist_backward.get(node, float('inf'))
            if total_dist < best_distance:
                best_distance = total_dist
                meeting_node = node
        
        execution_time = (time.perf_counter() - start_time) * 1000
        
        return PathResult(
            path=[start, meeting_node, goal] if meeting_node else [],
            distance=best_distance if best_distance != float('inf') else -1,
            visited_nodes=tracker.visited_count,
            execution_time=execution_time,
            algorithm="Contraction Hierarchies"
        )


# %%
def test_contraction_hierarchies():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è Contraction Hierarchies"""
    print("\n‚ö° –¢–ï–°–¢–£–í–ê–ù–ù–Ø CONTRACTION HIERARCHIES")
    print("=" * 80)
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –≤–µ–ª–∏–∫—É –¥–æ—Ä–æ–∂–Ω—é –º–µ—Ä–µ–∂—É
    graph, positions = GraphGenerator.create_city_road_network(300, 0.08)
    
    print(f"–ì—Ä–∞—Ñ: {graph.number_of_nodes()} –≤—É–∑–ª—ñ–≤, {graph.number_of_edges()} —Ä–µ–±–µ—Ä")
    
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è CH
    print("\n‚è≥ –í–∏–∫–æ–Ω—É—î—Ç—å—Å—è –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å–∏–Ω–≥...")
    ch = ContractionHierarchies(graph)
    preprocessing_time = ch.preprocess()
    
    print(f"–ü—Ä–µ–ø—Ä–æ—Ü–µ—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {preprocessing_time:.2f}ms")
    print(f"–°—Ç–≤–æ—Ä–µ–Ω–æ {len(ch.shortcuts)} shortcuts")
    
    # –í–∏–∫–æ–Ω—É—î–º–æ –∫—ñ–ª—å–∫–∞ –∑–∞–ø–∏—Ç—ñ–≤
    nodes = list(graph.nodes())
    num_queries = 10
    
    print(f"\nüîç –í–∏–∫–æ–Ω—É—î–º–æ {num_queries} –∑–∞–ø–∏—Ç—ñ–≤...")
    
    ch_times = []
    dijkstra_times = []
    ch_visited = []
    dijkstra_visited = []
    
    for _ in range(num_queries):
        start, goal = np.random.choice(nodes, 2, replace=False)
        
        # CH query
        result_ch = ch.query(start, goal)
        ch_times.append(result_ch.execution_time)
        ch_visited.append(result_ch.visited_nodes)
        
        # Dijkstra –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è
        result_dijkstra = DijkstraAlgorithm.find_shortest_path(graph, start, goal)
        dijkstra_times.append(result_dijkstra.execution_time)
        dijkstra_visited.append(result_dijkstra.visited_nodes)
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ ({num_queries} –∑–∞–ø–∏—Ç—ñ–≤):")
    print(f"CH:")
    print(f"  –°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å –∑–∞–ø–∏—Ç—É: {np.mean(ch_times):.3f}ms")
    print(f"  –°–µ—Ä–µ–¥–Ω—å–æ –≤—ñ–¥–≤—ñ–¥–∞–Ω–æ –≤—É–∑–ª—ñ–≤: {np.mean(ch_visited):.1f}")
    print(f"\nDijkstra:")
    print(f"  –°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å –∑–∞–ø–∏—Ç—É: {np.mean(dijkstra_times):.3f}ms")
    print(f"  –°–µ—Ä–µ–¥–Ω—å–æ –≤—ñ–¥–≤—ñ–¥–∞–Ω–æ –≤—É–∑–ª—ñ–≤: {np.mean(dijkstra_visited):.1f}")
    
    print(f"\n‚ö° –ü—Ä–∏—Å–∫–æ—Ä–µ–Ω–Ω—è CH:")
    print(f"  –ß–∞—Å: {np.mean(dijkstra_times)/np.mean(ch_times):.2f}x —à–≤–∏–¥—à–µ")
    print(f"  –í—É–∑–ª–∏: {np.mean(dijkstra_visited)/np.mean(ch_visited):.2f}x –º–µ–Ω—à–µ")
    print(f"\nüíæ –ö–æ–º–ø—Ä–æ–º—ñ—Å: –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å–∏–Ω–≥ {preprocessing_time:.2f}ms vs {num_queries} —à–≤–∏–¥–∫–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤")
    
    return ch, preprocessing_time

ch_results = test_contraction_hierarchies()


# %% [markdown]
#  ## 7. Johnson's Algorithm
# 
# 
# 
#  ### –û–ø–∏—Å:
# 
#  –ê–ª–≥–æ—Ä–∏—Ç–º –¥–ª—è –∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –Ω–∞–π–∫–æ—Ä–æ—Ç—à–∏—Ö —à–ª—è—Ö—ñ–≤ –º—ñ–∂ —É—Å—ñ–º–∞ –ø–∞—Ä–∞–º–∏ –≤–µ—Ä—à–∏–Ω
# 
#  —É –≥—Ä–∞—Ñ–∞—Ö –∑ –≤—ñ–¥'—î–º–Ω–∏–º–∏ –≤–∞–≥–∞–º–∏. –ö–æ–º–±—ñ–Ω—É—î Bellman-Ford —Ç–∞ Dijkstra.
# 
# 
# 
#  ### –°–∫–ª–∞–¥–Ω—ñ—Å—Ç—å:
# 
#  - **–ß–∞—Å–æ–≤–∞**: O(V¬≤ log V + VE)
# 
#  - **–ü—Ä–æ—Å—Ç–æ—Ä–æ–≤–∞**: O(V¬≤)
# 
# 
# 
#  ### –ü–µ—Ä–µ–≤–∞–≥–∏:
# 
#  - –®–≤–∏–¥—à–µ –∑–∞ Floyd-Warshall –¥–ª—è —Ä–æ–∑—Ä—ñ–¥–∂–µ–Ω–∏—Ö –≥—Ä–∞—Ñ—ñ–≤
# 
#  - –ü—Ä–∞—Ü—é—î –∑ –≤—ñ–¥'—î–º–Ω–∏–º–∏ –≤–∞–≥–∞–º–∏
# 
# 
# 
#  ### –ù–µ–¥–æ–ª—ñ–∫–∏:
# 
#  - –°–∫–ª–∞–¥–Ω—ñ—à–∞ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è
# 
#  - –í—Å–µ –æ–¥–Ω–æ –ø–æ–≤—ñ–ª—å–Ω–∏–π –¥–ª—è –≤–µ–ª–∏–∫–∏—Ö –≥—Ä–∞—Ñ—ñ–≤

# %%
class JohnsonAlgorithm:
    """–†–µ–∞–ª—ñ–∑–∞—Ü—ñ—è –∞–ª–≥–æ—Ä–∏—Ç–º—É –î–∂–æ–Ω—Å–æ–Ω–∞"""
    
    @staticmethod
    def find_all_shortest_paths(graph: nx.Graph) -> Tuple[Dict, float]:
        """
        –ó–Ω–∞—Ö–æ–¥–∏—Ç—å –Ω–∞–π–∫–æ—Ä–æ—Ç—à—ñ —à–ª—è—Ö–∏ –º—ñ–∂ —É—Å—ñ–º–∞ –ø–∞—Ä–∞–º–∏ –≤–µ—Ä—à–∏–Ω
        –ü–æ–≤–µ—Ä—Ç–∞—î (—Å–ª–æ–≤–Ω–∏–∫_–≤—ñ–¥—Å—Ç–∞–Ω–µ–π, —á–∞—Å_–≤–∏–∫–æ–Ω–∞–Ω–Ω—è)
        """
        start_time = time.perf_counter()
        
        # –ö—Ä–æ–∫ 1: –î–æ–¥–∞—î–º–æ —Ñ—ñ–∫—Ç–∏–≤–Ω—É –≤–µ—Ä—à–∏–Ω—É, –∑'—î–¥–Ω–∞–Ω—É –∑ —É—Å—ñ–º–∞ —ñ–Ω—à–∏–º–∏ –≤–∞–≥–æ—é 0
        augmented_graph = graph.copy()
        dummy_node = max(graph.nodes()) + 1
        for node in graph.nodes():
            augmented_graph.add_edge(dummy_node, node, weight=0)
        
        # –ö—Ä–æ–∫ 2: Bellman-Ford –≤—ñ–¥ —Ñ—ñ–∫—Ç–∏–≤–Ω–æ—ó –≤–µ—Ä—à–∏–Ω–∏ –¥–ª—è –∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –ø–æ—Ç–µ–Ω—Ü—ñ–∞–ª—ñ–≤
        distances = {node: float('inf') for node in augmented_graph.nodes()}
        distances[dummy_node] = 0
        
        # –†–µ–ª–∞–∫—Å–∞—Ü—ñ—è
        for _ in range(len(augmented_graph.nodes()) - 1):
            for u, v in augmented_graph.edges():
                weight = augmented_graph[u][v].get('weight', 1)
                if distances[u] + weight < distances[v]:
                    distances[v] = distances[u] + weight
                if distances[v] + weight < distances[u]:
                    distances[u] = distances[v] + weight
        
        # –ü–æ—Ç–µ–Ω—Ü—ñ–∞–ª–∏ h(v)
        h = {node: distances[node] for node in graph.nodes()}
        
        # –ö—Ä–æ–∫ 3: –ü–µ—Ä–µ–∑–≤–∞–∂—É–≤–∞–Ω–Ω—è —Ä–µ–±–µ—Ä: w'(u,v) = w(u,v) + h(u) - h(v)
        reweighted_graph = graph.copy()
        for u, v in reweighted_graph.edges():
            original_weight = reweighted_graph[u][v].get('weight', 1)
            new_weight = original_weight + h[u] - h[v]
            reweighted_graph[u][v]['weight'] = new_weight
        
        # –ö—Ä–æ–∫ 4: Dijkstra –≤—ñ–¥ –∫–æ–∂–Ω–æ—ó –≤–µ—Ä—à–∏–Ω–∏ –Ω–∞ –ø–µ—Ä–µ–∑–≤–∞–∂–µ–Ω–æ–º—É –≥—Ä–∞—Ñ—ñ
        all_distances = {}
        for source in graph.nodes():
            distances_from_source = DijkstraAlgorithm.find_all_shortest_paths(
                reweighted_graph, source
            )
            
            # –ö—Ä–æ–∫ 5: –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏—Ö –≤—ñ–¥—Å—Ç–∞–Ω–µ–π
            all_distances[source] = {}
            for target in graph.nodes():
                if distances_from_source[target] != float('inf'):
                    original_distance = distances_from_source[target] - h[source] + h[target]
                    all_distances[source][target] = original_distance
                else:
                    all_distances[source][target] = float('inf')
        
        execution_time = (time.perf_counter() - start_time) * 1000
        
        return all_distances, execution_time


# %%
def test_johnson_vs_floyd_warshall():
    """–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è Johnson vs Floyd-Warshall"""
    print("\nüîÑ –ü–û–†–Ü–í–ù–Ø–ù–ù–Ø JOHNSON vs FLOYD-WARSHALL")
    print("=" * 80)
    
    sizes = [20, 50, 100]
    results = []
    
    for size in sizes:
        print(f"\nüìä –†–æ–∑–º—ñ—Ä –≥—Ä–∞—Ñ—É: {size} –≤—É–∑–ª—ñ–≤")
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ä–æ–∑—Ä—ñ–¥–∂–µ–Ω–∏–π –≥—Ä–∞—Ñ
        graph = nx.erdos_renyi_graph(size, 0.1)
        
        # –î–æ–¥–∞—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤—ñ –≤–∞–≥–∏ (–≤–∫–ª—é—á–∞—é—á–∏ –≤—ñ–¥'—î–º–Ω—ñ)
        for u, v in graph.edges():
            graph[u][v]['weight'] = np.random.uniform(-5, 10)
        
        print(f"  –†–µ–±–µ—Ä: {graph.number_of_edges()}")
        print(f"  –©—ñ–ª—å–Ω—ñ—Å—Ç—å: {graph.number_of_edges() / (size * (size-1) / 2):.3f}")
        
        # Johnson
        all_dist_johnson, time_johnson = JohnsonAlgorithm.find_all_shortest_paths(graph)
        
        # Floyd-Warshall
        dist_fw, _, time_fw, _ = FloydWarshallAlgorithm.find_all_shortest_paths(graph)# Floyd-Warshall
        
        speedup = time_fw / time_johnson
        
        print(f"  Johnson: {time_johnson:.2f}ms")
        print(f"  Floyd-Warshall: {time_fw:.2f}ms")
        print(f"  –ü—Ä–∏—Å–∫–æ—Ä–µ–Ω–Ω—è: {speedup:.2f}x")
        
        results.append({
            'Nodes': size,
            'Edges': graph.number_of_edges(),
            'Density': graph.number_of_edges() / (size * (size-1) / 2),
            'Johnson (ms)': time_johnson,
            'Floyd-Warshall (ms)': time_fw,
            'Speedup': speedup
        })
    
    print("\n" + "="*80)
    print("–í–∏—Å–Ω–æ–≤–æ–∫: Johnson –≤–∏–≥—ñ–¥–Ω—ñ—à–∏–π –¥–ª—è —Ä–æ–∑—Ä—ñ–¥–∂–µ–Ω–∏—Ö –≥—Ä–∞—Ñ—ñ–≤")
    
    return pd.DataFrame(results)

johnson_comparison = test_johnson_vs_floyd_warshall()


# %% [markdown]
#  ## 8. –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è –∞–ª–≥–æ—Ä–∏—Ç–º—ñ–≤

# %%
class PathVisualizer:
    """–ö–ª–∞—Å –¥–ª—è –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—ó –≥—Ä–∞—Ñ—ñ–≤ —Ç–∞ —à–ª—è—Ö—ñ–≤"""
    
    @staticmethod
    def visualize_path_comparison(graph, positions, paths_dict, title="–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∞–ª–≥–æ—Ä–∏—Ç–º—ñ–≤"):
        """
        –í—ñ–∑—É–∞–ª—ñ–∑—É—î –∫—ñ–ª—å–∫–∞ —à–ª—è—Ö—ñ–≤ –Ω–∞ –æ–¥–Ω–æ–º—É –≥—Ä–∞—Ñ—ñ
        paths_dict: {algorithm_name: (path, color)}
        """
        fig, axes = plt.subplots(1, len(paths_dict), figsize=(7*len(paths_dict), 6))
        
        if len(paths_dict) == 1:
            axes = [axes]
        
        for ax, (algo_name, (path, color)) in zip(axes, paths_dict.items()):
            # –ú–∞–ª—é—î–º–æ –≥—Ä–∞—Ñ
            nx.draw_networkx_edges(graph, positions, alpha=0.2, ax=ax)
            nx.draw_networkx_nodes(graph, positions, node_size=30, 
                                  node_color='lightgray', ax=ax)
            
            # –í–∏–¥—ñ–ª—è—î–º–æ —à–ª—è—Ö
            if len(path) > 1:
                path_edges = [(path[i], path[i+1]) for i in range(len(path)-1)]
                nx.draw_networkx_edges(graph, positions, path_edges, 
                                      edge_color=color, width=3, ax=ax)
                
                # –í–∏–¥—ñ–ª—è—î–º–æ –≤—É–∑–ª–∏ —à–ª—è—Ö—É
                nx.draw_networkx_nodes(graph, positions, path, 
                                      node_color=color, node_size=100, ax=ax)
                
                # –ü–æ–∑–Ω–∞—á–∞—î–º–æ –ø–æ—á–∞—Ç–æ–∫ —ñ –∫—ñ–Ω–µ—Ü—å
                nx.draw_networkx_nodes(graph, positions, [path[0]], 
                                      node_color='green', node_size=150, 
                                      node_shape='s', ax=ax)
                nx.draw_networkx_nodes(graph, positions, [path[-1]], 
                                      node_color='red', node_size=150, 
                                      node_shape='s', ax=ax)
            
            ax.set_title(f"{algo_name}\n–î–æ–≤–∂–∏–Ω–∞ —à–ª—è—Ö—É: {len(path)} –≤—É–∑–ª—ñ–≤", 
                        fontsize=12, fontweight='bold')
            ax.axis('off')
        
        plt.suptitle(title, fontsize=14, fontweight='bold', y=1.02)
        plt.tight_layout()
        return fig
    
    @staticmethod
    def visualize_visited_nodes(graph, positions, visited_sets_dict, title="–í—ñ–¥–≤—ñ–¥–∞–Ω—ñ –≤—É–∑–ª–∏"):
        """
        –í—ñ–∑—É–∞–ª—ñ–∑—É—î –≤—ñ–¥–≤—ñ–¥–∞–Ω—ñ –≤—É–∑–ª–∏ —Ä—ñ–∑–Ω–∏–º–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º–∏
        visited_sets_dict: {algorithm_name: (visited_set, color)}
        """
        fig, axes = plt.subplots(1, len(visited_sets_dict), 
                                figsize=(7*len(visited_sets_dict), 6))
        
        if len(visited_sets_dict) == 1:
            axes = [axes]
        
        for ax, (algo_name, (visited, color)) in zip(axes, visited_sets_dict.items()):
            # –ú–∞–ª—é—î–º–æ –≥—Ä–∞—Ñ
            nx.draw_networkx_edges(graph, positions, alpha=0.1, ax=ax)
            
            # –ù–µ–≤—ñ–¥–≤—ñ–¥–∞–Ω—ñ –≤—É–∑–ª–∏
            unvisited = set(graph.nodes()) - visited
            nx.draw_networkx_nodes(graph, positions, unvisited, 
                                  node_size=30, node_color='lightgray', ax=ax)
            
            # –í—ñ–¥–≤—ñ–¥–∞–Ω—ñ –≤—É–∑–ª–∏
            if visited:
                nx.draw_networkx_nodes(graph, positions, list(visited), 
                                      node_size=50, node_color=color, 
                                      alpha=0.6, ax=ax)
            
            ax.set_title(f"{algo_name}\n–í—ñ–¥–≤—ñ–¥–∞–Ω–æ: {len(visited)} –≤—É–∑–ª—ñ–≤", 
                        fontsize=12, fontweight='bold')
            ax.axis('off')
        
        plt.suptitle(title, fontsize=14, fontweight='bold', y=1.02)
        plt.tight_layout()
        return fig


# %%
def create_visual_comparison():
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–∑—É–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∞–ª–≥–æ—Ä–∏—Ç–º—ñ–≤"""
    print("\nüé® –°–¢–í–û–†–ï–ù–ù–Ø –í–Ü–ó–£–ê–õ–¨–ù–û–ì–û –ü–û–†–Ü–í–ù–Ø–ù–ù–Ø")
    print("="*80)
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –≥—Ä–∞—Ñ –ø—ñ–¥–∑–µ–º–µ–ª–ª—è
    graph, positions = GraphGenerator.create_game_dungeon(15, 15, 0.25)
    
    nodes = list(graph.nodes())
    start = nodes[0]
    goal = nodes[-1]
    
    print(f"–°—Ü–µ–Ω–∞—Ä—ñ–π: –Ü–≥—Ä–æ–≤–µ –ø—ñ–¥–∑–µ–º–µ–ª–ª—è")
    print(f"–í—É–∑–ª—ñ–≤: {len(nodes)}, –†–µ–±–µ—Ä: {graph.number_of_edges()}")
    print(f"–ú–∞—Ä—à—Ä—É—Ç: {start} ‚Üí {goal}")
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∏
    result_dijkstra = DijkstraAlgorithm.find_shortest_path(graph, start, goal)
    result_astar = AStarAlgorithm.find_shortest_path(graph, start, goal, positions, 'euclidean')
    result_bidirectional = BidirectionalSearch.find_shortest_path(graph, start, goal)
    
    # –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è 1: –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —à–ª—è—Ö—ñ–≤
    paths_dict = {
        'Dijkstra': (result_dijkstra.path, 'blue'),
        'A* (Euclidean)': (result_astar.path, 'red'),
        'Bidirectional': (result_bidirectional.path, 'green')
    }
    
    fig1 = PathVisualizer.visualize_path_comparison(
        graph, positions, paths_dict, 
        "–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∞–ª–≥–æ—Ä–∏—Ç–º—ñ–≤: –Ü–≥—Ä–æ–≤–µ –ø—ñ–¥–∑–µ–º–µ–ª–ª—è"
    )
    plt.savefig('path_comparison.png', dpi=300, bbox_inches='tight')
    plt.show()
    
    print("\n–†–µ–∑—É–ª—å—Ç–∞—Ç–∏:")
    comparison_df = pd.DataFrame([
        {
            'Algorithm': 'Dijkstra',
            'Path Length': len(result_dijkstra.path),
            'Distance': result_dijkstra.distance,
            'Visited': result_dijkstra.visited_nodes,
            'Time (ms)': result_dijkstra.execution_time
        },
        {
            'Algorithm': 'A*',
            'Path Length': len(result_astar.path),
            'Distance': result_astar.distance,
            'Visited': result_astar.visited_nodes,
            'Time (ms)': result_astar.execution_time
        },
        {
            'Algorithm': 'Bidirectional',
            'Path Length': len(result_bidirectional.path),
            'Distance': result_bidirectional.distance,
            'Visited': result_bidirectional.visited_nodes,
            'Time (ms)': result_bidirectional.execution_time
        }
    ])
    
    print(comparison_df.to_string(index=False))

create_visual_comparison()


# %% [markdown]
#  ## 9. –ö–æ–º–ø–ª–µ–∫—Å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ

# %%
class PerformanceAnalyzer:
    """–ö–ª–∞—Å –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ"""
    
    @staticmethod
    def benchmark_algorithms(graph_sizes=[50, 100, 200, 500], connectivity=0.1):
        """
        –ë–µ–Ω—á–º–∞—Ä–∫ –≤—Å—ñ—Ö –∞–ª–≥–æ—Ä–∏—Ç–º—ñ–≤ –Ω–∞ —Ä—ñ–∑–Ω–∏—Ö —Ä–æ–∑–º—ñ—Ä–∞—Ö –≥—Ä–∞—Ñ—ñ–≤
        """
        results = []
        
        for size in graph_sizes:
            print(f"\nüìä –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –Ω–∞ –≥—Ä–∞—Ñ—ñ {size} –≤—É–∑–ª—ñ–≤...")
            
            graph, positions = GraphGenerator.create_city_road_network(size, connectivity)
            nodes = list(graph.nodes())
            start, goal = nodes[0], nodes[-1]
            
            # Dijkstra
            result_dijkstra = DijkstraAlgorithm.find_shortest_path(graph, start, goal)
            
            # A*
            result_astar = AStarAlgorithm.find_shortest_path(
                graph, start, goal, positions, 'euclidean'
            )
            
            # Bidirectional
            result_bidirectional = BidirectionalSearch.find_shortest_path(graph, start, goal)
            
            # Bellman-Ford
            result_bellman, _ = BellmanFordAlgorithm.find_shortest_path(graph, start, goal)
            
            results.append({
                'Size': size,
                'Edges': graph.number_of_edges(),
                'Dijkstra Time': result_dijkstra.execution_time,
                'Dijkstra Visited': result_dijkstra.visited_nodes,
                'A* Time': result_astar.execution_time,
                'A* Visited': result_astar.visited_nodes,
                'Bidirectional Time': result_bidirectional.execution_time,
                'Bidirectional Visited': result_bidirectional.visited_nodes,
                'Bellman-Ford Time': result_bellman.execution_time,
                'Bellman-Ford Visited': result_bellman.visited_nodes
            })
        
        return pd.DataFrame(results)
    
    @staticmethod
    def plot_performance_comparison(df):
        """–í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –±–µ–Ω—á–º–∞—Ä–∫—ñ–≤"""
        fig, axes = plt.subplots(2, 2, figsize=(16, 12))
        
        algorithms = ['Dijkstra', 'A*', 'Bidirectional', 'Bellman-Ford']
        colors = ['blue', 'red', 'green', 'orange']
        
        # –ì—Ä–∞—Ñ—ñ–∫ 1: –ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
        ax = axes[0, 0]
        for algo, color in zip(algorithms, colors):
            ax.plot(df['Size'], df[f'{algo} Time'], 
                   'o-', label=algo, color=color, linewidth=2, markersize=6)
        ax.set_xlabel('–†–æ–∑–º—ñ—Ä –≥—Ä–∞—Ñ—É (–≤—É–∑–ª—ñ–≤)', fontsize=11)
        ax.set_ylabel('–ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è (–º—Å)', fontsize=11)
        ax.set_title('–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —á–∞—Å—É –≤–∏–∫–æ–Ω–∞–Ω–Ω—è', fontsize=12, fontweight='bold')
        ax.legend()
        ax.grid(True, alpha=0.3)
        ax.set_yscale('log')
        
        # –ì—Ä–∞—Ñ—ñ–∫ 2: –í—ñ–¥–≤—ñ–¥–∞–Ω—ñ –≤—É–∑–ª–∏
        ax = axes[0, 1]
        for algo, color in zip(algorithms, colors):
            ax.plot(df['Size'], df[f'{algo} Visited'], 
                   'o-', label=algo, color=color, linewidth=2, markersize=6)
        ax.set_xlabel('–†–æ–∑–º—ñ—Ä –≥—Ä–∞—Ñ—É (–≤—É–∑–ª—ñ–≤)', fontsize=11)
        ax.set_ylabel('–í—ñ–¥–≤—ñ–¥–∞–Ω—ñ –≤—É–∑–ª–∏', fontsize=11)
        ax.set_title('–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –≤—ñ–¥–≤—ñ–¥–∞–Ω–∏—Ö –≤—É–∑–ª—ñ–≤', fontsize=12, fontweight='bold')
        ax.legend()
        ax.grid(True, alpha=0.3)
        ax.set_yscale('log')
        
        # –ì—Ä–∞—Ñ—ñ–∫ 3: –ü—Ä–∏—Å–∫–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥–Ω–æ—Å–Ω–æ Dijkstra (—á–∞—Å)
        ax = axes[1, 0]
        for algo, color in zip(['A*', 'Bidirectional'], ['red', 'green']):
            speedup = df['Dijkstra Time'] / df[f'{algo} Time']
            ax.plot(df['Size'], speedup, 
                   'o-', label=f'{algo} vs Dijkstra', color=color, 
                   linewidth=2, markersize=6)
        ax.axhline(y=1, color='blue', linestyle='--', alpha=0.5, label='Dijkstra (baseline)')
        ax.set_xlabel('–†–æ–∑–º—ñ—Ä –≥—Ä–∞—Ñ—É (–≤—É–∑–ª—ñ–≤)', fontsize=11)
        ax.set_ylabel('–ü—Ä–∏—Å–∫–æ—Ä–µ–Ω–Ω—è (—Ä–∞–∑—ñ–≤)', fontsize=11)
        ax.set_title('–ü—Ä–∏—Å–∫–æ—Ä–µ–Ω–Ω—è –∑–∞ —á–∞—Å–æ–º –≤—ñ–¥–Ω–æ—Å–Ω–æ Dijkstra', fontsize=12, fontweight='bold')
        ax.legend()
        ax.grid(True, alpha=0.3)
        
        # –ì—Ä–∞—Ñ—ñ–∫ 4: –ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å (–≤—ñ–¥–≤—ñ–¥–∞–Ω—ñ –≤—É–∑–ª–∏ –≤—ñ–¥–Ω–æ—Å–Ω–æ Dijkstra)
        ax = axes[1, 1]
        for algo, color in zip(['A*', 'Bidirectional'], ['red', 'green']):
            efficiency = df['Dijkstra Visited'] / df[f'{algo} Visited']
            ax.plot(df['Size'], efficiency, 
                   'o-', label=f'{algo} vs Dijkstra', color=color, 
                   linewidth=2, markersize=6)
        ax.axhline(y=1, color='blue', linestyle='--', alpha=0.5, label='Dijkstra (baseline)')
        ax.set_xlabel('–†–æ–∑–º—ñ—Ä –≥—Ä–∞—Ñ—É (–≤—É–∑–ª—ñ–≤)', fontsize=11)
        ax.set_ylabel('–ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å (—Ä–∞–∑—ñ–≤)', fontsize=11)
        ax.set_title('–ó–º–µ–Ω—à–µ–Ω–Ω—è –≤—ñ–¥–≤—ñ–¥–∞–Ω–∏—Ö –≤—É–∑–ª—ñ–≤ –≤—ñ–¥–Ω–æ—Å–Ω–æ Dijkstra', 
                    fontsize=12, fontweight='bold')
        ax.legend()
        ax.grid(True, alpha=0.3)
        
        plt.tight_layout()
        return fig


# %%
print("\nüî¨ –ö–û–ú–ü–õ–ï–ö–°–ù–ò–ô –ë–ï–ù–ß–ú–ê–†–ö –ê–õ–ì–û–†–ò–¢–ú–Ü–í")
print("="*80)
print("–¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –∫—ñ–ª—å–∫–∞ —Ö–≤–∏–ª–∏–Ω...")

benchmark_results = PerformanceAnalyzer.benchmark_algorithms([50, 100, 200, 400])

print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –±–µ–Ω—á–º–∞—Ä–∫—ñ–≤:")
print(benchmark_results.to_string(index=False))

fig_performance = PerformanceAnalyzer.plot_performance_comparison(benchmark_results)
plt.savefig('performance_comparison.png', dpi=300, bbox_inches='tight')
plt.show()


# %% [markdown]
#  ## 10. –ü—Ä–∞–∫—Ç–∏—á–Ω—ñ —Å—Ü–µ–Ω–∞—Ä—ñ—ó –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è

# %%
class RealWorldScenarios:
    """–†–µ–∞–ª—ñ—Å—Ç–∏—á–Ω—ñ —Å—Ü–µ–Ω–∞—Ä—ñ—ó –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –∞–ª–≥–æ—Ä–∏—Ç–º—ñ–≤"""
    
    @staticmethod
    def gps_navigation_simulation():
        """–°–∏–º—É–ª—è—Ü—ñ—è GPS-–Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –≤ –º—ñ—Å—Ç—ñ"""
        print("\nüó∫Ô∏è –°–¶–ï–ù–ê–†–Ü–ô 1: GPS-–ù–ê–í–Ü–ì–ê–¶–Ü–Ø –í –ú–Ü–°–¢–Ü")
        print("="*80)
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ä–µ–∞–ª—ñ—Å—Ç–∏—á–Ω—É –¥–æ—Ä–æ–∂–Ω—é –º–µ—Ä–µ–∂—É
        graph, positions = GraphGenerator.create_city_road_network(200, 0.12)
        
        print(f"–ú—ñ—Å—å–∫–∞ –º–µ—Ä–µ–∂–∞: {graph.number_of_nodes()} –ø–µ—Ä–µ—Ö—Ä–µ—Å—Ç—å")
        
        # –°–∏–º—É–ª—é—î–º–æ –∫—ñ–ª—å–∫–∞ –º–∞—Ä—à—Ä—É—Ç—ñ–≤
        scenarios = [
            ("–ö–æ—Ä–æ—Ç–∫–∏–π –º–∞—Ä—à—Ä—É—Ç (—Å—É—Å—ñ–¥–Ω—ñ –∫–≤–∞—Ä—Ç–∞–ª–∏)", 10),
            ("–°–µ—Ä–µ–¥–Ω—ñ–π –º–∞—Ä—à—Ä—É—Ç (—á–µ—Ä–µ–∑ —Ä–∞–π–æ–Ω)", 50),
            ("–î–æ–≤–≥–∏–π –º–∞—Ä—à—Ä—É—Ç (—á–µ—Ä–µ–∑ –º—ñ—Å—Ç–æ)", 150)
        ]
        
        results = []
        nodes = list(graph.nodes())
        
        for scenario_name, distance_nodes in scenarios:
            start = nodes[0]
            goal = nodes[min(distance_nodes, len(nodes)-1)]
            
            print(f"\n{scenario_name}")
            print(f"  –í—ñ–¥: {start}, –î–æ: {goal}")
            
            # A* (–æ—Å–Ω–æ–≤–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è GPS)
            result_astar = AStarAlgorithm.find_shortest_path(
                graph, start, goal, positions, 'euclidean'
            )
            
            # Dijkstra –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è
            result_dijkstra = DijkstraAlgorithm.find_shortest_path(graph, start, goal)
            
            print(f"  A*: {result_astar.distance:.1f} –∫–º, "
                  f"{len(result_astar.path)} —Ç–æ—á–æ–∫, {result_astar.execution_time:.2f}ms")
            print(f"  Dijkstra: {result_dijkstra.distance:.1f} –∫–º, "
                  f"{result_dijkstra.visited_nodes} –¥–æ—Å–ª—ñ–¥–∂–µ–Ω–æ")
            print(f"  –ï–∫–æ–Ω–æ–º—ñ—è A*: {result_dijkstra.visited_nodes - result_astar.visited_nodes} "
                  f"–≤—É–∑–ª—ñ–≤ ({(1 - result_astar.visited_nodes/result_dijkstra.visited_nodes)*100:.1f}%)")
            
            results.append({
                'Scenario': scenario_name,
                'Distance': result_astar.distance,
                'A* Time': result_astar.execution_time,
                'A* Visited': result_astar.visited_nodes,
                'Dijkstra Visited': result_dijkstra.visited_nodes,
                'Savings %': (1 - result_astar.visited_nodes/result_dijkstra.visited_nodes)*100
            })
        
        return pd.DataFrame(results)
    
    @staticmethod
    def social_network_connections():
        """–ê–Ω–∞–ª—ñ–∑ –∑–≤'—è–∑–∫—ñ–≤ —É —Å–æ—Ü—ñ–∞–ª—å–Ω—ñ–π –º–µ—Ä–µ–∂—ñ"""
        print("\nüë• –°–¶–ï–ù–ê–†–Ü–ô 2: –°–û–¶–Ü–ê–õ–¨–ù–ê –ú–ï–†–ï–ñ–ê")
        print("="*80)
        
        graph = GraphGenerator.create_social_network(500, avg_friends=10)
        
        print(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {graph.number_of_nodes()}")
        print(f"–ó–≤'—è–∑–∫—ñ–≤: {graph.number_of_edges()}")
        
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Å—Ç—É–ø–µ–Ω—ñ —Ä–æ–∑–¥—ñ–ª–µ–Ω–Ω—è –º—ñ–∂ –≤–∏–ø–∞–¥–∫–æ–≤–∏–º–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏
        samples = 20
        separations = []
        
        for _ in range(samples):
            user1, user2 = np.random.choice(list(graph.nodes()), 2, replace=False)
            result = BidirectionalSearch.find_shortest_path(graph, user1, user2)
            if len(result.path) > 0:
                separations.append(len(result.path) - 1)
        
        print(f"\n–°—Ç—É–ø–µ–Ω—ñ —Ä–æ–∑–¥—ñ–ª–µ–Ω–Ω—è (–≤–∏–±—ñ—Ä–∫–∞ {samples} –ø–∞—Ä):")
        print(f"  –°–µ—Ä–µ–¥–Ω—ñ–π: {np.mean(separations):.2f}")
        print(f"  –ú–µ–¥—ñ–∞–Ω–∞: {np.median(separations):.0f}")
        print(f"  –ú—ñ–Ω/–ú–∞–∫—Å: {min(separations)}/{max(separations)}")
        
        # –†–æ–∑–ø–æ–¥—ñ–ª
        unique, counts = np.unique(separations, return_counts=True)
        print("\n–†–æ–∑–ø–æ–¥—ñ–ª:")
        for degree, count in zip(unique, counts):
            print(f"  {degree} —Å—Ç—É–ø–µ–Ω—ñ–≤: {count} –ø–∞—Ä ({count/samples*100:.0f}%)")
        
        return separations
    
    @staticmethod
    def supply_chain_optimization():
        """–û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –ª–∞–Ω—Ü—é–≥–∞ –ø–æ—Å—Ç–∞—á–∞–Ω–Ω—è"""
        print("\nüì¶ –°–¶–ï–ù–ê–†–Ü–ô 3: –õ–û–ì–Ü–°–¢–ò–ö–ê –¢–ê –õ–ê–ù–¶–Æ–ì –ü–û–°–¢–ê–ß–ê–ù–ù–Ø")
        print("="*80)
        
        graph = GraphGenerator.create_logistics_network(15, 30)
        
        warehouses = [n for n in graph.nodes() if graph.nodes[n].get('node_type') == 'warehouse']
        stores = [n for n in graph.nodes() if graph.nodes[n].get('node_type') == 'store']
        
        print(f"–°–∫–ª–∞–¥—ñ–≤: {len(warehouses)}")
        print(f"–ú–∞–≥–∞–∑–∏–Ω—ñ–≤: {len(stores)}")
        
        # –î–ª—è –∫–æ–∂–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω—É –∑–Ω–∞—Ö–æ–¥–∏–º–æ –Ω–∞–π–±–ª–∏–∂—á–∏–π —Å–∫–ª–∞–¥
        print("\n–û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –º–∞—Ä—à—Ä—É—Ç—ñ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏...")
        
        total_distance = 0
        deliveries = []
        
        for store in stores[:10]:  # –ë–µ—Ä–µ–º–æ –ø–µ—Ä—à—ñ 10 –¥–ª—è –ø—Ä–∏–∫–ª–∞–¥—É
            best_warehouse = None
            best_distance = float('inf')
            
            for warehouse in warehouses:
                result = DijkstraAlgorithm.find_shortest_path(graph, warehouse, store)
                if result.distance < best_distance:
                    best_distance = result.distance
                    best_warehouse = warehouse
            
            total_distance += best_distance
            deliveries.append({
                'Store': store,
                'Warehouse': best_warehouse,
                'Distance': best_distance
            })
        
        print(f"–ó–∞–≥–∞–ª—å–Ω–∞ –≤—ñ–¥—Å—Ç–∞–Ω—å –¥–ª—è 10 –¥–æ—Å—Ç–∞–≤–æ–∫: {total_distance:.1f} –∫–º")
        print(f"–°–µ—Ä–µ–¥–Ω—è –≤—ñ–¥—Å—Ç–∞–Ω—å: {total_distance/10:.1f} –∫–º")
        
        return pd.DataFrame(deliveries)
    
    @staticmethod
    def game_pathfinding():
        """–ü–æ—à—É–∫ —à–ª—è—Ö—É –¥–ª—è —ñ–≥—Ä–æ–≤–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂—ñ–≤"""
        print("\nüéÆ –°–¶–ï–ù–ê–†–Ü–ô 4: –Ü–ì–†–û–í–ê –Ü–ù–î–£–°–¢–†–Ü–Ø - –ü–û–®–£–ö –®–õ–Ø–•–£ NPC")
        print("="*80)
        
        # –í–µ–ª–∏–∫–µ –ø—ñ–¥–∑–µ–º–µ–ª–ª—è
        graph, positions = GraphGenerator.create_game_dungeon(30, 30, 0.3)
        
        print(f"–†–æ–∑–º—ñ—Ä –ø—ñ–¥–∑–µ–º–µ–ª–ª—è: 30x30")
        print(f"–ü—Ä–æ—Ö—ñ–¥–Ω–∏—Ö –∫–ª—ñ—Ç–∏–Ω–æ–∫: {graph.number_of_nodes()}")
        
        # –¢–µ—Å—Ç—É—î–º–æ —Ä—ñ–∑–Ω—ñ –≤—ñ–¥—Å—Ç–∞–Ω—ñ
        nodes = list(graph.nodes())
        distances = [10, 50, 100, 200]
        
        results = []
        
        for dist in distances:
            if dist < len(nodes):
                start = nodes[0]
                goal = nodes[min(dist, len(nodes)-1)]
                
                # A* - —Å—Ç–∞–Ω–¥–∞—Ä—Ç –¥–ª—è —ñ–≥–æ—Ä
                result_astar = AStarAlgorithm.find_shortest_path(
                    graph, start, goal, positions, 'manhattan'
                )
                
                # Dijkstra –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è
                result_dijkstra = DijkstraAlgorithm.find_shortest_path(graph, start, goal)
                
                results.append({
                    'Distance': dist,
                    'A* Time (ms)': result_astar.execution_time,
                    'A* Visited': result_astar.visited_nodes,
                    'Dijkstra Visited': result_dijkstra.visited_nodes,
                    'Efficiency': result_dijkstra.visited_nodes / result_astar.visited_nodes
                })
                
                print(f"\n–í—ñ–¥—Å—Ç–∞–Ω—å ~{dist} –∫–ª—ñ—Ç–∏–Ω–æ–∫:")
                print(f"  A*: {result_astar.execution_time:.3f}ms, "
                      f"{result_astar.visited_nodes} –≤—É–∑–ª—ñ–≤")
                print(f"  –ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å: {result_dijkstra.visited_nodes / result_astar.visited_nodes:.1f}x")
        
        print(f"\nüí° –í–∏—Å–Ω–æ–≤–æ–∫: A* –∑ Manhattan heuristic –æ–ø—Ç–∏–º–∞–ª—å–Ω–∏–π –¥–ª—è —Å—ñ—Ç–æ–∫")
        
        return pd.DataFrame(results)


# %%
# –í–∏–∫–æ–Ω–∞–Ω–Ω—è –≤—Å—ñ—Ö –ø—Ä–∞–∫—Ç–∏—á–Ω–∏—Ö —Å—Ü–µ–Ω–∞—Ä—ñ—ó–≤

gps_results = RealWorldScenarios.gps_navigation_simulation()
social_results = RealWorldScenarios.social_network_connections()
logistics_results = RealWorldScenarios.supply_chain_optimization()
game_results = RealWorldScenarios.game_pathfinding()


# %% [markdown]
#  ## 11. –ü—ñ–¥—Å—É–º–∫–æ–≤–∞ —Ç–∞–±–ª–∏—Ü—è —Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó

# %%
def create_algorithm_summary():
    """–°—Ç–≤–æ—Ä—é—î –ø—ñ–¥—Å—É–º–∫–æ–≤—É —Ç–∞–±–ª–∏—Ü—é –∑ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è–º–∏"""
    print("\nüìã –ü–Ü–î–°–£–ú–ö–û–í–ê –¢–ê–ë–õ–ò–¶–Ø –ê–õ–ì–û–†–ò–¢–ú–Ü–í")
    print("="*80)
    
    summary_data = [
        {
            '–ê–ª–≥–æ—Ä–∏—Ç–º': 'Dijkstra',
            '–°–∫–ª–∞–¥–Ω—ñ—Å—Ç—å': 'O(E log V)',
            '–í—ñ–¥\'—î–º–Ω—ñ –≤–∞–≥–∏': '–ù—ñ',
            '–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è': 'GPS, –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü—ñ—è, –±–∞–∑–æ–≤–∏–π –ø–æ—à—É–∫',
            '–ü–µ—Ä–µ–≤–∞–≥–∏': '–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π, –Ω–∞–¥—ñ–π–Ω–∏–π',
            '–ù–µ–¥–æ–ª—ñ–∫–∏': '–î–æ—Å–ª—ñ–¥–∂—É—î –±–∞–≥–∞—Ç–æ –≤—É–∑–ª—ñ–≤',
            '–ö–æ–ª–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏': '–ö–æ–ª–∏ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –≥–∞—Ä–∞–Ω—Ç—ñ—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ—Å—Ç—ñ'
        },
        {
            '–ê–ª–≥–æ—Ä–∏—Ç–º': 'A*',
            '–°–∫–ª–∞–¥–Ω—ñ—Å—Ç—å': 'O(E) —Å–µ—Ä–µ–¥–Ω—î',
            '–í—ñ–¥\'—î–º–Ω—ñ –≤–∞–≥–∏': '–ù—ñ',
            '–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è': '–Ü–≥—Ä–∏, —Ä–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω—ñ–∫–∞, GPS –∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏',
            '–ü–µ—Ä–µ–≤–∞–≥–∏': '–î—É–∂–µ —à–≤–∏–¥–∫–∏–π –∑ —Ö–æ—Ä–æ—à–æ—é –µ–≤—Ä–∏—Å—Ç–∏–∫–æ—é',
            '–ù–µ–¥–æ–ª—ñ–∫–∏': '–ü–æ—Ç—Ä–µ–±—É—î –µ–≤—Ä–∏—Å—Ç–∏—á–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é',
            '–ö–æ–ª–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏': '–ö–æ–ª–∏ —î –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –∞–±–æ –µ–≤—Ä–∏—Å—Ç–∏–∫–∞'
        },
        {
            '–ê–ª–≥–æ—Ä–∏—Ç–º': 'Bellman-Ford',
            '–°–∫–ª–∞–¥–Ω—ñ—Å—Ç—å': 'O(V¬∑E)',
            '–í—ñ–¥\'—î–º–Ω—ñ –≤–∞–≥–∏': '–¢–∞–∫',
            '–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è': '–ê—Ä–±—ñ—Ç—Ä–∞–∂, –º–µ—Ä–µ–∂—ñ –∑ –≤—ñ–¥\'—î–º–Ω–∏–º–∏ –≤–∞–≥–∞–º–∏',
            '–ü–µ—Ä–µ–≤–∞–≥–∏': '–ü—Ä–∞—Ü—é—î –∑ –≤—ñ–¥\'—î–º–Ω–∏–º–∏ –≤–∞–≥–∞–º–∏',
            '–ù–µ–¥–æ–ª—ñ–∫–∏': '–ü–æ–≤—ñ–ª—å–Ω–∏–π',
            '–ö–æ–ª–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏': '–ö–æ–ª–∏ —î –≤—ñ–¥\'—î–º–Ω—ñ –≤–∞–≥–∏'
        },
        {
            '–ê–ª–≥–æ—Ä–∏—Ç–º': 'Floyd-Warshall',
            '–°–∫–ª–∞–¥–Ω—ñ—Å—Ç—å': 'O(V¬≥)',
            '–í—ñ–¥\'—î–º–Ω—ñ –≤–∞–≥–∏': '–¢–∞–∫',
            '–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è': '–ú–∞–ª—ñ –≥—Ä–∞—Ñ–∏, –≤—Å—ñ –ø–∞—Ä–∏ —à–ª—è—Ö—ñ–≤',
            '–ü–µ—Ä–µ–≤–∞–≥–∏': '–ó–Ω–∞—Ö–æ–¥–∏—Ç—å –≤—Å—ñ —à–ª—è—Ö–∏ –æ–¥—Ä–∞–∑—É',
            '–ù–µ–¥–æ–ª—ñ–∫–∏': '–î—É–∂–µ –ø–æ–≤—ñ–ª—å–Ω–∏–π –¥–ª—è –≤–µ–ª–∏–∫–∏—Ö –≥—Ä–∞—Ñ—ñ–≤',
            '–ö–æ–ª–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏': '–ì—Ä–∞—Ñ–∏ <500 –≤—É–∑–ª—ñ–≤, –ø–æ—Ç—Ä—ñ–±–Ω—ñ –≤—Å—ñ —à–ª—è—Ö–∏'
        },
        {
            '–ê–ª–≥–æ—Ä–∏—Ç–º': 'Bidirectional',
            '–°–∫–ª–∞–¥–Ω—ñ—Å—Ç—å': 'O(b^(d/2))',
            '–í—ñ–¥\'—î–º–Ω—ñ –≤–∞–≥–∏': '–ù—ñ',
            '–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è': '–í–µ–ª–∏–∫—ñ –≥—Ä–∞—Ñ–∏, –≤—ñ–¥–æ–º–∏–π —Å—Ç–∞—Ä—Ç —ñ —Ñ—ñ–Ω—ñ—à',
            '–ü–µ—Ä–µ–≤–∞–≥–∏': '–ï–∫—Å–ø–æ–Ω–µ–Ω—Ü—ñ–π–Ω–µ –ø—Ä–∏—Å–∫–æ—Ä–µ–Ω–Ω—è',
            '–ù–µ–¥–æ–ª—ñ–∫–∏': '–°–∫–ª–∞–¥–Ω–∞ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è',
            '–ö–æ–ª–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏': '–í–µ–ª–∏–∫—ñ –≥—Ä–∞—Ñ–∏ –∑ –≤—ñ–¥–æ–º–æ—é –º–µ—Ç–æ—é'
        },
        {
            '–ê–ª–≥–æ—Ä–∏—Ç–º': 'Contraction H.',
            '–°–∫–ª–∞–¥–Ω—ñ—Å—Ç—å': 'Query: O(log n)',
            '–í—ñ–¥\'—î–º–Ω—ñ –≤–∞–≥–∏': '–ù—ñ',
            '–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è': '–ù–∞–≤—ñ–≥–∞—Ü—ñ–π–Ω—ñ —Å–∏—Å—Ç–µ–º–∏ (OSRM)',
            '–ü–µ—Ä–µ–≤–∞–≥–∏': '–ù–∞–¥—à–≤–∏–¥–∫—ñ –∑–∞–ø–∏—Ç–∏',
            '–ù–µ–¥–æ–ª—ñ–∫–∏': '–î–æ–≤–≥–∏–π –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å–∏–Ω–≥',
            '–ö–æ–ª–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏': '–ë–∞–≥–∞—Ç–æ –∑–∞–ø–∏—Ç—ñ–≤ –Ω–∞ —Å—Ç–∞—Ç–∏—á–Ω–æ–º—É –≥—Ä–∞—Ñ—ñ'
        },
        {
            '–ê–ª–≥–æ—Ä–∏—Ç–º': 'Johnson',
            '–°–∫–ª–∞–¥–Ω—ñ—Å—Ç—å': 'O(V¬≤log V + VE)',
            '–í—ñ–¥\'—î–º–Ω—ñ –≤–∞–≥–∏': '–¢–∞–∫',
            '–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è': '–í—Å—ñ –ø–∞—Ä–∏, —Ä–æ–∑—Ä—ñ–¥–∂–µ–Ω—ñ –≥—Ä–∞—Ñ–∏',
            '–ü–µ—Ä–µ–≤–∞–≥–∏': '–®–≤–∏–¥—à–µ Floyd-Warshall –¥–ª—è —Ä–æ–∑—Ä—ñ–¥–∂–µ–Ω–∏—Ö',
            '–ù–µ–¥–æ–ª—ñ–∫–∏': '–°–∫–ª–∞–¥–Ω–∞ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è',
            '–ö–æ–ª–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏': '–í—Å—ñ –ø–∞—Ä–∏ + —Ä–æ–∑—Ä—ñ–¥–∂–µ–Ω–∏–π –≥—Ä–∞—Ñ'
        }
    ]
    
    df = pd.DataFrame(summary_data)
    
    # –í–∏–≤–æ–¥–∏–º–æ —Ç–∞–±–ª–∏—Ü—é —á–∞—Å—Ç–∏–Ω–∞–º–∏ –¥–ª—è –∫—Ä–∞—â–æ—ó —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—ñ
    print("\n–û—Å–Ω–æ–≤–Ω—ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:")
    print(df[['–ê–ª–≥–æ—Ä–∏—Ç–º', '–°–∫–ª–∞–¥–Ω—ñ—Å—Ç—å', '–í—ñ–¥\'—î–º–Ω—ñ –≤–∞–≥–∏']].to_string(index=False))
    
    print("\n\n–ü—Ä–∞–∫—Ç–∏—á–Ω–µ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è:")
    print(df[['–ê–ª–≥–æ—Ä–∏—Ç–º', '–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è', '–ö–æ–ª–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏']].to_string(index=False))
    
    return df

algorithm_summary = create_algorithm_summary()


# %%
def create_decision_tree():
    """–°—Ç–≤–æ—Ä—é—î –¥–µ—Ä–µ–≤–æ —Ä—ñ—à–µ–Ω—å –¥–ª—è –≤–∏–±–æ—Ä—É –∞–ª–≥–æ—Ä–∏—Ç–º—É"""
    print("\nüå≥ –î–ï–†–ï–í–û –†–Ü–®–ï–ù–¨: –Ø–ö–ò–ô –ê–õ–ì–û–†–ò–¢–ú –í–ò–ë–†–ê–¢–ò?")
    print("="*80)
    
    print("""
    ‚îå‚îÄ –ß–∏ —î –≤—ñ–¥'—î–º–Ω—ñ –≤–∞–≥–∏?
    ‚îÇ
    ‚îú‚îÄ –¢–ê–ö
    ‚îÇ  ‚îÇ
    ‚îÇ  ‚îú‚îÄ –û–¥–∏–Ω —à–ª—è—Ö ‚Üí Bellman-Ford
    ‚îÇ  ‚îÇ
    ‚îÇ  ‚îî‚îÄ –í—Å—ñ –ø–∞—Ä–∏ —à–ª—è—Ö—ñ–≤
    ‚îÇ     ‚îÇ
    ‚îÇ     ‚îú‚îÄ –ú–∞–ª–µ–Ω—å–∫–∏–π –≥—Ä–∞—Ñ (<100 –≤—É–∑–ª—ñ–≤) ‚Üí Floyd-Warshall
    ‚îÇ     ‚îÇ
    ‚îÇ     ‚îî‚îÄ –í–µ–ª–∏–∫–∏–π –≥—Ä–∞—Ñ ‚Üí Johnson
    ‚îÇ
    ‚îî‚îÄ –ù–Ü (—Ç—ñ–ª—å–∫–∏ –ø–æ–∑–∏—Ç–∏–≤–Ω—ñ –≤–∞–≥–∏)
       ‚îÇ
       ‚îú‚îÄ –ß–∏ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –≤—Å—ñ –ø–∞—Ä–∏ —à–ª—è—Ö—ñ–≤?
       ‚îÇ  ‚îÇ
       ‚îÇ  ‚îú‚îÄ –¢–ê–ö
       ‚îÇ  ‚îÇ  ‚îÇ
       ‚îÇ  ‚îÇ  ‚îú‚îÄ –ú–∞–ª–µ–Ω—å–∫–∏–π –≥—Ä–∞—Ñ (<200 –≤—É–∑–ª—ñ–≤) ‚Üí Floyd-Warshall
       ‚îÇ  ‚îÇ  ‚îÇ
       ‚îÇ  ‚îÇ  ‚îî‚îÄ –í–µ–ª–∏–∫–∏–π –≥—Ä–∞—Ñ ‚Üí Johnson –∞–±–æ –±–∞–≥–∞—Ç–æ —Ä–∞–∑—ñ–≤ Dijkstra
       ‚îÇ  ‚îÇ
       ‚îÇ  ‚îî‚îÄ –ù–Ü (–æ–¥–∏–Ω —à–ª—è—Ö)
       ‚îÇ     ‚îÇ
       ‚îÇ     ‚îú‚îÄ –ß–∏ —î –≥–µ–æ–≥—Ä–∞—Ñ—ñ—á–Ω—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏/–µ–≤—Ä–∏—Å—Ç–∏–∫–∞?
       ‚îÇ     ‚îÇ  ‚îÇ
       ‚îÇ     ‚îÇ  ‚îú‚îÄ –¢–ê–ö ‚Üí A* (–Ω–∞–π—à–≤–∏–¥—à–∏–π!)
       ‚îÇ     ‚îÇ  ‚îÇ
       ‚îÇ     ‚îÇ  ‚îî‚îÄ –ù–Ü ‚Üí –î—ñ–∞–º–µ—Ç—Ä –≥—Ä–∞—Ñ—É –≤–µ–ª–∏–∫–∏–π?
       ‚îÇ     ‚îÇ     ‚îÇ
       ‚îÇ     ‚îÇ     ‚îú‚îÄ –¢–ê–ö ‚Üí Bidirectional Search
       ‚îÇ     ‚îÇ     ‚îÇ
       ‚îÇ     ‚îÇ     ‚îî‚îÄ –ù–Ü ‚Üí Dijkstra
       ‚îÇ
       ‚îî‚îÄ –ë–∞–≥–∞—Ç–æ –∑–∞–ø–∏—Ç—ñ–≤ –Ω–∞ —Å—Ç–∞—Ç–∏—á–Ω–æ–º—É –≥—Ä–∞—Ñ—ñ?
          ‚îÇ
          ‚îî‚îÄ –¢–ê–ö ‚Üí Contraction Hierarchies (–ø—Ä–µ–ø—Ä–æ—Ü–µ—Å–∏–Ω–≥ + —à–≤–∏–¥–∫—ñ –∑–∞–ø–∏—Ç–∏)
    
    """)
    
    print("\nüí° –®–í–ò–î–ö–Ü –†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–á –ó–ê –î–û–ú–ï–ù–ê–ú–ò:")
    print("-" * 80)
    
    domain_recommendations = {
        'GPS/–ù–∞–≤—ñ–≥–∞—Ü—ñ—è': 'A* –∑ Euclidean heuristic –∞–±–æ Contraction Hierarchies',
        '–°–æ—Ü—ñ–∞–ª—å–Ω—ñ –º–µ—Ä–µ–∂—ñ': 'Bidirectional Search (–≤—ñ–¥–æ–º—ñ start/goal)',
        '–Ü–≥—Ä–∏ (—Å—ñ—Ç–∫–∏)': 'A* –∑ Manhattan heuristic',
        '–õ–æ–≥—ñ—Å—Ç–∏–∫–∞': 'Dijkstra –∞–±–æ Floyd-Warshall (–º–∞–ª—ñ –º–µ—Ä–µ–∂—ñ)',
        '–§—ñ–Ω–∞–Ω—Å–∏/–ê—Ä–±—ñ—Ç—Ä–∞–∂': 'Bellman-Ford (–≤—ñ–¥\'—î–º–Ω—ñ –≤–∞–≥–∏)',
        '–ú–µ—Ä–µ–∂–µ–≤–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü—ñ—è': 'Dijkstra –∞–±–æ Contraction Hierarchies',
        '–ê–Ω–∞–ª—ñ–∑ –≥—Ä–∞—Ñ—ñ–≤': 'Floyd-Warshall –∞–±–æ Johnson (–≤—Å—ñ –ø–∞—Ä–∏)'
    }
    
    for domain, recommendation in domain_recommendations.items():
        print(f"  {domain:.<30} {recommendation}")

create_decision_tree()


# %% [markdown]
#  ## 12. –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è –º–∞—Å—à—Ç–∞–±–æ–≤–∞–Ω–æ—Å—Ç—ñ

# %%
def create_scalability_analysis():
    """–ê–Ω–∞–ª—ñ–∑ –º–∞—Å—à—Ç–∞–±–æ–≤–∞–Ω–æ—Å—Ç—ñ –∞–ª–≥–æ—Ä–∏—Ç–º—ñ–≤"""
    print("\nüìà –ê–ù–ê–õ–Ü–ó –ú–ê–°–®–¢–ê–ë–û–í–ê–ù–û–°–¢–Ü")
    print("="*80)
    
    fig, axes = plt.subplots(2, 2, figsize=(16, 12))
    
    # –¢–µ–æ—Ä–µ—Ç–∏—á–Ω—ñ —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ
    n = np.logspace(1, 3, 50)  # –≤—ñ–¥ 10 –¥–æ 1000
    
    complexities = {
        'A* O(E)': n * np.log2(n) * 0.5,  # –ø—Ä–∏–±–ª–∏–∑–Ω–æ
        'Dijkstra O(E log V)': n * np.log2(n),
        'Bellman-Ford O(VE)': n**2,
        'Floyd-Warshall O(V¬≥)': n**3,
    }
    
    # –ì—Ä–∞—Ñ—ñ–∫ 1: –ê–±—Å–æ–ª—é—Ç–Ω–∞ —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å
    ax = axes[0, 0]
    for name, values in complexities.items():
        ax.plot(n, values, label=name, linewidth=2)
    ax.set_xlabel('–ö—ñ–ª—å–∫—ñ—Å—Ç—å –≤—É–∑–ª—ñ–≤')
    ax.set_ylabel('–û–ø–µ—Ä–∞—Ü—ñ—ó')
    ax.set_title('–¢–µ–æ—Ä–µ—Ç–∏—á–Ω–∞ —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º—ñ–≤')
    ax.legend()
    ax.grid(True, alpha=0.3)
    ax.set_xscale('log')
    ax.set_yscale('log')
    
    # –ì—Ä–∞—Ñ—ñ–∫ 2: –í—ñ–¥–Ω–æ—Å–Ω–µ –ø—Ä–∏—Å–∫–æ—Ä–µ–Ω–Ω—è A* vs Dijkstra
    ax = axes[0, 1]
    speedup_theoretical = complexities['Dijkstra O(E log V)'] / complexities['A* O(E)']
    ax.plot(n, speedup_theoretical, 'r-', linewidth=2, label='–¢–µ–æ—Ä–µ—Ç–∏—á–Ω–µ')
    ax.axhline(y=2, color='green', linestyle='--', alpha=0.5, label='2x –ø—Ä–∏—Å–∫–æ—Ä–µ–Ω–Ω—è')
    ax.set_xlabel('–ö—ñ–ª—å–∫—ñ—Å—Ç—å –≤—É–∑–ª—ñ–≤')
    ax.set_ylabel('–ü—Ä–∏—Å–∫–æ—Ä–µ–Ω–Ω—è (—Ä–∞–∑—ñ–≤)')
    ax.set_title('–ü—Ä–∏—Å–∫–æ—Ä–µ–Ω–Ω—è A* –≤—ñ–¥–Ω–æ—Å–Ω–æ Dijkstra')
    ax.legend()
    ax.grid(True, alpha=0.3)
    ax.set_xscale('log')
    
    # –ì—Ä–∞—Ñ—ñ–∫ 3: –ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤ –≥—Ä–∞—Ñ—ñ–≤
    ax = axes[1, 0]
    
    graph_types = ['–†–æ–∑—Ä—ñ–¥–∂–µ–Ω–∏–π\n(E~V)', '–°–µ—Ä–µ–¥–Ω—ñ–π\n(E~V log V)', '–©—ñ–ª—å–Ω–∏–π\n(E~V¬≤)']
    dijkstra_times = [100, 200, 500]
    astar_times = [50, 80, 200]
    bidirectional_times = [40, 90, 250]
    
    x = np.arange(len(graph_types))
    width = 0.25
    
    ax.bar(x - width, dijkstra_times, width, label='Dijkstra', color='blue', alpha=0.7)
    ax.bar(x, astar_times, width, label='A*', color='red', alpha=0.7)
    ax.bar(x + width, bidirectional_times, width, label='Bidirectional', color='green', alpha=0.7)
    
    ax.set_xlabel('–¢–∏–ø –≥—Ä–∞—Ñ—É')
    ax.set_ylabel('–í—ñ–¥–Ω–æ—Å–Ω–∏–π —á–∞—Å')
    ax.set_title('–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –Ω–∞ —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø–∞—Ö –≥—Ä–∞—Ñ—ñ–≤')
    ax.set_xticks(x)
    ax.set_xticklabels(graph_types)
    ax.legend()
    ax.grid(True, alpha=0.3, axis='y')
    
    # –ì—Ä–∞—Ñ—ñ–∫ 4: –ü–∞–º'—è—Ç—å vs —à–≤–∏–¥–∫—ñ—Å—Ç—å –∫–æ–º–ø—Ä–æ–º—ñ—Å
    ax = axes[1, 1]
    
    algorithms_memory = {
        'A*': (1.5, 0.3, 'red'),  # (—à–≤–∏–¥–∫—ñ—Å—Ç—å, –ø–∞–º'—è—Ç—å)
        'Dijkstra': (1.0, 0.5, 'blue'),
        'Bidirectional': (1.8, 0.6, 'green'),
        'Bellman-Ford': (0.2, 0.5, 'orange'),
        'Floyd-Warshall': (0.1, 2.0, 'purple'),
        'Contraction H.': (3.0, 1.5, 'brown')
    }
    
    for name, (speed, memory, color) in algorithms_memory.items():
        ax.scatter(memory, speed, s=300, c=color, alpha=0.6, edgecolors='black', linewidth=2)
        ax.annotate(name, (memory, speed), fontsize=10, ha='center', va='center')
    
    ax.set_xlabel('–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø–∞–º\'—è—Ç—ñ (–≤—ñ–¥–Ω–æ—Å–Ω–æ)', fontsize=11)
    ax.set_ylabel('–®–≤–∏–¥–∫—ñ—Å—Ç—å (–≤—ñ–¥–Ω–æ—Å–Ω–æ)', fontsize=11)
    ax.set_title('–ö–æ–º–ø—Ä–æ–º—ñ—Å –ø–∞–º\'—è—Ç—å vs —à–≤–∏–¥–∫—ñ—Å—Ç—å', fontsize=12, fontweight='bold')
    ax.grid(True, alpha=0.3)
    ax.axhline(y=1, color='gray', linestyle='--', alpha=0.3)
    ax.axvline(x=0.5, color='gray', linestyle='--', alpha=0.3)
    
    plt.tight_layout()
    plt.savefig('scalability_analysis.png', dpi=300, bbox_inches='tight')
    plt.show()
    
    print("\n–í–∏—Å–Ω–æ–≤–∫–∏:")
    print("  ‚Ä¢ A* –Ω–∞–π–µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—à–∏–π –ø—Ä–∏ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –µ–≤—Ä–∏—Å—Ç–∏–∫–∏")
    print("  ‚Ä¢ Bidirectional —á—É–¥–æ–≤–∏–π –¥–ª—è –≤–µ–ª–∏–∫–∏—Ö –≥—Ä–∞—Ñ—ñ–≤")
    print("  ‚Ä¢ Floyd-Warshall –ø—Ä–∞—Ü—é—î —Ç—ñ–ª—å–∫–∏ –¥–ª—è –º–∞–ª–∏—Ö –≥—Ä–∞—Ñ—ñ–≤")
    print("  ‚Ä¢ Contraction Hierarchies - –∫–æ–º–ø—Ä–æ–º—ñ—Å: –±–∞–≥–∞—Ç–æ –ø–∞–º'—è—Ç—ñ, –∞–ª–µ –Ω–∞–¥—à–≤–∏–¥–∫–æ")

create_scalability_analysis()


# %% [markdown]
#  ## 13. –ï–∫—Å–ø–µ—Ä—Ç–Ω—ñ –ø–æ—Ä–∞–¥–∏ —Ç–∞ –ø—ñ–¥–≤–æ–¥–Ω—ñ –∫–∞–º–µ–Ω—ñ

# %%
def print_expert_tips():
    """–ï–∫—Å–ø–µ—Ä—Ç–Ω—ñ –ø–æ—Ä–∞–¥–∏ —Ç–∞ —Ç–∏–ø–æ–≤—ñ –ø–æ–º–∏–ª–∫–∏"""
    print("\nüéì –ï–ö–°–ü–ï–†–¢–ù–Ü –ü–û–†–ê–î–ò –¢–ê –ü–Ü–î–í–û–î–ù–Ü –ö–ê–ú–ï–ù–Ü")
    print("="*80)
    
    print("\n1Ô∏è‚É£ –í–ò–ë–Ü–† –ê–õ–ì–û–†–ò–¢–ú–£")
    print("-" * 40)
    print("""
    ‚úì –ó–∞–≤–∂–¥–∏ –ø–æ—á–∏–Ω–∞–π—Ç–µ –∑ –∞–Ω–∞–ª—ñ–∑—É –¥–∞–Ω–∏—Ö:
      - –†–æ–∑–º—ñ—Ä –≥—Ä–∞—Ñ—É (V, E)
      - –¢–∏–ø –≥—Ä–∞—Ñ—É (—Ä–æ–∑—Ä—ñ–¥–∂–µ–Ω–∏–π/—â—ñ–ª—å–Ω–∏–π)
      - –ù–∞—è–≤–Ω—ñ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
      - –ß–∏ —î –≤—ñ–¥'—î–º–Ω—ñ –≤–∞–≥–∏
      - –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Ç—ñ–≤
    
    ‚úó –¢–∏–ø–æ–≤–∞ –ø–æ–º–∏–ª–∫–∞: –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è Floyd-Warshall –¥–ª—è –≤–µ–ª–∏–∫–∏—Ö –≥—Ä–∞—Ñ—ñ–≤
      ‚Üí –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ Johnson –∞–±–æ –±–∞–≥–∞—Ç–æ —Ä–∞–∑—ñ–≤ Dijkstra
    """)
    
    print("\n2Ô∏è‚É£ –û–ü–¢–ò–ú–Ü–ó–ê–¶–Ü–Ø A*")
    print("-" * 40)
    print("""
    ‚úì –í–∏–±—ñ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ—ó –µ–≤—Ä–∏—Å—Ç–∏–∫–∏ –∫—Ä–∏—Ç–∏—á–Ω–∏–π:
      - Euclidean: –≥–µ–æ–≥—Ä–∞—Ñ—ñ—á–Ω—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏
      - Manhattan: —Å—ñ—Ç–∫–∏ (—ñ–≥—Ä–∏, –ª–∞–±—ñ—Ä–∏–Ω—Ç–∏)
      - Chebyshev: –¥—ñ–∞–≥–æ–Ω–∞–ª—å–Ω–∏–π —Ä—É—Ö
      - –û–∫—Ç–∏–ª—å–Ω–∞: –¥—ñ–∞–≥–æ–Ω–∞–ª—å + –ø—Ä—è–º–æ
    
    ‚úì –ï–≤—Ä–∏—Å—Ç–∏–∫–∞ –º–∞—î –±—É—Ç–∏ –¥–æ–ø—É—Å—Ç–∏–º–æ—é (admissible):
      h(n) ‚â§ —Ä–µ–∞–ª—å–Ω–∞ –≤—ñ–¥—Å—Ç–∞–Ω—å –¥–æ –º–µ—Ç–∏
    
    ‚úó –¢–∏–ø–æ–≤–∞ –ø–æ–º–∏–ª–∫–∞: –∑–∞–Ω–∞–¥—Ç–æ –æ–ø—Ç–∏–º—ñ—Å—Ç–∏—á–Ω–∞ –µ–≤—Ä–∏—Å—Ç–∏–∫–∞
      ‚Üí –ü–æ—Ä—É—à—É—î –æ–ø—Ç–∏–º–∞–ª—å–Ω—ñ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
    """)
    
    print("\n3Ô∏è‚É£ –ü–†–û–î–£–ö–¢–ò–í–ù–Ü–°–¢–¨")
    print("-" * 40)
    print("""
    ‚úì –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –¥–∞–Ω–∏—Ö:
      - –ë—ñ–Ω–∞—Ä–Ω–∞ –∫—É–ø–∞: –¥–ª—è Dijkstra
      - Fibonacci heap: —Ç–µ–æ—Ä–µ—Ç–∏—á–Ω–æ –∫—Ä–∞—â–µ, –ø—Ä–∞–∫—Ç–∏—á–Ω–æ —Ä—ñ–¥–∫–æ
      - Hash map: –¥–ª—è visited/distances
    
    ‚úì –†–∞–Ω–Ω—ñ–π –≤–∏—Ö—ñ–¥ (early exit):
      - –ó—É–ø–∏–Ω—è–π—Ç–µ Dijkstra –ø—Ä–∏ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—ñ –º–µ—Ç–∏
      - –ù–µ –æ–±—Ä–æ–±–ª—è–π—Ç–µ –≤—Å—ñ –≤—É–∑–ª–∏ —è–∫—â–æ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ
    
    ‚úó –¢–∏–ø–æ–≤–∞ –ø–æ–º–∏–ª–∫–∞: –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –∑–∞–º—ñ—Å—Ç—å –∫—É–ø–∏
      ‚Üí –°–∫–ª–∞–¥–Ω—ñ—Å—Ç—å O(V¬≤) –∑–∞–º—ñ—Å—Ç—å O(E log V)
    """)
    
    print("\n4Ô∏è‚É£ –ü–ê–†–ê–õ–ï–õ–Ü–ó–ê–¶–Ü–Ø")
    print("-" * 40)
    print("""
    ‚úì –©–æ –º–æ–∂–Ω–∞ –ø–∞—Ä–∞–ª–µ–ª—ñ–∑—É–≤–∞—Ç–∏:
      - Bidirectional search (2 –ø–∞—Ä–∞–ª–µ–ª—å–Ω—ñ –ø–æ—à—É–∫–∏)
      - –ë–∞–≥–∞—Ç–æ –Ω–µ–∑–∞–ª–µ–∂–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤
      - Contraction Hierarchies (–ø—Ä–µ–ø—Ä–æ—Ü–µ—Å–∏–Ω–≥)
    
    ‚úó –°–∫–ª–∞–¥–Ω–æ –ø–∞—Ä–∞–ª–µ–ª—ñ–∑—É–≤–∞—Ç–∏:
      - –û–¥–∏–Ω –∑–∞–ø–∏—Ç Dijkstra/A*
      - Bellman-Ford (–ø–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ —Ä–µ–ª–∞–∫—Å–∞—Ü—ñ—ó)
    """)
    
    print("\n5Ô∏è‚É£ –°–ü–ï–¶–Ü–ê–õ–¨–ù–Ü –í–ò–ü–ê–î–ö–ò")
    print("-" * 40)
    print("""
    ‚úì –ù–µ–≤–µ–ª–∏–∫—ñ –≥—Ä–∞—Ñ–∏ (<100 –≤—É–∑–ª—ñ–≤):
      - –ü—Ä–æ—Å—Ç–∏–π Dijkstra —á–∞—Å—Ç–æ –Ω–∞–π–∫—Ä–∞—â–∏–π
      - Overhead —Å–∫–ª–∞–¥–Ω–∏—Ö –º–µ—Ç–æ–¥—ñ–≤ –Ω–µ –≤–∏–ø—Ä–∞–≤–¥–∞–Ω–∏–π
    
    ‚úì –î—É–∂–µ –≤–µ–ª–∏–∫—ñ –≥—Ä–∞—Ñ–∏ (>1M –≤—É–∑–ª—ñ–≤):
      - Contraction Hierarchies –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π
      - –ê–±–æ —ñ—î—Ä–∞—Ä—Ö—ñ—á–Ω—ñ –º–µ—Ç–æ–¥–∏ (ALT)
    
    ‚úì –î–∏–Ω–∞–º—ñ—á–Ω—ñ –≥—Ä–∞—Ñ–∏ (–∑–º—ñ–Ω—é—é—Ç—å—Å—è –≤–∞–≥–∏):
      - –£–Ω–∏–∫–∞–π—Ç–µ –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å–∏–Ω–≥—É
      - –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ A* –∞–±–æ Dijkstra
      - –Ü–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω—ñ –∞–ª–≥–æ—Ä–∏—Ç–º–∏ (D* Lite)
    """)
    
    print("\n6Ô∏è‚É£ –ù–ê–õ–ê–ì–û–î–ñ–ï–ù–ù–Ø")
    print("-" * 40)
    print("""
    ‚úì –ó–∞–≤–∂–¥–∏ –ø–µ—Ä–µ–≤—ñ—Ä—è–π—Ç–µ:
      - –ß–∏ —à–ª—è—Ö —ñ—Å–Ω—É—î (–≥—Ä–∞—Ñ –∑–≤'—è–∑–Ω–∏–π?)
      - –ß–∏ –≤—Å—ñ –≤–∞–≥–∏ –ø–æ–∑–∏—Ç–∏–≤–Ω—ñ (—è–∫—â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç–µ Dijkstra)
      - –ß–∏ –µ–≤—Ä–∏—Å—Ç–∏–∫–∞ –¥–æ–ø—É—Å—Ç–∏–º–∞ (–¥–ª—è A*)
      - –ß–∏ –Ω–µ–º–∞—î –≤—ñ–¥'—î–º–Ω–∏—Ö —Ü–∏–∫–ª—ñ–≤
    
    ‚úì –í—ñ–∑—É–∞–ª—ñ–∑—É–π—Ç–µ:
      - –í—ñ–¥–≤—ñ–¥–∞–Ω—ñ –≤—É–∑–ª–∏
      - –ó–Ω–∞–π–¥–µ–Ω–∏–π —à–ª—è—Ö
      - –ü–æ—Ä—è–¥–æ–∫ –æ–±—Ä–æ–±–∫–∏
    """)
    
    print("\n7Ô∏è‚É£ –ü–†–ê–ö–¢–ò–ß–ù–Ü –û–ü–¢–ò–ú–Ü–ó–ê–¶–Ü–á")
    print("-" * 40)
    print("""
    ‚úì Bidirectional A*:
      - –ö–æ–º–±—ñ–Ω—É—î –ø–µ—Ä–µ–≤–∞–≥–∏ –æ–±–æ—Ö –ø—ñ–¥—Ö–æ–¥—ñ–≤
      - –°–∫–ª–∞–¥–Ω—ñ—à–∞ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è, –∞–ª–µ —à–≤–∏–¥—à–µ
    
    ‚úì Jump Point Search (–¥–ª—è —Å—ñ—Ç–æ–∫):
      - –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è A* –¥–ª—è uniform-cost —Å—ñ—Ç–æ–∫
      - –î–æ 10x —à–≤–∏–¥—à–µ –Ω–∞ –≤–µ–ª–∏–∫–∏—Ö —Å—ñ—Ç–∫–∞—Ö
    
    ‚úì Landmark-based methods (ALT):
      - –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è "–æ—Ä—ñ—î–Ω—Ç–∏—Ä—ñ–≤" –¥–ª—è –µ–≤—Ä–∏—Å—Ç–∏–∫–∏
      - –•–æ—Ä–æ—à–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ CH
    """)

print_expert_tips()


# %% [markdown]
#  ## 14. –§—ñ–Ω–∞–ª—å–Ω–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω–µ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è

# %%
def create_final_comparison():
    """–§—ñ–Ω–∞–ª—å–Ω–µ –≤—Å–µ–æ—Å—è–∂–Ω–µ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è"""
    print("\nüèÜ –§–Ü–ù–ê–õ–¨–ù–ï –ö–û–ú–ü–õ–ï–ö–°–ù–ï –ü–û–†–Ü–í–ù–Ø–ù–ù–Ø")
    print("="*80)
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ä—ñ–∑–Ω—ñ —Ç–∏–ø–∏ –≥—Ä–∞—Ñ—ñ–≤
    scenarios = {
        '–ú–∞–ª–µ–Ω—å–∫–∏–π —â—ñ–ª—å–Ω–∏–π': (50, 0.3),
        '–°–µ—Ä–µ–¥–Ω—ñ–π —Ä–æ–∑—Ä—ñ–¥–∂–µ–Ω–∏–π': (200, 0.08),
        '–í–µ–ª–∏–∫–∏–π —Ä–æ–∑—Ä—ñ–¥–∂–µ–Ω–∏–π': (500, 0.05)
    }
    
    all_results = []
    
    for scenario_name, (size, connectivity) in scenarios.items():
        print(f"\n{'='*80}")
        print(f"–°—Ü–µ–Ω–∞—Ä—ñ–π: {scenario_name} ({size} –≤—É–∑–ª—ñ–≤, connectivity={connectivity})")
        print('='*80)
        
        graph, positions = GraphGenerator.create_city_road_network(size, connectivity)
        nodes = list(graph.nodes())
        start, goal = nodes[0], nodes[-1]
        
        print(f"–ì—Ä–∞—Ñ: {graph.number_of_nodes()} –≤—É–∑–ª—ñ–≤, {graph.number_of_edges()} —Ä–µ–±–µ—Ä")
        print(f"–©—ñ–ª—å–Ω—ñ—Å—Ç—å: {2*graph.number_of_edges()/(size*(size-1)):.4f}")
        
        # –¢–µ—Å—Ç—É—î–º–æ –≤—Å—ñ –∞–ª–≥–æ—Ä–∏—Ç–º–∏
        algorithms = []
        
        # Dijkstra
        result = DijkstraAlgorithm.find_shortest_path(graph, start, goal)
        algorithms.append(('Dijkstra', result))
        
        # A*
        result = AStarAlgorithm.find_shortest_path(graph, start, goal, positions, 'euclidean')
        algorithms.append(('A* (Euclidean)', result))
        
        # Bidirectional
        result = BidirectionalSearch.find_shortest_path(graph, start, goal)
        algorithms.append(('Bidirectional', result))
        
        # Bellman-Ford (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –º–∞–ª–∏—Ö –≥—Ä–∞—Ñ—ñ–≤)
        if size <= 200:
            result, _ = BellmanFordAlgorithm.find_shortest_path(graph, start, goal)
            algorithms.append(('Bellman-Ford', result))
        
        # –í–∏–≤–æ–¥–∏–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
        print(f"\n{'–ê–ª–≥–æ—Ä–∏—Ç–º':<20} {'–ß–∞—Å (ms)':<12} {'–í—ñ–¥–≤—ñ–¥–∞–Ω–æ':<12} {'–í—ñ–¥—Å—Ç–∞–Ω—å':<12} {'–ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å'}")
        print('-'*80)
        
        dijkstra_visited = algorithms[0][1].visited_nodes
        
        for name, result in algorithms:
            efficiency = dijkstra_visited / result.visited_nodes if result.visited_nodes > 0 else 1
            print(f"{name:<20} {result.execution_time:>10.3f}  {result.visited_nodes:>10}  "
                  f"{result.distance:>10.2f}  {efficiency:>6.2f}x")
            
            all_results.append({
                'Scenario': scenario_name,
                'Size': size,
                'Algorithm': name,
                'Time (ms)': result.execution_time,
                'Visited': result.visited_nodes,
                'Distance': result.distance,
                'Efficiency': efficiency
            })
    
    return pd.DataFrame(all_results)

final_comparison = create_final_comparison()


# %%
# –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è —Ñ—ñ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è
def visualize_final_comparison(df):
    """–í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è —Ñ—ñ–Ω–∞–ª—å–Ω–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤"""
    fig, axes = plt.subplots(2, 2, figsize=(16, 12))
    
    scenarios = df['Scenario'].unique()
    
    # –ì—Ä–∞—Ñ—ñ–∫ 1: –ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
    ax = axes[0, 0]
    for scenario in scenarios:
        scenario_data = df[df['Scenario'] == scenario]
        ax.bar(scenario_data['Algorithm'], scenario_data['Time (ms)'], 
               label=scenario, alpha=0.7)
    ax.set_ylabel('–ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è (–º—Å)')
    ax.set_title('–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —á–∞—Å—É –≤–∏–∫–æ–Ω–∞–Ω–Ω—è')
    ax.legend()
    ax.grid(True, alpha=0.3, axis='y')
    ax.tick_params(axis='x', rotation=45)
    
    # –ì—Ä–∞—Ñ—ñ–∫ 2: –í—ñ–¥–≤—ñ–¥–∞–Ω—ñ –≤—É–∑–ª–∏
    ax = axes[0, 1]
    for scenario in scenarios:
        scenario_data = df[df['Scenario'] == scenario]
        ax.bar(scenario_data['Algorithm'], scenario_data['Visited'], 
               label=scenario, alpha=0.7)
    ax.set_ylabel('–í—ñ–¥–≤—ñ–¥–∞–Ω—ñ –≤—É–∑–ª–∏')
    ax.set_title('–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –≤—ñ–¥–≤—ñ–¥–∞–Ω–∏—Ö –≤—É–∑–ª—ñ–≤')
    ax.legend()
    ax.grid(True, alpha=0.3, axis='y')
    ax.set_yscale('log')
    ax.tick_params(axis='x', rotation=45)
    
    # –ì—Ä–∞—Ñ—ñ–∫ 3: –ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å
    ax = axes[1, 0]
    algorithms = ['A* (Euclidean)', 'Bidirectional']
    for algo in algorithms:
        algo_data = df[df['Algorithm'] == algo].groupby('Scenario')['Efficiency'].mean()
        ax.plot(algo_data.index, algo_data.values, 'o-', label=algo, linewidth=2, markersize=8)
    ax.axhline(y=1, color='gray', linestyle='--', alpha=0.5, label='Dijkstra (baseline)')
    ax.set_ylabel('–ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å (—Ä–∞–∑—ñ–≤)')
    ax.set_title('–ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –≤—ñ–¥–Ω–æ—Å–Ω–æ Dijkstra')
    ax.legend()
    ax.grid(True, alpha=0.3)
    
    # –ì—Ä–∞—Ñ—ñ–∫ 4: –ß–∞—Å vs –ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å
    ax = axes[1, 1]
    for scenario in scenarios:
        scenario_data = df[(df['Scenario'] == scenario) & (df['Algorithm'] != 'Dijkstra')]
        ax.scatter(scenario_data['Time (ms)'], scenario_data['Efficiency'], 
                  s=200, alpha=0.6, label=scenario)
        
        for _, row in scenario_data.iterrows():
            ax.annotate(row['Algorithm'].split()[0], 
                       (row['Time (ms)'], row['Efficiency']),
                       fontsize=8, ha='center')
    
    ax.set_xlabel('–ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è (–º—Å)')
    ax.set_ylabel('–ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å (—Ä–∞–∑—ñ–≤)')
    ax.set_title('–ö–æ–º–ø—Ä–æ–º—ñ—Å —á–∞—Å vs –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å')
    ax.legend()
    ax.grid(True, alpha=0.3)
    
    plt.tight_layout()
    plt.savefig('final_comparison.png', dpi=300, bbox_inches='tight')
    plt.show()

visualize_final_comparison(final_comparison)


# %% [markdown]
#  ## 15. –í–∏—Å–Ω–æ–≤–∫–∏ —Ç–∞ –ø—Ä–∞–∫—Ç–∏—á–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó

# %%
print("\n" + "="*80)
print("üéØ –ì–û–õ–û–í–ù–Ü –í–ò–°–ù–û–í–ö–ò –¢–ê –†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–á")
print("="*80)

print("""
üìä –†–ï–ó–£–õ–¨–¢–ê–¢–ò –î–û–°–õ–Ü–î–ñ–ï–ù–ù–Ø:

1. A* - –ë–ï–ó–£–ú–û–í–ù–ò–ô –õ–Ü–î–ï–† –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ä–æ–≤–æ–≥–æ –ø–æ—à—É–∫—É
   ‚úì 2-5x –º–µ–Ω—à–µ –≤—ñ–¥–≤—ñ–¥–∞–Ω–∏—Ö –≤—É–∑–ª—ñ–≤ –Ω—ñ–∂ Dijkstra
   ‚úì –û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏ –¥–æ–ø—É—Å—Ç–∏–º—ñ–π –µ–≤—Ä–∏—Å—Ç–∏—Ü—ñ
   ‚úì –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è: GPS, —ñ–≥—Ä–∏, —Ä–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω—ñ–∫–∞

2. Bidirectional Search - –ß–£–î–û–í–ò–ô –í–ò–ë–Ü–† –¥–ª—è –≤–µ–ª–∏–∫–∏—Ö –≥—Ä–∞—Ñ—ñ–≤
   ‚úì –ï–∫—Å–ø–æ–Ω–µ–Ω—Ü—ñ–π–Ω–µ –∑–º–µ–Ω—à–µ–Ω–Ω—è –ø—Ä–æ—Å—Ç–æ—Ä—É –ø–æ—à—É–∫—É
   ‚úì –ü—Ä–∞—Ü—é—î –±–µ–∑ –µ–≤—Ä–∏—Å—Ç–∏–∫–∏
   ‚úì –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è: —Å–æ—Ü—ñ–∞–ª—å–Ω—ñ –º–µ—Ä–µ–∂—ñ, –≤–µ–ª–∏–∫—ñ –º–µ—Ä–µ–∂—ñ

3. Dijkstra - –ù–ê–î–Ü–ô–ù–ò–ô –ë–ê–ó–û–í–ò–ô –í–ò–ë–Ü–†
   ‚úì –ì–∞—Ä–∞–Ω—Ç—É—î –æ–ø—Ç–∏–º–∞–ª—å–Ω—ñ—Å—Ç—å
   ‚úì –ü—Ä–æ—Å—Ç–∏–π —É —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—ó
   ‚úì –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è: –∫–æ–ª–∏ –Ω–µ–º–∞—î –∫—Ä–∞—â–æ—ó –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∏

4. Contraction Hierarchies - –î–õ–Ø –ü–†–û–î–ê–ö–®–ù –°–ò–°–¢–ï–ú
   ‚úì –ú—ñ–∫—Ä–æ—Å–µ–∫—É–Ω–¥–Ω—ñ –∑–∞–ø–∏—Ç–∏ –ø—ñ—Å–ª—è –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å–∏–Ω–≥—É
   ‚úì –û—Å–Ω–æ–≤–∞ OSRM, Google Maps
   ‚úì –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è: –Ω–∞–≤—ñ–≥–∞—Ü—ñ–π–Ω—ñ —Å–∏—Å—Ç–µ–º–∏

5. Bellman-Ford - –°–ü–ï–¶–Ü–ê–õ–Ü–ó–û–í–ê–ù–ò–ô –Ü–ù–°–¢–†–£–ú–ï–ù–¢
   ‚úì –Ñ–¥–∏–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç –¥–ª—è –≤—ñ–¥'—î–º–Ω–∏—Ö –≤–∞–≥
   ‚úì –í–∏—è–≤–ª—è—î –≤—ñ–¥'—î–º–Ω—ñ —Ü–∏–∫–ª–∏
   ‚úì –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è: –∞—Ä–±—ñ—Ç—Ä–∞–∂, —Ñ—ñ–Ω–∞–Ω—Å–æ–≤—ñ –≥—Ä–∞—Ñ–∏

6. Floyd-Warshall/Johnson - –î–õ–Ø –ê–ù–ê–õ–Ü–ó–£ –ì–†–ê–§–Ü–í
   ‚úì –í—Å—ñ –ø–∞—Ä–∏ —à–ª—è—Ö—ñ–≤ –æ–¥–Ω–æ—á–∞—Å–Ω–æ
   ‚úì –¢—ñ–ª—å–∫–∏ –¥–ª—è –º–∞–ª–∏—Ö/—Å–µ—Ä–µ–¥–Ω—ñ—Ö –≥—Ä–∞—Ñ—ñ–≤
   ‚úì –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è: –∞–Ω–∞–ª—ñ–∑ –º–µ—Ä–µ–∂, –º–µ—Ç—Ä–∏–∫–∏ –≥—Ä–∞—Ñ—ñ–≤

""")

print("\nüí° –ü–†–ê–ö–¢–ò–ß–ù–Ü –†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–á –ó–ê –†–û–ó–ú–Ü–†–û–ú:")
print("-"*80)
print("""
–ú–∞–ª—ñ –≥—Ä–∞—Ñ–∏ (<100 –≤—É–∑–ª—ñ–≤):
  ‚Üí Dijkstra –∞–±–æ –ø—Ä–æ—Å—Ç–∏–π BFS (overhead —Å–∫–ª–∞–¥–Ω–∏—Ö –º–µ—Ç–æ–¥—ñ–≤ –Ω–µ –≤–∏–ø—Ä–∞–≤–¥–∞–Ω–∏–π)

–°–µ—Ä–µ–¥–Ω—ñ –≥—Ä–∞—Ñ–∏ (100-1000 –≤—É–∑–ª—ñ–≤):
  ‚Üí A* —è–∫—â–æ —î –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏
  ‚Üí Bidirectional –¥–ª—è –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ –≤–∏–ø–∞–¥–∫—É
  ‚Üí Floyd-Warshall –¥–ª—è –≤—Å—ñ—Ö –ø–∞—Ä

–í–µ–ª–∏–∫—ñ –≥—Ä–∞—Ñ–∏ (>1000 –≤—É–∑–ª—ñ–≤):
  ‚Üí A* –∑ –¥–æ–±—Ä–∏–º heuristic
  ‚Üí Bidirectional –æ–±–æ–≤'—è–∑–∫–æ–≤–æ
  ‚Üí Contraction Hierarchies –¥–ª—è –±–∞–≥–∞—Ç—å–æ—Ö –∑–∞–ø–∏—Ç—ñ–≤

–í–µ–ª–∏—á–µ–∑–Ω—ñ –≥—Ä–∞—Ñ–∏ (>100k –≤—É–∑–ª—ñ–≤):
  ‚Üí –¢—ñ–ª—å–∫–∏ Contraction Hierarchies –∞–±–æ ALT
  ‚Üí –†–æ–∑–ø–æ–¥—ñ–ª–µ–Ω—ñ –∞–ª–≥–æ—Ä–∏—Ç–º–∏
  ‚Üí Approximate shortest paths
""")

print("\nüéÆ –†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–á –ó–ê –ó–ê–°–¢–û–°–£–í–ê–ù–ù–Ø–ú:")
print("-"*80)
print("""
–†–µ–∞–ª-—Ç–∞–π–º —Å–∏—Å—Ç–µ–º–∏ (—ñ–≥—Ä–∏, —Ä–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω—ñ–∫–∞):
  ‚Üí A* –∑ Manhattan/Euclidean
  ‚Üí Jump Point Search –¥–ª—è —Å—ñ—Ç–æ–∫
  ‚Üí –õ—ñ–º—ñ—Ç —á–∞—Å—É: <1ms –Ω–∞ –∑–∞–ø–∏—Ç

–ù–∞–≤—ñ–≥–∞—Ü—ñ–π–Ω—ñ —Å–∏—Å—Ç–µ–º–∏:
  ‚Üí Contraction Hierarchies (OSRM)
  ‚Üí ALT –¥–ª—è –¥–∏–Ω–∞–º—ñ—á–Ω–∏—Ö —Å–∏—Ç—É–∞—Ü—ñ–π
  ‚Üí A* –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–∏—Ö –º–∞—Ä—à—Ä—É—Ç—ñ–≤

–ê–Ω–∞–ª—ñ–∑ –≥—Ä–∞—Ñ—ñ–≤:
  ‚Üí Floyd-Warshall (<500 –≤—É–∑–ª—ñ–≤)
  ‚Üí Johnson (>500 –≤—É–∑–ª—ñ–≤, —Ä–æ–∑—Ä—ñ–¥–∂–µ–Ω–∏–π)
  ‚Üí –ë–∞–≥–∞—Ç–æ —Ä–∞–∑—ñ–≤ Dijkstra (—â—ñ–ª—å–Ω–∏–π)

–°–æ—Ü—ñ–∞–ª—å–Ω—ñ –º–µ—Ä–µ–∂—ñ:
  ‚Üí Bidirectional Search
  ‚Üí BFS –¥–ª—è –Ω–µ–≤–∞–≥–æ–≤–∏—Ö –≥—Ä–∞—Ñ—ñ–≤
  ‚Üí –ü—Ä–∏–±–ª–∏–∂–µ–Ω—ñ –∞–ª–≥–æ—Ä–∏—Ç–º–∏ –¥–ª—è scale
""")

print("\n‚ö†Ô∏è –¢–ò–ü–û–í–Ü –ü–û–ú–ò–õ–ö–ò –¢–ê –Ø–ö –á–• –£–ù–ò–ö–ù–£–¢–ò:")
print("-"*80)
print("""
1. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è Floyd-Warshall –Ω–∞ –≤–µ–ª–∏–∫–∏—Ö –≥—Ä–∞—Ñ–∞—Ö
   ‚Üí –ü–µ—Ä–µ–π–¥—ñ—Ç—å –Ω–∞ Johnson –∞–±–æ –±–∞–≥–∞—Ç–æ—Ä–∞–∑–æ–≤–∏–π Dijkstra

2. Dijkstra –∑ –≤—ñ–¥'—î–º–Ω–∏–º–∏ –≤–∞–≥–∞–º–∏
   ‚Üí –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ Bellman-Ford

3. A* –±–µ–∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥–æ–ø—É—Å—Ç–∏–º–æ—Å—Ç—ñ –µ–≤—Ä–∏—Å—Ç–∏–∫–∏
   ‚Üí –ó–∞–≤–∂–¥–∏ –ø–µ—Ä–µ–≤—ñ—Ä—è–π—Ç–µ: h(n) ‚â§ —Ä–µ–∞–ª—å–Ω–∞ –≤—ñ–¥—Å—Ç–∞–Ω—å

4. –Ü–≥–Ω–æ—Ä—É–≤–∞–Ω–Ω—è early exit –≤ Dijkstra
   ‚Üí –ó—É–ø–∏–Ω—è–π—Ç–µ—Å—å –ø—Ä–∏ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—ñ –º–µ—Ç–∏

5. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–∏—Ö
   ‚Üí –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ heap, –Ω–µ —Å–ø–∏—Å–æ–∫

6. –í—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å –∫–µ—à—É–≤–∞–Ω–Ω—è –¥–ª—è –±–∞–≥–∞—Ç—å–æ—Ö –∑–∞–ø–∏—Ç—ñ–≤
   ‚Üí –†–æ–∑–≥–ª—è–Ω—å—Ç–µ Contraction Hierarchies
""")

print("\nüöÄ –ú–ê–ô–ë–£–¢–ù–Ü –ù–ê–ü–†–Ø–ú–ö–ò:")
print("-"*80)
print("""
- Machine Learning –¥–ª—è –ø–æ—à—É–∫—É —à–ª—è—Ö—ñ–≤ (Neural A*)
- –ö–≤–∞–Ω—Ç–æ–≤—ñ –∞–ª–≥–æ—Ä–∏—Ç–º–∏ –¥–ª—è –≥—Ä–∞—Ñ—ñ–≤
- GPU-–ø—Ä–∏—Å–∫–æ—Ä–µ–Ω—ñ –≤–µ—Ä—Å—ñ—ó –¥–ª—è –º–∞—Å–∏–≤–Ω–∏—Ö –≥—Ä–∞—Ñ—ñ–≤
- –î–∏–Ω–∞–º—ñ—á–Ω—ñ –∞–ª–≥–æ—Ä–∏—Ç–º–∏ –¥–ª—è –≥—Ä–∞—Ñ—ñ–≤ —â–æ –∑–º—ñ–Ω—é—é—Ç—å—Å—è
- –ì—ñ–±—Ä–∏–¥–Ω—ñ –ø—ñ–¥—Ö–æ–¥–∏ (ML + –∫–ª–∞—Å–∏—á–Ω—ñ –∞–ª–≥–æ—Ä–∏—Ç–º–∏)
""")

print("\n‚úÖ –ì–û–¢–û–í–û!")
print("="*80)
print("""
–¶–µ–π notebook –º—ñ—Å—Ç–∏—Ç—å:
  ‚Ä¢ 7 –∞–ª–≥–æ—Ä–∏—Ç–º—ñ–≤ –ø–æ—à—É–∫—É —à–ª—è—Ö—ñ–≤
  ‚Ä¢ 6+ –ø—Ä–∞–∫—Ç–∏—á–Ω–∏—Ö —Å—Ü–µ–Ω–∞—Ä—ñ—ó–≤
  ‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–µ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
  ‚Ä¢ –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—ó —Ç–∞ –≥—Ä–∞—Ñ—ñ–∫–∏
  ‚Ä¢ –ï–∫—Å–ø–µ—Ä—Ç–Ω—ñ –ø–æ—Ä–∞–¥–∏
  ‚Ä¢ –î–µ—Ä–µ–≤–æ —Ä—ñ—à–µ–Ω—å –¥–ª—è –≤–∏–±–æ—Ä—É –∞–ª–≥–æ—Ä–∏—Ç–º—É

–í—Å—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ —è–∫ PNG –≤–∏—Å–æ–∫–æ—ó —è–∫–æ—Å—Ç—ñ.
–ú–∞—Ç–µ—Ä—ñ–∞–ª –≥–æ—Ç–æ–≤–∏–π –¥–ª—è –Ω–∞–≤—á–∞–ª—å–Ω–æ–≥–æ –∫—É—Ä—Å—É –∞–±–æ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü—ñ—ó!
""")


# %%
# %%


